/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 4616:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (a, b) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  "use strict";

  function b(a, b) {
    return "undefined" == typeof b ? b = {
      autoBom: !1
    } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
      autoBom: !b
    }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], {
      type: a.type
    }) : a;
  }

  function c(a, b, c) {
    var d = new XMLHttpRequest();
    d.open("GET", a), d.responseType = "blob", d.onload = function () {
      g(d.response, b, c);
    }, d.onerror = function () {
      console.error("could not download file");
    }, d.send();
  }

  function d(a) {
    var b = new XMLHttpRequest();
    b.open("HEAD", a, !1);

    try {
      b.send();
    } catch (a) {}

    return 200 <= b.status && 299 >= b.status;
  }

  function e(a) {
    try {
      a.dispatchEvent(new MouseEvent("click"));
    } catch (c) {
      var b = document.createEvent("MouseEvents");
      b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
    }
  }

  var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof __webpack_require__.g && __webpack_require__.g.global === __webpack_require__.g ? __webpack_require__.g : void 0,
      a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent),
      g = f.saveAs || ("object" != typeof window || window !== f ? function () {} : "download" in HTMLAnchorElement.prototype && !a ? function (b, g, h) {
    var i = f.URL || f.webkitURL,
        j = document.createElement("a");
    g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
      i.revokeObjectURL(j.href);
    }, 4E4), setTimeout(function () {
      e(j);
    }, 0));
  } : "msSaveOrOpenBlob" in navigator ? function (f, g, h) {
    if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {
      var i = document.createElement("a");
      i.href = f, i.target = "_blank", setTimeout(function () {
        e(i);
      });
    }
  } : function (b, d, e, g) {
    if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c(b, d, e);
    var h = "application/octet-stream" === b.type,
        i = /constructor/i.test(f.HTMLElement) || f.safari,
        j = /CriOS\/[\d]+/.test(navigator.userAgent);

    if ((j || h && i || a) && "undefined" != typeof FileReader) {
      var k = new FileReader();
      k.onloadend = function () {
        var a = k.result;
        a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
      }, k.readAsDataURL(b);
    } else {
      var l = f.URL || f.webkitURL,
          m = l.createObjectURL(b);
      g ? g.location = m : location.href = m, g = null, setTimeout(function () {
        l.revokeObjectURL(m);
      }, 4E4);
    }
  });
  f.saveAs = g.saveAs = g,  true && (module.exports = g);
});

/***/ }),

/***/ 1923:
/***/ (() => {

/*!
 * jQuery QueryBuilder 2.5.0
 * Copyright 2014-2021 Damien "Mistic" Sorel (http://www.strangeplanet.fr)
 * Licensed under MIT (https://opensource.org/licenses/MIT)
 */

/* Build command: grunt --plugins=bt-selectpicker --languages=en,pl */
(function (factory) {
  /*if (typeof $ == 'undefined')
      var $ = require('jquery');
   if (typeof doT == 'undefined')
      var doT = require('dot/doT');
  */
  factory($, doT);
})(function ($, doT) {
  "use strict";
  /**
   * @typedef {object} Filter
   * @memberof QueryBuilder
   * @description See {@link http://querybuilder.js.org/index.html#filters}
   */

  /**
   * @typedef {object} Operator
   * @memberof QueryBuilder
   * @description See {@link http://querybuilder.js.org/index.html#operators}
   */

  /**
   * @param {jQuery} $el
   * @param {object} options - see {@link http://querybuilder.js.org/#options}
   * @constructor
   */

  var QueryBuilder = function ($el, options) {
    $el[0].queryBuilder = this;
    /**
     * Element container
     * @member {jQuery}
     * @readonly
     */

    this.$el = $el;
    /**
     * Configuration object
     * @member {object}
     * @readonly
     */

    this.settings = $.extendext(true, 'replace', {}, QueryBuilder.DEFAULTS, options);
    /**
     * Internal model
     * @member {Model}
     * @readonly
     */

    this.model = new Model();
    /**
     * Internal status
     * @member {object}
     * @property {string} id - id of the container
     * @property {boolean} generated_id - if the container id has been generated
     * @property {int} group_id - current group id
     * @property {int} rule_id - current rule id
     * @property {boolean} has_optgroup - if filters have optgroups
     * @property {boolean} has_operator_optgroup - if operators have optgroups
     * @readonly
     * @private
     */

    this.status = {
      id: null,
      generated_id: false,
      group_id: 0,
      rule_id: 0,
      has_optgroup: false,
      has_operator_optgroup: false
    };
    /**
     * List of filters
     * @member {QueryBuilder.Filter[]}
     * @readonly
     */

    this.filters = this.settings.filters;
    /**
     * List of icons
     * @member {object.<string, string>}
     * @readonly
     */

    this.icons = this.settings.icons;
    /**
     * List of operators
     * @member {QueryBuilder.Operator[]}
     * @readonly
     */

    this.operators = this.settings.operators;
    /**
     * List of templates
     * @member {object.<string, function>}
     * @readonly
     */

    this.templates = this.settings.templates;
    /**
     * Plugins configuration
     * @member {object.<string, object>}
     * @readonly
     */

    this.plugins = this.settings.plugins;
    /**
     * Translations object
     * @member {object}
     * @readonly
     */

    this.lang = null; // translations : english << 'lang_code' << custom

    if (QueryBuilder.regional['en'] === undefined) {
      Utils.error('Config', '"i18n/en.js" not loaded.');
    }

    this.lang = $.extendext(true, 'replace', {}, QueryBuilder.regional['en'], QueryBuilder.regional[this.settings.lang_code], this.settings.lang); // "allow_groups" can be boolean or int

    if (this.settings.allow_groups === false) {
      this.settings.allow_groups = 0;
    } else if (this.settings.allow_groups === true) {
      this.settings.allow_groups = -1;
    } // init templates


    Object.keys(this.templates).forEach(function (tpl) {
      if (!this.templates[tpl]) {
        this.templates[tpl] = QueryBuilder.templates[tpl];
      }

      if (typeof this.templates[tpl] == 'string') {
        this.templates[tpl] = doT.template(this.templates[tpl]);
      }
    }, this); // ensure we have a container id

    if (!this.$el.attr('id')) {
      this.$el.attr('id', 'qb_' + Math.floor(Math.random() * 99999));
      this.status.generated_id = true;
    }

    this.status.id = this.$el.attr('id'); // INIT

    this.$el.addClass('query-builder form-inline');
    this.filters = this.checkFilters(this.filters);
    this.operators = this.checkOperators(this.operators);
    this.bindEvents();
    this.initPlugins();
  };

  $.extend(QueryBuilder.prototype,
  /** @lends QueryBuilder.prototype */
  {
    /**
     * Triggers an event on the builder container
     * @param {string} type
     * @returns {$.Event}
     */
    trigger: function (type) {
      var event = new $.Event(this._tojQueryEvent(type), {
        builder: this
      });
      this.$el.triggerHandler(event, Array.prototype.slice.call(arguments, 1));
      return event;
    },

    /**
     * Triggers an event on the builder container and returns the modified value
     * @param {string} type
     * @param {*} value
     * @returns {*}
     */
    change: function (type, value) {
      var event = new $.Event(this._tojQueryEvent(type, true), {
        builder: this,
        value: value
      });
      this.$el.triggerHandler(event, Array.prototype.slice.call(arguments, 2));
      return event.value;
    },

    /**
     * Attaches an event listener on the builder container
     * @param {string} type
     * @param {function} cb
     * @returns {QueryBuilder}
     */
    on: function (type, cb) {
      this.$el.on(this._tojQueryEvent(type), cb);
      return this;
    },

    /**
     * Removes an event listener from the builder container
     * @param {string} type
     * @param {function} [cb]
     * @returns {QueryBuilder}
     */
    off: function (type, cb) {
      this.$el.off(this._tojQueryEvent(type), cb);
      return this;
    },

    /**
     * Attaches an event listener called once on the builder container
     * @param {string} type
     * @param {function} cb
     * @returns {QueryBuilder}
     */
    once: function (type, cb) {
      this.$el.one(this._tojQueryEvent(type), cb);
      return this;
    },

    /**
     * Appends `.queryBuilder` and optionally `.filter` to the events names
     * @param {string} name
     * @param {boolean} [filter=false]
     * @returns {string}
     * @private
     */
    _tojQueryEvent: function (name, filter) {
      return name.split(' ').map(function (type) {
        return type + '.queryBuilder' + (filter ? '.filter' : '');
      }).join(' ');
    }
  });
  /**
   * Allowed types and their internal representation
   * @type {object.<string, string>}
   * @readonly
   * @private
   */

  QueryBuilder.types = {
    'string': 'string',
    'integer': 'number',
    'double': 'number',
    'date': 'datetime',
    'time': 'datetime',
    'datetime': 'datetime',
    'boolean': 'boolean'
  };
  /**
   * Allowed inputs
   * @type {string[]}
   * @readonly
   * @private
   */

  QueryBuilder.inputs = ['text', 'number', 'textarea', 'radio', 'checkbox', 'select'];
  /**
   * Runtime modifiable options with `setOptions` method
   * @type {string[]}
   * @readonly
   * @private
   */

  QueryBuilder.modifiable_options = ['display_errors', 'allow_groups', 'allow_empty', 'default_condition', 'default_filter'];
  /**
   * CSS selectors for common components
   * @type {object.<string, string>}
   * @readonly
   */

  QueryBuilder.selectors = {
    group_container: '.rules-group-container',
    rule_container: '.rule-container',
    filter_container: '.rule-filter-container',
    operator_container: '.rule-operator-container',
    value_container: '.rule-value-container',
    error_container: '.error-container',
    condition_container: '.rules-group-header .group-conditions',
    rule_header: '.rule-header',
    group_header: '.rules-group-header',
    group_actions: '.group-actions',
    rule_actions: '.rule-actions',
    rules_list: '.rules-group-body>.rules-list',
    group_condition: '.rules-group-header [name$=_cond]',
    rule_filter: '.rule-filter-container [name$=_filter]',
    rule_operator: '.rule-operator-container [name$=_operator]',
    rule_value: '.rule-value-container [name*=_value_]',
    add_rule: '[data-add=rule]',
    delete_rule: '[data-delete=rule]',
    add_group: '[data-add=group]',
    delete_group: '[data-delete=group]'
  };
  /**
   * Template strings (see template.js)
   * @type {object.<string, string>}
   * @readonly
   */

  QueryBuilder.templates = {};
  /**
   * Localized strings (see i18n/)
   * @type {object.<string, object>}
   * @readonly
   */

  QueryBuilder.regional = {};
  /**
   * Default operators
   * @type {object.<string, object>}
   * @readonly
   */

  QueryBuilder.OPERATORS = {
    equal: {
      type: 'equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    },
    not_equal: {
      type: 'not_equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    },
    in: {
      type: 'in',
      nb_inputs: 1,
      multiple: true,
      apply_to: ['string', 'number', 'datetime']
    },
    not_in: {
      type: 'not_in',
      nb_inputs: 1,
      multiple: true,
      apply_to: ['string', 'number', 'datetime']
    },
    less: {
      type: 'less',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    less_or_equal: {
      type: 'less_or_equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    greater: {
      type: 'greater',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    greater_or_equal: {
      type: 'greater_or_equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    between: {
      type: 'between',
      nb_inputs: 2,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    not_between: {
      type: 'not_between',
      nb_inputs: 2,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    begins_with: {
      type: 'begins_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    not_begins_with: {
      type: 'not_begins_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    contains: {
      type: 'contains',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    not_contains: {
      type: 'not_contains',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    ends_with: {
      type: 'ends_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    not_ends_with: {
      type: 'not_ends_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    is_empty: {
      type: 'is_empty',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string']
    },
    is_not_empty: {
      type: 'is_not_empty',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string']
    },
    is_null: {
      type: 'is_null',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    },
    is_not_null: {
      type: 'is_not_null',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    }
  };
  /**
   * Default configuration
   * @type {object}
   * @readonly
   */

  QueryBuilder.DEFAULTS = {
    filters: [],
    plugins: [],
    sort_filters: false,
    display_errors: true,
    allow_groups: -1,
    allow_empty: false,
    conditions: ['AND', 'OR'],
    default_condition: 'AND',
    inputs_separator: ' , ',
    select_placeholder: '------',
    display_empty_filter: true,
    default_filter: null,
    optgroups: {},
    default_rule_flags: {
      filter_readonly: false,
      operator_readonly: false,
      value_readonly: false,
      no_delete: false
    },
    default_group_flags: {
      condition_readonly: false,
      no_add_rule: false,
      no_add_group: false,
      no_delete: false
    },
    templates: {
      group: null,
      rule: null,
      filterSelect: null,
      operatorSelect: null,
      ruleValueSelect: null
    },
    lang_code: 'en',
    lang: {},
    operators: ['equal', 'not_equal', 'in', 'not_in', 'less', 'less_or_equal', 'greater', 'greater_or_equal', 'between', 'not_between', 'begins_with', 'not_begins_with', 'contains', 'not_contains', 'ends_with', 'not_ends_with', 'is_empty', 'is_not_empty', 'is_null', 'is_not_null'],
    icons: {
      add_group: 'glyphicon glyphicon-plus-sign',
      add_rule: 'glyphicon glyphicon-plus',
      remove_group: 'glyphicon glyphicon-remove',
      remove_rule: 'glyphicon glyphicon-remove',
      error: 'glyphicon glyphicon-warning-sign'
    }
  };
  /**
   * @module plugins
   */

  /**
   * Definition of available plugins
   * @type {object.<String, object>}
   */

  QueryBuilder.plugins = {};
  /**
   * Gets or extends the default configuration
   * @param {object} [options] - new configuration
   * @returns {undefined|object} nothing or configuration object (copy)
   */

  QueryBuilder.defaults = function (options) {
    if (typeof options == 'object') {
      $.extendext(true, 'replace', QueryBuilder.DEFAULTS, options);
    } else if (typeof options == 'string') {
      if (typeof QueryBuilder.DEFAULTS[options] == 'object') {
        return $.extend(true, {}, QueryBuilder.DEFAULTS[options]);
      } else {
        return QueryBuilder.DEFAULTS[options];
      }
    } else {
      return $.extend(true, {}, QueryBuilder.DEFAULTS);
    }
  };
  /**
   * Registers a new plugin
   * @param {string} name
   * @param {function} fct - init function
   * @param {object} [def] - default options
   */


  QueryBuilder.define = function (name, fct, def) {
    QueryBuilder.plugins[name] = {
      fct: fct,
      def: def || {}
    };
  };
  /**
   * Adds new methods to QueryBuilder prototype
   * @param {object.<string, function>} methods
   */


  QueryBuilder.extend = function (methods) {
    $.extend(QueryBuilder.prototype, methods);
  };
  /**
   * Initializes plugins for an instance
   * @throws ConfigError
   * @private
   */


  QueryBuilder.prototype.initPlugins = function () {
    if (!this.plugins) {
      return;
    }

    if ($.isArray(this.plugins)) {
      var tmp = {};
      this.plugins.forEach(function (plugin) {
        tmp[plugin] = null;
      });
      this.plugins = tmp;
    }

    Object.keys(this.plugins).forEach(function (plugin) {
      if (plugin in QueryBuilder.plugins) {
        this.plugins[plugin] = $.extend(true, {}, QueryBuilder.plugins[plugin].def, this.plugins[plugin] || {});
        QueryBuilder.plugins[plugin].fct.call(this, this.plugins[plugin]);
      } else {
        Utils.error('Config', 'Unable to find plugin "{0}"', plugin);
      }
    }, this);
  };
  /**
   * Returns the config of a plugin, if the plugin is not loaded, returns the default config.
   * @param {string} name
   * @param {string} [property]
   * @throws ConfigError
   * @returns {*}
   */


  QueryBuilder.prototype.getPluginOptions = function (name, property) {
    var plugin;

    if (this.plugins && this.plugins[name]) {
      plugin = this.plugins[name];
    } else if (QueryBuilder.plugins[name]) {
      plugin = QueryBuilder.plugins[name].def;
    }

    if (plugin) {
      if (property) {
        return plugin[property];
      } else {
        return plugin;
      }
    } else {
      Utils.error('Config', 'Unable to find plugin "{0}"', name);
    }
  };
  /**
   * Final initialisation of the builder
   * @param {object} [rules]
   * @fires QueryBuilder.afterInit
   * @private
   */


  QueryBuilder.prototype.init = function (rules) {
    /**
     * When the initilization is done, just before creating the root group
     * @event afterInit
     * @memberof QueryBuilder
     */
    this.trigger('afterInit');

    if (rules) {
      this.setRules(rules);
      delete this.settings.rules;
    } else {
      this.setRoot(true);
    }
  };
  /**
   * Checks the configuration of each filter
   * @param {QueryBuilder.Filter[]} filters
   * @returns {QueryBuilder.Filter[]}
   * @throws ConfigError
   */


  QueryBuilder.prototype.checkFilters = function (filters) {
    var definedFilters = [];

    if (!filters || filters.length === 0) {
      Utils.error('Config', 'Missing filters list');
    }

    filters.forEach(function (filter, i) {
      if (!filter.id) {
        Utils.error('Config', 'Missing filter {0} id', i);
      }

      if (definedFilters.indexOf(filter.id) != -1) {
        Utils.error('Config', 'Filter "{0}" already defined', filter.id);
      }

      definedFilters.push(filter.id);

      if (!filter.type) {
        filter.type = 'string';
      } else if (!QueryBuilder.types[filter.type]) {
        Utils.error('Config', 'Invalid type "{0}"', filter.type);
      }

      if (!filter.input) {
        filter.input = QueryBuilder.types[filter.type] === 'number' ? 'number' : 'text';
      } else if (typeof filter.input != 'function' && QueryBuilder.inputs.indexOf(filter.input) == -1) {
        Utils.error('Config', 'Invalid input "{0}"', filter.input);
      }

      if (filter.operators) {
        filter.operators.forEach(function (operator) {
          if (typeof operator != 'string') {
            Utils.error('Config', 'Filter operators must be global operators types (string)');
          }
        });
      }

      if (!filter.field) {
        filter.field = filter.id;
      }

      if (!filter.label) {
        filter.label = filter.field;
      }

      if (!filter.optgroup) {
        filter.optgroup = null;
      } else {
        this.status.has_optgroup = true; // register optgroup if needed

        if (!this.settings.optgroups[filter.optgroup]) {
          this.settings.optgroups[filter.optgroup] = filter.optgroup;
        }
      }

      switch (filter.input) {
        case 'radio':
        case 'checkbox':
          if (!filter.values || filter.values.length < 1) {
            Utils.error('Config', 'Missing filter "{0}" values', filter.id);
          }

          break;

        case 'select':
          var cleanValues = [];
          filter.has_optgroup = false;
          Utils.iterateOptions(filter.values, function (value, label, optgroup) {
            cleanValues.push({
              value: value,
              label: label,
              optgroup: optgroup || null
            });

            if (optgroup) {
              filter.has_optgroup = true; // register optgroup if needed

              if (!this.settings.optgroups[optgroup]) {
                this.settings.optgroups[optgroup] = optgroup;
              }
            }
          }.bind(this));

          if (filter.has_optgroup) {
            filter.values = Utils.groupSort(cleanValues, 'optgroup');
          } else {
            filter.values = cleanValues;
          }

          if (filter.placeholder) {
            if (filter.placeholder_value === undefined) {
              filter.placeholder_value = -1;
            }

            filter.values.forEach(function (entry) {
              if (entry.value == filter.placeholder_value) {
                Utils.error('Config', 'Placeholder of filter "{0}" overlaps with one of its values', filter.id);
              }
            });
          }

          break;
      }
    }, this);

    if (this.settings.sort_filters) {
      if (typeof this.settings.sort_filters == 'function') {
        filters.sort(this.settings.sort_filters);
      } else {
        var self = this;
        filters.sort(function (a, b) {
          return self.translate(a.label).localeCompare(self.translate(b.label));
        });
      }
    }

    if (this.status.has_optgroup) {
      filters = Utils.groupSort(filters, 'optgroup');
    }

    return filters;
  };
  /**
   * Checks the configuration of each operator
   * @param {QueryBuilder.Operator[]} operators
   * @returns {QueryBuilder.Operator[]}
   * @throws ConfigError
   */


  QueryBuilder.prototype.checkOperators = function (operators) {
    var definedOperators = [];
    operators.forEach(function (operator, i) {
      if (typeof operator == 'string') {
        if (!QueryBuilder.OPERATORS[operator]) {
          Utils.error('Config', 'Unknown operator "{0}"', operator);
        }

        operators[i] = operator = $.extendext(true, 'replace', {}, QueryBuilder.OPERATORS[operator]);
      } else {
        if (!operator.type) {
          Utils.error('Config', 'Missing "type" for operator {0}', i);
        }

        if (QueryBuilder.OPERATORS[operator.type]) {
          operators[i] = operator = $.extendext(true, 'replace', {}, QueryBuilder.OPERATORS[operator.type], operator);
        }

        if (operator.nb_inputs === undefined || operator.apply_to === undefined) {
          Utils.error('Config', 'Missing "nb_inputs" and/or "apply_to" for operator "{0}"', operator.type);
        }
      }

      if (definedOperators.indexOf(operator.type) != -1) {
        Utils.error('Config', 'Operator "{0}" already defined', operator.type);
      }

      definedOperators.push(operator.type);

      if (!operator.optgroup) {
        operator.optgroup = null;
      } else {
        this.status.has_operator_optgroup = true; // register optgroup if needed

        if (!this.settings.optgroups[operator.optgroup]) {
          this.settings.optgroups[operator.optgroup] = operator.optgroup;
        }
      }
    }, this);

    if (this.status.has_operator_optgroup) {
      operators = Utils.groupSort(operators, 'optgroup');
    }

    return operators;
  };
  /**
   * Adds all events listeners to the builder
   * @private
   */


  QueryBuilder.prototype.bindEvents = function () {
    var self = this;
    var Selectors = QueryBuilder.selectors; // group condition change

    this.$el.on('change.queryBuilder', Selectors.group_condition, function () {
      if ($(this).is(':checked')) {
        var $group = $(this).closest(Selectors.group_container);
        self.getModel($group).condition = $(this).val();
      }
    }); // rule filter change

    this.$el.on('change.queryBuilder', Selectors.rule_filter, function () {
      var $rule = $(this).closest(Selectors.rule_container);
      self.getModel($rule).filter = self.getFilterById($(this).val());
    }); // rule operator change

    this.$el.on('change.queryBuilder', Selectors.rule_operator, function () {
      var $rule = $(this).closest(Selectors.rule_container);
      self.getModel($rule).operator = self.getOperatorByType($(this).val());
    }); // add rule button

    this.$el.on('click.queryBuilder', Selectors.add_rule, function () {
      var $group = $(this).closest(Selectors.group_container);
      self.addRule(self.getModel($group));
    }); // delete rule button

    this.$el.on('click.queryBuilder', Selectors.delete_rule, function () {
      var $rule = $(this).closest(Selectors.rule_container);
      self.deleteRule(self.getModel($rule));
    });

    if (this.settings.allow_groups !== 0) {
      // add group button
      this.$el.on('click.queryBuilder', Selectors.add_group, function () {
        var $group = $(this).closest(Selectors.group_container);
        self.addGroup(self.getModel($group));
      }); // delete group button

      this.$el.on('click.queryBuilder', Selectors.delete_group, function () {
        var $group = $(this).closest(Selectors.group_container);
        self.deleteGroup(self.getModel($group));
      });
    } // model events


    this.model.on({
      'drop': function (e, node) {
        node.$el.remove();
        self.refreshGroupsConditions();
      },
      'add': function (e, parent, node, index) {
        if (index === 0) {
          node.$el.prependTo(parent.$el.find('>' + QueryBuilder.selectors.rules_list));
        } else {
          node.$el.insertAfter(parent.rules[index - 1].$el);
        }

        self.refreshGroupsConditions();
      },
      'move': function (e, node, group, index) {
        node.$el.detach();

        if (index === 0) {
          node.$el.prependTo(group.$el.find('>' + QueryBuilder.selectors.rules_list));
        } else {
          node.$el.insertAfter(group.rules[index - 1].$el);
        }

        self.refreshGroupsConditions();
      },
      'update': function (e, node, field, value, oldValue) {
        if (node instanceof Rule) {
          switch (field) {
            case 'error':
              self.updateError(node);
              break;

            case 'flags':
              self.applyRuleFlags(node);
              break;

            case 'filter':
              self.updateRuleFilter(node, oldValue);
              break;

            case 'operator':
              self.updateRuleOperator(node, oldValue);
              break;

            case 'value':
              self.updateRuleValue(node, oldValue);
              break;
          }
        } else {
          switch (field) {
            case 'error':
              self.updateError(node);
              break;

            case 'flags':
              self.applyGroupFlags(node);
              break;

            case 'condition':
              self.updateGroupCondition(node, oldValue);
              break;
          }
        }
      }
    });
  };
  /**
   * Creates the root group
   * @param {boolean} [addRule=true] - adds a default empty rule
   * @param {object} [data] - group custom data
   * @param {object} [flags] - flags to apply to the group
   * @returns {Group} root group
   * @fires QueryBuilder.afterAddGroup
   */


  QueryBuilder.prototype.setRoot = function (addRule, data, flags) {
    addRule = addRule === undefined || addRule === true;
    var group_id = this.nextGroupId();
    var $group = $(this.getGroupTemplate(group_id, 1));
    this.$el.append($group);
    this.model.root = new Group(null, $group);
    this.model.root.model = this.model;
    this.model.root.data = data;
    this.model.root.flags = $.extend({}, this.settings.default_group_flags, flags);
    this.model.root.condition = this.settings.default_condition;
    this.trigger('afterAddGroup', this.model.root);

    if (addRule) {
      this.addRule(this.model.root);
    }

    return this.model.root;
  };
  /**
   * Adds a new group
   * @param {Group} parent
   * @param {boolean} [addRule=true] - adds a default empty rule
   * @param {object} [data] - group custom data
   * @param {object} [flags] - flags to apply to the group
   * @returns {Group}
   * @fires QueryBuilder.beforeAddGroup
   * @fires QueryBuilder.afterAddGroup
   */


  QueryBuilder.prototype.addGroup = function (parent, addRule, data, flags) {
    addRule = addRule === undefined || addRule === true;
    var level = parent.level + 1;
    /**
     * Just before adding a group, can be prevented.
     * @event beforeAddGroup
     * @memberof QueryBuilder
     * @param {Group} parent
     * @param {boolean} addRule - if an empty rule will be added in the group
     * @param {int} level - nesting level of the group, 1 is the root group
     */

    var e = this.trigger('beforeAddGroup', parent, addRule, level);

    if (e.isDefaultPrevented()) {
      return null;
    }

    var group_id = this.nextGroupId();
    var $group = $(this.getGroupTemplate(group_id, level));
    var model = parent.addGroup($group);
    model.data = data;
    model.flags = $.extend({}, this.settings.default_group_flags, flags);
    model.condition = this.settings.default_condition;
    /**
     * Just after adding a group
     * @event afterAddGroup
     * @memberof QueryBuilder
     * @param {Group} group
     */

    this.trigger('afterAddGroup', model);
    /**
     * After any change in the rules
     * @event rulesChanged
     * @memberof QueryBuilder
     */

    this.trigger('rulesChanged');

    if (addRule) {
      this.addRule(model);
    }

    return model;
  };
  /**
   * Tries to delete a group. The group is not deleted if at least one rule is flagged `no_delete`.
   * @param {Group} group
   * @returns {boolean} if the group has been deleted
   * @fires QueryBuilder.beforeDeleteGroup
   * @fires QueryBuilder.afterDeleteGroup
   */


  QueryBuilder.prototype.deleteGroup = function (group) {
    if (group.isRoot()) {
      return false;
    }
    /**
     * Just before deleting a group, can be prevented
     * @event beforeDeleteGroup
     * @memberof QueryBuilder
     * @param {Group} parent
     */


    var e = this.trigger('beforeDeleteGroup', group);

    if (e.isDefaultPrevented()) {
      return false;
    }

    var del = true;
    group.each('reverse', function (rule) {
      del &= this.deleteRule(rule);
    }, function (group) {
      del &= this.deleteGroup(group);
    }, this);

    if (del) {
      group.drop();
      /**
       * Just after deleting a group
       * @event afterDeleteGroup
       * @memberof QueryBuilder
       */

      this.trigger('afterDeleteGroup');
      this.trigger('rulesChanged');
    }

    return del;
  };
  /**
   * Performs actions when a group's condition changes
   * @param {Group} group
   * @param {object} previousCondition
   * @fires QueryBuilder.afterUpdateGroupCondition
   * @private
   */


  QueryBuilder.prototype.updateGroupCondition = function (group, previousCondition) {
    group.$el.find('>' + QueryBuilder.selectors.group_condition).each(function () {
      var $this = $(this);
      $this.prop('checked', $this.val() === group.condition);
      $this.parent().toggleClass('active', $this.val() === group.condition);
    });
    /**
     * After the group condition has been modified
     * @event afterUpdateGroupCondition
     * @memberof QueryBuilder
     * @param {Group} group
     * @param {object} previousCondition
     */

    this.trigger('afterUpdateGroupCondition', group, previousCondition);
    this.trigger('rulesChanged');
  };
  /**
   * Updates the visibility of conditions based on number of rules inside each group
   * @private
   */


  QueryBuilder.prototype.refreshGroupsConditions = function () {
    (function walk(group) {
      if (!group.flags || group.flags && !group.flags.condition_readonly) {
        group.$el.find('>' + QueryBuilder.selectors.group_condition).prop('disabled', group.rules.length <= 1).parent().toggleClass('disabled', group.rules.length <= 1);
      }

      group.each(null, function (group) {
        walk(group);
      }, this);
    })(this.model.root);
  };
  /**
   * Adds a new rule
   * @param {Group} parent
   * @param {object} [data] - rule custom data
   * @param {object} [flags] - flags to apply to the rule
   * @returns {Rule}
   * @fires QueryBuilder.beforeAddRule
   * @fires QueryBuilder.afterAddRule
   * @fires QueryBuilder.changer:getDefaultFilter
   */


  QueryBuilder.prototype.addRule = function (parent, data, flags) {
    /**
     * Just before adding a rule, can be prevented
     * @event beforeAddRule
     * @memberof QueryBuilder
     * @param {Group} parent
     */
    var e = this.trigger('beforeAddRule', parent);

    if (e.isDefaultPrevented()) {
      return null;
    }

    var rule_id = this.nextRuleId();
    var $rule = $(this.getRuleTemplate(rule_id));
    var model = parent.addRule($rule);
    model.data = data;
    model.flags = $.extend({}, this.settings.default_rule_flags, flags);
    /**
     * Just after adding a rule
     * @event afterAddRule
     * @memberof QueryBuilder
     * @param {Rule} rule
     */

    this.trigger('afterAddRule', model);
    this.trigger('rulesChanged');
    this.createRuleFilters(model);

    if (this.settings.default_filter || !this.settings.display_empty_filter) {
      /**
       * Modifies the default filter for a rule
       * @event changer:getDefaultFilter
       * @memberof QueryBuilder
       * @param {QueryBuilder.Filter} filter
       * @param {Rule} rule
       * @returns {QueryBuilder.Filter}
       */
      model.filter = this.change('getDefaultFilter', this.getFilterById(this.settings.default_filter || this.filters[0].id), model);
    }

    return model;
  };
  /**
   * Tries to delete a rule
   * @param {Rule} rule
   * @returns {boolean} if the rule has been deleted
   * @fires QueryBuilder.beforeDeleteRule
   * @fires QueryBuilder.afterDeleteRule
   */


  QueryBuilder.prototype.deleteRule = function (rule) {
    if (rule.flags.no_delete) {
      return false;
    }
    /**
     * Just before deleting a rule, can be prevented
     * @event beforeDeleteRule
     * @memberof QueryBuilder
     * @param {Rule} rule
     */


    var e = this.trigger('beforeDeleteRule', rule);

    if (e.isDefaultPrevented()) {
      return false;
    }

    rule.drop();
    /**
     * Just after deleting a rule
     * @event afterDeleteRule
     * @memberof QueryBuilder
     */

    this.trigger('afterDeleteRule');
    this.trigger('rulesChanged');
    return true;
  };
  /**
   * Creates the filters for a rule
   * @param {Rule} rule
   * @fires QueryBuilder.changer:getRuleFilters
   * @fires QueryBuilder.afterCreateRuleFilters
   * @private
   */


  QueryBuilder.prototype.createRuleFilters = function (rule) {
    /**
     * Modifies the list a filters available for a rule
     * @event changer:getRuleFilters
     * @memberof QueryBuilder
     * @param {QueryBuilder.Filter[]} filters
     * @param {Rule} rule
     * @returns {QueryBuilder.Filter[]}
     */
    var filters = this.change('getRuleFilters', this.filters, rule);
    var $filterSelect = $(this.getRuleFilterSelect(rule, filters));
    rule.$el.find(QueryBuilder.selectors.filter_container).html($filterSelect);
    /**
     * After creating the dropdown for filters
     * @event afterCreateRuleFilters
     * @memberof QueryBuilder
     * @param {Rule} rule
     */

    this.trigger('afterCreateRuleFilters', rule);
    this.applyRuleFlags(rule);
  };
  /**
   * Creates the operators for a rule and init the rule operator
   * @param {Rule} rule
   * @fires QueryBuilder.afterCreateRuleOperators
   * @private
   */


  QueryBuilder.prototype.createRuleOperators = function (rule) {
    var $operatorContainer = rule.$el.find(QueryBuilder.selectors.operator_container).empty();

    if (!rule.filter) {
      return;
    }

    var operators = this.getOperators(rule.filter);
    var $operatorSelect = $(this.getRuleOperatorSelect(rule, operators));
    $operatorContainer.html($operatorSelect); // set the operator without triggering update event

    if (rule.filter.default_operator) {
      rule.__.operator = this.getOperatorByType(rule.filter.default_operator);
    } else {
      rule.__.operator = operators[0];
    }

    rule.$el.find(QueryBuilder.selectors.rule_operator).val(rule.operator.type);
    /**
     * After creating the dropdown for operators
     * @event afterCreateRuleOperators
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {QueryBuilder.Operator[]} operators - allowed operators for this rule
     */

    this.trigger('afterCreateRuleOperators', rule, operators);
    this.applyRuleFlags(rule);
  };
  /**
   * Creates the main input for a rule
   * @param {Rule} rule
   * @fires QueryBuilder.afterCreateRuleInput
   * @private
   */


  QueryBuilder.prototype.createRuleInput = function (rule) {
    var $valueContainer = rule.$el.find(QueryBuilder.selectors.value_container).empty();
    rule.__.value = undefined;

    if (!rule.filter || !rule.operator || rule.operator.nb_inputs === 0) {
      return;
    }

    var self = this;
    var $inputs = $();
    var filter = rule.filter;

    for (var i = 0; i < rule.operator.nb_inputs; i++) {
      var $ruleInput = $(this.getRuleInput(rule, i));
      if (i > 0) $valueContainer.append(this.settings.inputs_separator);
      $valueContainer.append($ruleInput);
      $inputs = $inputs.add($ruleInput);
    }

    $valueContainer.css('display', '');
    $inputs.on('change ' + (filter.input_event || ''), function () {
      if (!rule._updating_input) {
        rule._updating_value = true;
        rule.value = self.getRuleInputValue(rule);
        rule._updating_value = false;
      }
    });

    if (filter.plugin) {
      $inputs[filter.plugin](filter.plugin_config || {});
    }
    /**
     * After creating the input for a rule and initializing optional plugin
     * @event afterCreateRuleInput
     * @memberof QueryBuilder
     * @param {Rule} rule
     */


    this.trigger('afterCreateRuleInput', rule);

    if (filter.default_value !== undefined) {
      rule.value = filter.default_value;
    } else {
      rule._updating_value = true;
      rule.value = self.getRuleInputValue(rule);
      rule._updating_value = false;
    }

    this.applyRuleFlags(rule);
  };
  /**
   * Performs action when a rule's filter changes
   * @param {Rule} rule
   * @param {object} previousFilter
   * @fires QueryBuilder.afterUpdateRuleFilter
   * @private
   */


  QueryBuilder.prototype.updateRuleFilter = function (rule, previousFilter) {
    this.createRuleOperators(rule);
    this.createRuleInput(rule);
    rule.$el.find(QueryBuilder.selectors.rule_filter).val(rule.filter ? rule.filter.id : '-1'); // clear rule data if the filter changed

    if (previousFilter && rule.filter && previousFilter.id !== rule.filter.id) {
      rule.data = undefined;
    }
    /**
     * After the filter has been updated and the operators and input re-created
     * @event afterUpdateRuleFilter
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {object} previousFilter
     */


    this.trigger('afterUpdateRuleFilter', rule, previousFilter);
    this.trigger('rulesChanged');
  };
  /**
   * Performs actions when a rule's operator changes
   * @param {Rule} rule
   * @param {object} previousOperator
   * @fires QueryBuilder.afterUpdateRuleOperator
   * @private
   */


  QueryBuilder.prototype.updateRuleOperator = function (rule, previousOperator) {
    var $valueContainer = rule.$el.find(QueryBuilder.selectors.value_container);

    if (!rule.operator || rule.operator.nb_inputs === 0) {
      $valueContainer.hide();
      rule.__.value = undefined;
    } else {
      $valueContainer.css('display', '');

      if ($valueContainer.is(':empty') || !previousOperator || rule.operator.nb_inputs !== previousOperator.nb_inputs || rule.operator.optgroup !== previousOperator.optgroup) {
        this.createRuleInput(rule);
      }
    }

    if (rule.operator) {
      rule.$el.find(QueryBuilder.selectors.rule_operator).val(rule.operator.type); // refresh value if the format changed for this operator

      rule.__.value = this.getRuleInputValue(rule);
    }
    /**
     *  After the operator has been updated and the input optionally re-created
     * @event afterUpdateRuleOperator
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {object} previousOperator
     */


    this.trigger('afterUpdateRuleOperator', rule, previousOperator);
    this.trigger('rulesChanged');
  };
  /**
   * Performs actions when rule's value changes
   * @param {Rule} rule
   * @param {object} previousValue
   * @fires QueryBuilder.afterUpdateRuleValue
   * @private
   */


  QueryBuilder.prototype.updateRuleValue = function (rule, previousValue) {
    if (!rule._updating_value) {
      this.setRuleInputValue(rule, rule.value);
    }
    /**
     * After the rule value has been modified
     * @event afterUpdateRuleValue
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {*} previousValue
     */


    this.trigger('afterUpdateRuleValue', rule, previousValue);
    this.trigger('rulesChanged');
  };
  /**
   * Changes a rule's properties depending on its flags
   * @param {Rule} rule
   * @fires QueryBuilder.afterApplyRuleFlags
   * @private
   */


  QueryBuilder.prototype.applyRuleFlags = function (rule) {
    var flags = rule.flags;
    var Selectors = QueryBuilder.selectors;
    rule.$el.find(Selectors.rule_filter).prop('disabled', flags.filter_readonly);
    rule.$el.find(Selectors.rule_operator).prop('disabled', flags.operator_readonly);
    rule.$el.find(Selectors.rule_value).prop('disabled', flags.value_readonly);

    if (flags.no_delete) {
      rule.$el.find(Selectors.delete_rule).remove();
    }
    /**
     * After rule's flags has been applied
     * @event afterApplyRuleFlags
     * @memberof QueryBuilder
     * @param {Rule} rule
     */


    this.trigger('afterApplyRuleFlags', rule);
  };
  /**
   * Changes group's properties depending on its flags
   * @param {Group} group
   * @fires QueryBuilder.afterApplyGroupFlags
   * @private
   */


  QueryBuilder.prototype.applyGroupFlags = function (group) {
    var flags = group.flags;
    var Selectors = QueryBuilder.selectors;
    group.$el.find('>' + Selectors.group_condition).prop('disabled', flags.condition_readonly).parent().toggleClass('readonly', flags.condition_readonly);

    if (flags.no_add_rule) {
      group.$el.find(Selectors.add_rule).remove();
    }

    if (flags.no_add_group) {
      group.$el.find(Selectors.add_group).remove();
    }

    if (flags.no_delete) {
      group.$el.find(Selectors.delete_group).remove();
    }
    /**
     * After group's flags has been applied
     * @event afterApplyGroupFlags
     * @memberof QueryBuilder
     * @param {Group} group
     */


    this.trigger('afterApplyGroupFlags', group);
  };
  /**
   * Clears all errors markers
   * @param {Node} [node] default is root Group
   */


  QueryBuilder.prototype.clearErrors = function (node) {
    node = node || this.model.root;

    if (!node) {
      return;
    }

    node.error = null;

    if (node instanceof Group) {
      node.each(function (rule) {
        rule.error = null;
      }, function (group) {
        this.clearErrors(group);
      }, this);
    }
  };
  /**
   * Adds/Removes error on a Rule or Group
   * @param {Node} node
   * @fires QueryBuilder.changer:displayError
   * @private
   */


  QueryBuilder.prototype.updateError = function (node) {
    if (this.settings.display_errors) {
      if (node.error === null) {
        node.$el.removeClass('has-error');
      } else {
        var errorMessage = this.translate('errors', node.error[0]);
        errorMessage = Utils.fmt(errorMessage, node.error.slice(1));
        /**
         * Modifies an error message before display
         * @event changer:displayError
         * @memberof QueryBuilder
         * @param {string} errorMessage - the error message (translated and formatted)
         * @param {array} error - the raw error array (error code and optional arguments)
         * @param {Node} node
         * @returns {string}
         */

        errorMessage = this.change('displayError', errorMessage, node.error, node);
        node.$el.addClass('has-error').find(QueryBuilder.selectors.error_container).eq(0).attr('title', errorMessage);
      }
    }
  };
  /**
   * Triggers a validation error event
   * @param {Node} node
   * @param {string|array} error
   * @param {*} value
   * @fires QueryBuilder.validationError
   * @private
   */


  QueryBuilder.prototype.triggerValidationError = function (node, error, value) {
    if (!$.isArray(error)) {
      error = [error];
    }
    /**
     * Fired when a validation error occurred, can be prevented
     * @event validationError
     * @memberof QueryBuilder
     * @param {Node} node
     * @param {string} error
     * @param {*} value
     */


    var e = this.trigger('validationError', node, error, value);

    if (!e.isDefaultPrevented()) {
      node.error = error;
    }
  };
  /**
   * Destroys the builder
   * @fires QueryBuilder.beforeDestroy
   */


  QueryBuilder.prototype.destroy = function () {
    /**
     * Before the {@link QueryBuilder#destroy} method
     * @event beforeDestroy
     * @memberof QueryBuilder
     */
    this.trigger('beforeDestroy');

    if (this.status.generated_id) {
      this.$el.removeAttr('id');
    }

    this.clear();
    this.model = null;
    this.$el.off('.queryBuilder').removeClass('query-builder').removeData('queryBuilder');
    delete this.$el[0].queryBuilder;
  };
  /**
   * Clear all rules and resets the root group
   * @fires QueryBuilder.beforeReset
   * @fires QueryBuilder.afterReset
   */


  QueryBuilder.prototype.reset = function () {
    /**
     * Before the {@link QueryBuilder#reset} method, can be prevented
     * @event beforeReset
     * @memberof QueryBuilder
     */
    var e = this.trigger('beforeReset');

    if (e.isDefaultPrevented()) {
      return;
    }

    this.status.group_id = 1;
    this.status.rule_id = 0;
    this.model.root.empty();
    this.model.root.data = undefined;
    this.model.root.flags = $.extend({}, this.settings.default_group_flags);
    this.model.root.condition = this.settings.default_condition;
    this.addRule(this.model.root);
    /**
     * After the {@link QueryBuilder#reset} method
     * @event afterReset
     * @memberof QueryBuilder
     */

    this.trigger('afterReset');
    this.trigger('rulesChanged');
  };
  /**
   * Clears all rules and removes the root group
   * @fires QueryBuilder.beforeClear
   * @fires QueryBuilder.afterClear
   */


  QueryBuilder.prototype.clear = function () {
    /**
     * Before the {@link QueryBuilder#clear} method, can be prevented
     * @event beforeClear
     * @memberof QueryBuilder
     */
    var e = this.trigger('beforeClear');

    if (e.isDefaultPrevented()) {
      return;
    }

    this.status.group_id = 0;
    this.status.rule_id = 0;

    if (this.model.root) {
      this.model.root.drop();
      this.model.root = null;
    }
    /**
     * After the {@link QueryBuilder#clear} method
     * @event afterClear
     * @memberof QueryBuilder
     */


    this.trigger('afterClear');
    this.trigger('rulesChanged');
  };
  /**
   * Modifies the builder configuration.<br>
   * Only options defined in QueryBuilder.modifiable_options are modifiable
   * @param {object} options
   */


  QueryBuilder.prototype.setOptions = function (options) {
    $.each(options, function (opt, value) {
      if (QueryBuilder.modifiable_options.indexOf(opt) !== -1) {
        this.settings[opt] = value;
      }
    }.bind(this));
  };
  /**
   * Returns the model associated to a DOM object, or the root model
   * @param {jQuery} [target]
   * @returns {Node}
   */


  QueryBuilder.prototype.getModel = function (target) {
    if (!target) {
      return this.model.root;
    } else if (target instanceof Node) {
      return target;
    } else {
      return $(target).data('queryBuilderModel');
    }
  };
  /**
   * Validates the whole builder
   * @param {object} [options]
   * @param {boolean} [options.skip_empty=false] - skips validating rules that have no filter selected
   * @returns {boolean}
   * @fires QueryBuilder.changer:validate
   */


  QueryBuilder.prototype.validate = function (options) {
    options = $.extend({
      skip_empty: false
    }, options);
    this.clearErrors();
    var self = this;

    var valid = function parse(group) {
      var done = 0;
      var errors = 0;
      group.each(function (rule) {
        if (!rule.filter && options.skip_empty) {
          return;
        }

        if (!rule.filter) {
          self.triggerValidationError(rule, 'no_filter', null);
          errors++;
          return;
        }

        if (!rule.operator) {
          self.triggerValidationError(rule, 'no_operator', null);
          errors++;
          return;
        }

        if (rule.operator.nb_inputs !== 0) {
          var valid = self.validateValue(rule, rule.value);

          if (valid !== true) {
            self.triggerValidationError(rule, valid, rule.value);
            errors++;
            return;
          }
        }

        done++;
      }, function (group) {
        var res = parse(group);

        if (res === true) {
          done++;
        } else if (res === false) {
          errors++;
        }
      });

      if (errors > 0) {
        return false;
      } else if (done === 0 && !group.isRoot() && options.skip_empty) {
        return null;
      } else if (done === 0 && (!self.settings.allow_empty || !group.isRoot())) {
        self.triggerValidationError(group, 'empty_group', null);
        return false;
      }

      return true;
    }(this.model.root);
    /**
     * Modifies the result of the {@link QueryBuilder#validate} method
     * @event changer:validate
     * @memberof QueryBuilder
     * @param {boolean} valid
     * @returns {boolean}
     */


    return this.change('validate', valid);
  };
  /**
   * Gets an object representing current rules
   * @param {object} [options]
   * @param {boolean|string} [options.get_flags=false] - export flags, true: only changes from default flags or 'all'
   * @param {boolean} [options.allow_invalid=false] - returns rules even if they are invalid
   * @param {boolean} [options.skip_empty=false] - remove rules that have no filter selected
   * @returns {object}
   * @fires QueryBuilder.changer:ruleToJson
   * @fires QueryBuilder.changer:groupToJson
   * @fires QueryBuilder.changer:getRules
   */


  QueryBuilder.prototype.getRules = function (options) {
    options = $.extend({
      get_flags: false,
      allow_invalid: false,
      skip_empty: false
    }, options);
    var valid = this.validate(options);

    if (!valid && !options.allow_invalid) {
      return null;
    }

    var self = this;

    var out = function parse(group) {
      var groupData = {
        condition: group.condition,
        rules: []
      };

      if (group.data) {
        groupData.data = $.extendext(true, 'replace', {}, group.data);
      }

      if (options.get_flags) {
        var flags = self.getGroupFlags(group.flags, options.get_flags === 'all');

        if (!$.isEmptyObject(flags)) {
          groupData.flags = flags;
        }
      }

      group.each(function (rule) {
        if (!rule.filter && options.skip_empty) {
          return;
        }

        var value = null;

        if (!rule.operator || rule.operator.nb_inputs !== 0) {
          value = rule.value;
        }

        var ruleData = {
          id: rule.filter ? rule.filter.id : null,
          field: rule.filter ? rule.filter.field : null,
          type: rule.filter ? rule.filter.type : null,
          input: rule.filter ? rule.filter.input : null,
          operator: rule.operator ? rule.operator.type : null,
          value: value
        };

        if (rule.filter && rule.filter.data || rule.data) {
          ruleData.data = $.extendext(true, 'replace', {}, rule.filter.data, rule.data);
        }

        if (options.get_flags) {
          var flags = self.getRuleFlags(rule.flags, options.get_flags === 'all');

          if (!$.isEmptyObject(flags)) {
            ruleData.flags = flags;
          }
        }
        /**
         * Modifies the JSON generated from a Rule object
         * @event changer:ruleToJson
         * @memberof QueryBuilder
         * @param {object} json
         * @param {Rule} rule
         * @returns {object}
         */


        groupData.rules.push(self.change('ruleToJson', ruleData, rule));
      }, function (model) {
        var data = parse(model);

        if (data.rules.length !== 0 || !options.skip_empty) {
          groupData.rules.push(data);
        }
      }, this);
      /**
       * Modifies the JSON generated from a Group object
       * @event changer:groupToJson
       * @memberof QueryBuilder
       * @param {object} json
       * @param {Group} group
       * @returns {object}
       */

      return self.change('groupToJson', groupData, group);
    }(this.model.root);

    out.valid = valid;
    /**
     * Modifies the result of the {@link QueryBuilder#getRules} method
     * @event changer:getRules
     * @memberof QueryBuilder
     * @param {object} json
     * @returns {object}
     */

    return this.change('getRules', out);
  };
  /**
   * Sets rules from object
   * @param {object} data
   * @param {object} [options]
   * @param {boolean} [options.allow_invalid=false] - silent-fail if the data are invalid
   * @throws RulesError, UndefinedConditionError
   * @fires QueryBuilder.changer:setRules
   * @fires QueryBuilder.changer:jsonToRule
   * @fires QueryBuilder.changer:jsonToGroup
   * @fires QueryBuilder.afterSetRules
   */


  QueryBuilder.prototype.setRules = function (data, options) {
    options = $.extend({
      allow_invalid: false
    }, options);

    if ($.isArray(data)) {
      data = {
        condition: this.settings.default_condition,
        rules: data
      };
    }

    if (!data || !data.rules || data.rules.length === 0 && !this.settings.allow_empty) {
      Utils.error('RulesParse', 'Incorrect data object passed');
    }

    this.clear();
    this.setRoot(false, data.data, this.parseGroupFlags(data));
    /**
     * Modifies data before the {@link QueryBuilder#setRules} method
     * @event changer:setRules
     * @memberof QueryBuilder
     * @param {object} json
     * @param {object} options
     * @returns {object}
     */

    data = this.change('setRules', data, options);
    var self = this;

    (function add(data, group) {
      if (group === null) {
        return;
      }

      if (data.condition === undefined) {
        data.condition = self.settings.default_condition;
      } else if (self.settings.conditions.indexOf(data.condition) == -1) {
        Utils.error(!options.allow_invalid, 'UndefinedCondition', 'Invalid condition "{0}"', data.condition);
        data.condition = self.settings.default_condition;
      }

      group.condition = data.condition;
      data.rules.forEach(function (item) {
        var model;

        if (item.rules !== undefined) {
          if (self.settings.allow_groups !== -1 && self.settings.allow_groups < group.level) {
            Utils.error(!options.allow_invalid, 'RulesParse', 'No more than {0} groups are allowed', self.settings.allow_groups);
            self.reset();
          } else {
            model = self.addGroup(group, false, item.data, self.parseGroupFlags(item));

            if (model === null) {
              return;
            }

            add(item, model);
          }
        } else {
          if (!item.empty) {
            if (item.id === undefined) {
              Utils.error(!options.allow_invalid, 'RulesParse', 'Missing rule field id');
              item.empty = true;
            }

            if (item.operator === undefined) {
              item.operator = 'equal';
            }
          }

          model = self.addRule(group, item.data, self.parseRuleFlags(item));

          if (model === null) {
            return;
          }

          if (!item.empty) {
            model.filter = self.getFilterById(item.id, !options.allow_invalid);
          }

          if (model.filter) {
            model.operator = self.getOperatorByType(item.operator, !options.allow_invalid);

            if (!model.operator) {
              model.operator = self.getOperators(model.filter)[0];
            }
          }

          if (model.operator && model.operator.nb_inputs !== 0) {
            if (item.value !== undefined) {
              model.value = item.value;
            } else if (model.filter.default_value !== undefined) {
              model.value = model.filter.default_value;
            }
          }
          /**
           * Modifies the Rule object generated from the JSON
           * @event changer:jsonToRule
           * @memberof QueryBuilder
           * @param {Rule} rule
           * @param {object} json
           * @returns {Rule} the same rule
           */


          if (self.change('jsonToRule', model, item) != model) {
            Utils.error('RulesParse', 'Plugin tried to change rule reference');
          }
        }
      });
      /**
       * Modifies the Group object generated from the JSON
       * @event changer:jsonToGroup
       * @memberof QueryBuilder
       * @param {Group} group
       * @param {object} json
       * @returns {Group} the same group
       */

      if (self.change('jsonToGroup', group, data) != group) {
        Utils.error('RulesParse', 'Plugin tried to change group reference');
      }
    })(data, this.model.root);
    /**
     * After the {@link QueryBuilder#setRules} method
     * @event afterSetRules
     * @memberof QueryBuilder
     */


    this.trigger('afterSetRules');
  };
  /**
   * Performs value validation
   * @param {Rule} rule
   * @param {string|string[]} value
   * @returns {array|boolean} true or error array
   * @fires QueryBuilder.changer:validateValue
   */


  QueryBuilder.prototype.validateValue = function (rule, value) {
    var validation = rule.filter.validation || {};
    var result = true;

    if (validation.callback) {
      result = validation.callback.call(this, value, rule);
    } else {
      result = this._validateValue(rule, value);
    }
    /**
     * Modifies the result of the rule validation method
     * @event changer:validateValue
     * @memberof QueryBuilder
     * @param {array|boolean} result - true or an error array
     * @param {*} value
     * @param {Rule} rule
     * @returns {array|boolean}
     */


    return this.change('validateValue', result, value, rule);
  };
  /**
   * Default validation function
   * @param {Rule} rule
   * @param {string|string[]} value
   * @returns {array|boolean} true or error array
   * @throws ConfigError
   * @private
   */


  QueryBuilder.prototype._validateValue = function (rule, value) {
    var filter = rule.filter;
    var operator = rule.operator;
    var validation = filter.validation || {};
    var result = true;
    var tmp, tempValue;

    if (rule.operator.nb_inputs === 1) {
      value = [value];
    }

    for (var i = 0; i < operator.nb_inputs; i++) {
      if (!operator.multiple && $.isArray(value[i]) && value[i].length > 1) {
        result = ['operator_not_multiple', operator.type, this.translate('operators', operator.type)];
        break;
      }

      switch (filter.input) {
        case 'radio':
          if (value[i] === undefined || value[i].length === 0) {
            if (!validation.allow_empty_value) {
              result = ['radio_empty'];
            }

            break;
          }

          break;

        case 'checkbox':
          if (value[i] === undefined || value[i].length === 0) {
            if (!validation.allow_empty_value) {
              result = ['checkbox_empty'];
            }

            break;
          }

          break;

        case 'select':
          if (value[i] === undefined || value[i].length === 0 || filter.placeholder && value[i] == filter.placeholder_value) {
            if (!validation.allow_empty_value) {
              result = ['select_empty'];
            }

            break;
          }

          break;

        default:
          tempValue = $.isArray(value[i]) ? value[i] : [value[i]];

          for (var j = 0; j < tempValue.length; j++) {
            switch (QueryBuilder.types[filter.type]) {
              case 'string':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['string_empty'];
                  }

                  break;
                }

                if (validation.min !== undefined) {
                  if (tempValue[j].length < parseInt(validation.min)) {
                    result = [this.getValidationMessage(validation, 'min', 'string_exceed_min_length'), validation.min];
                    break;
                  }
                }

                if (validation.max !== undefined) {
                  if (tempValue[j].length > parseInt(validation.max)) {
                    result = [this.getValidationMessage(validation, 'max', 'string_exceed_max_length'), validation.max];
                    break;
                  }
                }

                if (validation.format) {
                  if (typeof validation.format == 'string') {
                    validation.format = new RegExp(validation.format);
                  }

                  if (!validation.format.test(tempValue[j])) {
                    result = [this.getValidationMessage(validation, 'format', 'string_invalid_format'), validation.format];
                    break;
                  }
                }

                break;

              case 'number':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['number_nan'];
                  }

                  break;
                }

                if (isNaN(tempValue[j])) {
                  result = ['number_nan'];
                  break;
                }

                if (filter.type == 'integer') {
                  if (parseInt(tempValue[j]) != tempValue[j]) {
                    result = ['number_not_integer'];
                    break;
                  }
                } else {
                  if (parseFloat(tempValue[j]) != tempValue[j]) {
                    result = ['number_not_double'];
                    break;
                  }
                }

                if (validation.min !== undefined) {
                  if (tempValue[j] < parseFloat(validation.min)) {
                    result = [this.getValidationMessage(validation, 'min', 'number_exceed_min'), validation.min];
                    break;
                  }
                }

                if (validation.max !== undefined) {
                  if (tempValue[j] > parseFloat(validation.max)) {
                    result = [this.getValidationMessage(validation, 'max', 'number_exceed_max'), validation.max];
                    break;
                  }
                }

                if (validation.step !== undefined && validation.step !== 'any') {
                  var v = (tempValue[j] / validation.step).toPrecision(14);

                  if (parseInt(v) != v) {
                    result = [this.getValidationMessage(validation, 'step', 'number_wrong_step'), validation.step];
                    break;
                  }
                }

                break;

              case 'datetime':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['datetime_empty'];
                  }

                  break;
                } // we need MomentJS


                if (validation.format) {
                  if (!('moment' in window)) {
                    Utils.error('MissingLibrary', 'MomentJS is required for Date/Time validation. Get it here http://momentjs.com');
                  }

                  var datetime = moment(tempValue[j], validation.format);

                  if (!datetime.isValid()) {
                    result = [this.getValidationMessage(validation, 'format', 'datetime_invalid'), validation.format];
                    break;
                  } else {
                    if (validation.min) {
                      if (datetime < moment(validation.min, validation.format)) {
                        result = [this.getValidationMessage(validation, 'min', 'datetime_exceed_min'), validation.min];
                        break;
                      }
                    }

                    if (validation.max) {
                      if (datetime > moment(validation.max, validation.format)) {
                        result = [this.getValidationMessage(validation, 'max', 'datetime_exceed_max'), validation.max];
                        break;
                      }
                    }
                  }
                }

                break;

              case 'boolean':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['boolean_not_valid'];
                  }

                  break;
                }

                tmp = ('' + tempValue[j]).trim().toLowerCase();

                if (tmp !== 'true' && tmp !== 'false' && tmp !== '1' && tmp !== '0' && tempValue[j] !== 1 && tempValue[j] !== 0) {
                  result = ['boolean_not_valid'];
                  break;
                }

            }

            if (result !== true) {
              break;
            }
          }

      }

      if (result !== true) {
        break;
      }
    }

    if ((rule.operator.type === 'between' || rule.operator.type === 'not_between') && value.length === 2) {
      switch (QueryBuilder.types[filter.type]) {
        case 'number':
          if (value[0] > value[1]) {
            result = ['number_between_invalid', value[0], value[1]];
          }

          break;

        case 'datetime':
          // we need MomentJS
          if (validation.format) {
            if (!('moment' in window)) {
              Utils.error('MissingLibrary', 'MomentJS is required for Date/Time validation. Get it here http://momentjs.com');
            }

            if (moment(value[0], validation.format).isAfter(moment(value[1], validation.format))) {
              result = ['datetime_between_invalid', value[0], value[1]];
            }
          }

          break;
      }
    }

    return result;
  };
  /**
   * Returns an incremented group ID
   * @returns {string}
   * @private
   */


  QueryBuilder.prototype.nextGroupId = function () {
    return this.status.id + '_group_' + this.status.group_id++;
  };
  /**
   * Returns an incremented rule ID
   * @returns {string}
   * @private
   */


  QueryBuilder.prototype.nextRuleId = function () {
    return this.status.id + '_rule_' + this.status.rule_id++;
  };
  /**
   * Returns the operators for a filter
   * @param {string|object} filter - filter id or filter object
   * @returns {object[]}
   * @fires QueryBuilder.changer:getOperators
   */


  QueryBuilder.prototype.getOperators = function (filter) {
    if (typeof filter == 'string') {
      filter = this.getFilterById(filter);
    }

    var result = [];

    for (var i = 0, l = this.operators.length; i < l; i++) {
      // filter operators check
      if (filter.operators) {
        if (filter.operators.indexOf(this.operators[i].type) == -1) {
          continue;
        }
      } // type check
      else if (this.operators[i].apply_to.indexOf(QueryBuilder.types[filter.type]) == -1) {
          continue;
        }

      result.push(this.operators[i]);
    } // keep sort order defined for the filter


    if (filter.operators) {
      result.sort(function (a, b) {
        return filter.operators.indexOf(a.type) - filter.operators.indexOf(b.type);
      });
    }
    /**
     * Modifies the operators available for a filter
     * @event changer:getOperators
     * @memberof QueryBuilder
     * @param {QueryBuilder.Operator[]} operators
     * @param {QueryBuilder.Filter} filter
     * @returns {QueryBuilder.Operator[]}
     */


    return this.change('getOperators', result, filter);
  };
  /**
   * Returns a particular filter by its id
   * @param {string} id
   * @param {boolean} [doThrow=true]
   * @returns {object|null}
   * @throws UndefinedFilterError
   */


  QueryBuilder.prototype.getFilterById = function (id, doThrow) {
    if (id == '-1') {
      return null;
    }

    for (var i = 0, l = this.filters.length; i < l; i++) {
      if (this.filters[i].id == id) {
        return this.filters[i];
      }
    }

    Utils.error(doThrow !== false, 'UndefinedFilter', 'Undefined filter "{0}"', id);
    return null;
  };
  /**
   * Returns a particular operator by its type
   * @param {string} type
   * @param {boolean} [doThrow=true]
   * @returns {object|null}
   * @throws UndefinedOperatorError
   */


  QueryBuilder.prototype.getOperatorByType = function (type, doThrow) {
    if (type == '-1') {
      return null;
    }

    for (var i = 0, l = this.operators.length; i < l; i++) {
      if (this.operators[i].type == type) {
        return this.operators[i];
      }
    }

    Utils.error(doThrow !== false, 'UndefinedOperator', 'Undefined operator "{0}"', type);
    return null;
  };
  /**
   * Returns rule's current input value
   * @param {Rule} rule
   * @returns {*}
   * @fires QueryBuilder.changer:getRuleValue
   * @private
   */


  QueryBuilder.prototype.getRuleInputValue = function (rule) {
    var filter = rule.filter;
    var operator = rule.operator;
    var value = [];

    if (filter.valueGetter) {
      value = filter.valueGetter.call(this, rule);
    } else {
      var $value = rule.$el.find(QueryBuilder.selectors.value_container);

      for (var i = 0; i < operator.nb_inputs; i++) {
        var name = Utils.escapeElementId(rule.id + '_value_' + i);
        var tmp;

        switch (filter.input) {
          case 'radio':
            value.push($value.find('[name=' + name + ']:checked').val());
            break;

          case 'checkbox':
            tmp = []; // jshint loopfunc:true

            $value.find('[name=' + name + ']:checked').each(function () {
              tmp.push($(this).val());
            }); // jshint loopfunc:false

            value.push(tmp);
            break;

          case 'select':
            if (filter.multiple) {
              tmp = []; // jshint loopfunc:true

              $value.find('[name=' + name + '] option:selected').each(function () {
                tmp.push($(this).val());
              }); // jshint loopfunc:false

              value.push(tmp);
            } else {
              value.push($value.find('[name=' + name + '] option:selected').val());
            }

            break;

          default:
            value.push($value.find('[name=' + name + ']').val());
        }
      }

      value = value.map(function (val) {
        if (operator.multiple && filter.value_separator && typeof val == 'string') {
          val = val.split(filter.value_separator);
        }

        if ($.isArray(val)) {
          return val.map(function (subval) {
            return Utils.changeType(subval, filter.type);
          });
        } else {
          return Utils.changeType(val, filter.type);
        }
      });

      if (operator.nb_inputs === 1) {
        value = value[0];
      } // @deprecated


      if (filter.valueParser) {
        value = filter.valueParser.call(this, rule, value);
      }
    }
    /**
     * Modifies the rule's value grabbed from the DOM
     * @event changer:getRuleValue
     * @memberof QueryBuilder
     * @param {*} value
     * @param {Rule} rule
     * @returns {*}
     */


    return this.change('getRuleValue', value, rule);
  };
  /**
   * Sets the value of a rule's input
   * @param {Rule} rule
   * @param {*} value
   * @private
   */


  QueryBuilder.prototype.setRuleInputValue = function (rule, value) {
    var filter = rule.filter;
    var operator = rule.operator;

    if (!filter || !operator) {
      return;
    }

    rule._updating_input = true;

    if (filter.valueSetter) {
      filter.valueSetter.call(this, rule, value);
    } else {
      var $value = rule.$el.find(QueryBuilder.selectors.value_container);

      if (operator.nb_inputs == 1) {
        value = [value];
      }

      for (var i = 0; i < operator.nb_inputs; i++) {
        var name = Utils.escapeElementId(rule.id + '_value_' + i);

        switch (filter.input) {
          case 'radio':
            $value.find('[name=' + name + '][value="' + value[i] + '"]').prop('checked', true).trigger('change');
            break;

          case 'checkbox':
            if (!$.isArray(value[i])) {
              value[i] = [value[i]];
            } // jshint loopfunc:true


            value[i].forEach(function (value) {
              $value.find('[name=' + name + '][value="' + value + '"]').prop('checked', true).trigger('change');
            }); // jshint loopfunc:false

            break;

          default:
            if (operator.multiple && filter.value_separator && $.isArray(value[i])) {
              value[i] = value[i].join(filter.value_separator);
            }

            $value.find('[name=' + name + ']').val(value[i]).trigger('change');
            break;
        }
      }
    }

    rule._updating_input = false;
  };
  /**
   * Parses rule flags
   * @param {object} rule
   * @returns {object}
   * @fires QueryBuilder.changer:parseRuleFlags
   * @private
   */


  QueryBuilder.prototype.parseRuleFlags = function (rule) {
    var flags = $.extend({}, this.settings.default_rule_flags);

    if (rule.readonly) {
      $.extend(flags, {
        filter_readonly: true,
        operator_readonly: true,
        value_readonly: true,
        no_delete: true
      });
    }

    if (rule.flags) {
      $.extend(flags, rule.flags);
    }
    /**
     * Modifies the consolidated rule's flags
     * @event changer:parseRuleFlags
     * @memberof QueryBuilder
     * @param {object} flags
     * @param {object} rule - <b>not</b> a Rule object
     * @returns {object}
     */


    return this.change('parseRuleFlags', flags, rule);
  };
  /**
   * Gets a copy of flags of a rule
   * @param {object} flags
   * @param {boolean} [all=false] - return all flags or only changes from default flags
   * @returns {object}
   * @private
   */


  QueryBuilder.prototype.getRuleFlags = function (flags, all) {
    if (all) {
      return $.extend({}, flags);
    } else {
      var ret = {};
      $.each(this.settings.default_rule_flags, function (key, value) {
        if (flags[key] !== value) {
          ret[key] = flags[key];
        }
      });
      return ret;
    }
  };
  /**
   * Parses group flags
   * @param {object} group
   * @returns {object}
   * @fires QueryBuilder.changer:parseGroupFlags
   * @private
   */


  QueryBuilder.prototype.parseGroupFlags = function (group) {
    var flags = $.extend({}, this.settings.default_group_flags);

    if (group.readonly) {
      $.extend(flags, {
        condition_readonly: true,
        no_add_rule: true,
        no_add_group: true,
        no_delete: true
      });
    }

    if (group.flags) {
      $.extend(flags, group.flags);
    }
    /**
     * Modifies the consolidated group's flags
     * @event changer:parseGroupFlags
     * @memberof QueryBuilder
     * @param {object} flags
     * @param {object} group - <b>not</b> a Group object
     * @returns {object}
     */


    return this.change('parseGroupFlags', flags, group);
  };
  /**
   * Gets a copy of flags of a group
   * @param {object} flags
   * @param {boolean} [all=false] - return all flags or only changes from default flags
   * @returns {object}
   * @private
   */


  QueryBuilder.prototype.getGroupFlags = function (flags, all) {
    if (all) {
      return $.extend({}, flags);
    } else {
      var ret = {};
      $.each(this.settings.default_group_flags, function (key, value) {
        if (flags[key] !== value) {
          ret[key] = flags[key];
        }
      });
      return ret;
    }
  };
  /**
   * Translate a label either by looking in the `lang` object or in itself if it's an object where keys are language codes
   * @param {string} [category]
   * @param {string|object} key
   * @returns {string}
   * @fires QueryBuilder.changer:translate
   */


  QueryBuilder.prototype.translate = function (category, key) {
    if (!key) {
      key = category;
      category = undefined;
    }

    var translation;

    if (typeof key === 'object') {
      translation = key[this.settings.lang_code] || key['en'];
    } else {
      translation = (category ? this.lang[category] : this.lang)[key] || key;
    }
    /**
     * Modifies the translated label
     * @event changer:translate
     * @memberof QueryBuilder
     * @param {string} translation
     * @param {string|object} key
     * @param {string} [category]
     * @returns {string}
     */


    return this.change('translate', translation, key, category);
  };
  /**
   * Returns a validation message
   * @param {object} validation
   * @param {string} type
   * @param {string} def
   * @returns {string}
   * @private
   */


  QueryBuilder.prototype.getValidationMessage = function (validation, type, def) {
    return validation.messages && validation.messages[type] || def;
  };

  QueryBuilder.templates.group = '\
<div id="{{= it.group_id }}" class="rules-group-container"> \
  <div class="rules-group-header"> \
    <div class="btn-group pull-right group-actions"> \
      <button type="button" class="btn btn-xs btn-success" data-add="rule"> \
        <i class="{{= it.icons.add_rule }}"></i> {{= it.translate("add_rule") }} \
      </button> \
      {{? it.settings.allow_groups===-1 || it.settings.allow_groups>=it.level }} \
        <button type="button" class="btn btn-xs btn-success" data-add="group"> \
          <i class="{{= it.icons.add_group }}"></i> {{= it.translate("add_group") }} \
        </button> \
      {{?}} \
      {{? it.level>1 }} \
        <button type="button" class="btn btn-xs btn-danger" data-delete="group"> \
          <i class="{{= it.icons.remove_group }}"></i> {{= it.translate("delete_group") }} \
        </button> \
      {{?}} \
    </div> \
    <div class="btn-group group-conditions"> \
      {{~ it.conditions: condition }} \
        <label class="btn btn-xs btn-primary"> \
          <input type="radio" name="{{= it.group_id }}_cond" value="{{= condition }}"> {{= it.translate("conditions", condition) }} \
        </label> \
      {{~}} \
    </div> \
    {{? it.settings.display_errors }} \
      <div class="error-container"><i class="{{= it.icons.error }}"></i></div> \
    {{?}} \
  </div> \
  <div class=rules-group-body> \
    <div class=rules-list></div> \
  </div> \
</div>';
  QueryBuilder.templates.rule = '\
<div id="{{= it.rule_id }}" class="rule-container"> \
  <div class="rule-header"> \
    <div class="btn-group pull-right rule-actions"> \
      <button type="button" class="btn btn-xs btn-danger" data-delete="rule"> \
        <i class="{{= it.icons.remove_rule }}"></i> {{= it.translate("delete_rule") }} \
      </button> \
    </div> \
  </div> \
  {{? it.settings.display_errors }} \
    <div class="error-container"><i class="{{= it.icons.error }}"></i></div> \
  {{?}} \
  <div class="rule-filter-container"></div> \
  <div class="rule-operator-container"></div> \
  <div class="rule-value-container"></div> \
</div>'; // Edited: Added data-tokens property in option tag

  QueryBuilder.templates.filterSelect = '\
{{ var optgroup = null; }} \
<select class="form-control" name="{{= it.rule.id }}_filter"> \
  {{? it.settings.display_empty_filter }} \
    <option value="-1">{{= it.settings.select_placeholder }}</option> \
  {{?}} \
  {{~ it.filters: filter }} \
    {{? optgroup !== filter.optgroup }} \
      {{? optgroup !== null }}</optgroup>{{?}} \
      {{? (optgroup = filter.optgroup) !== null }} \
        <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}"> \
      {{?}} \
	{{?}} \
    <option {{= filter.searchable}} entity-name={{= filter.optgroup}} value-attribute={{= filter.valueAttribute}} title="{{= it.translate(it.settings.optgroups[optgroup]) }} | {{= it.translate(filter.label) }}" data-tokens="{{= it.translate(it.settings.optgroups[optgroup]) }}" value="{{= filter.id }}" {{? filter.icon}}data-icon="{{= filter.icon}}"{{?}}>{{= it.translate(filter.label) }}</option> \
  {{~}} \
  {{? optgroup !== null }}</optgroup>{{?}} \
</select>';
  QueryBuilder.templates.operatorSelect = '\
{{? it.operators.length === 1 }} \
<span> \
{{= it.translate("operators", it.operators[0].type) }} \
</span> \
{{?}} \
{{ var optgroup = null; }} \
<select class="form-control {{? it.operators.length === 1 }}hide{{?}}" name="{{= it.rule.id }}_operator"> \
  {{~ it.operators: operator }} \
    {{? optgroup !== operator.optgroup }} \
      {{? optgroup !== null }}</optgroup>{{?}} \
      {{? (optgroup = operator.optgroup) !== null }} \
        <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}"> \
      {{?}} \
    {{?}} \
    <option value="{{= operator.type }}" {{? operator.icon}}data-icon="{{= operator.icon}}"{{?}}>{{= it.translate("operators", operator.type) }}</option> \
  {{~}} \
  {{? optgroup !== null }}</optgroup>{{?}} \
</select>';
  QueryBuilder.templates.ruleValueSelect = '\
{{ var optgroup = null; }} \
<select class="form-control" name="{{= it.name }}" {{? it.rule.filter.multiple }}multiple{{?}}> \
  {{? it.rule.filter.placeholder }} \
    <option value="{{= it.rule.filter.placeholder_value }}" disabled selected>{{= it.rule.filter.placeholder }}</option> \
  {{?}} \
  {{~ it.rule.filter.values: entry }} \
    {{? optgroup !== entry.optgroup }} \
      {{? optgroup !== null }}</optgroup>{{?}} \
      {{? (optgroup = entry.optgroup) !== null }} \
        <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}"> \
      {{?}} \
    {{?}} \
    <option value="{{= entry.value }}">{{= entry.label }}</option> \
  {{~}} \
  {{? optgroup !== null }}</optgroup>{{?}} \
</select>';
  /**
   * Returns group's HTML
   * @param {string} group_id
   * @param {int} level
   * @returns {string}
   * @fires QueryBuilder.changer:getGroupTemplate
   * @private
   */

  QueryBuilder.prototype.getGroupTemplate = function (group_id, level) {
    var h = this.templates.group({
      builder: this,
      group_id: group_id,
      level: level,
      conditions: this.settings.conditions,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of a group
     * @event changer:getGroupTemplate
     * @memberof QueryBuilder
     * @param {string} html
     * @param {int} level
     * @returns {string}
     */

    return this.change('getGroupTemplate', h, level);
  };
  /**
   * Returns rule's HTML
   * @param {string} rule_id
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleTemplate
   * @private
   */


  QueryBuilder.prototype.getRuleTemplate = function (rule_id) {
    var h = this.templates.rule({
      builder: this,
      rule_id: rule_id,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of a rule
     * @event changer:getRuleTemplate
     * @memberof QueryBuilder
     * @param {string} html
     * @returns {string}
     */

    return this.change('getRuleTemplate', h);
  };
  /**
   * Returns rule's filter HTML
   * @param {Rule} rule
   * @param {object[]} filters
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleFilterTemplate
   * @private
   */


  QueryBuilder.prototype.getRuleFilterSelect = function (rule, filters) {
    var h = this.templates.filterSelect({
      builder: this,
      rule: rule,
      filters: filters,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of the rule's filter dropdown
     * @event changer:getRuleFilterSelect
     * @memberof QueryBuilder
     * @param {string} html
     * @param {Rule} rule
     * @param {QueryBuilder.Filter[]} filters
     * @returns {string}
     */

    return this.change('getRuleFilterSelect', h, rule, filters);
  };
  /**
   * Returns rule's operator HTML
   * @param {Rule} rule
   * @param {object[]} operators
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleOperatorTemplate
   * @private
   */


  QueryBuilder.prototype.getRuleOperatorSelect = function (rule, operators) {
    var h = this.templates.operatorSelect({
      builder: this,
      rule: rule,
      operators: operators,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of the rule's operator dropdown
     * @event changer:getRuleOperatorSelect
     * @memberof QueryBuilder
     * @param {string} html
     * @param {Rule} rule
     * @param {QueryBuilder.Operator[]} operators
     * @returns {string}
     */

    return this.change('getRuleOperatorSelect', h, rule, operators);
  };
  /**
   * Returns the rule's value select HTML
   * @param {string} name
   * @param {Rule} rule
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleValueSelect
   * @private
   */


  QueryBuilder.prototype.getRuleValueSelect = function (name, rule) {
    var h = this.templates.ruleValueSelect({
      builder: this,
      name: name,
      rule: rule,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of the rule's value dropdown (in case of a "select filter)
     * @event changer:getRuleValueSelect
     * @memberof QueryBuilder
     * @param {string} html
     * @param [string} name
     * @param {Rule} rule
     * @returns {string}
     */

    return this.change('getRuleValueSelect', h, name, rule);
  };
  /**
   * Returns the rule's value HTML
   * @param {Rule} rule
   * @param {int} value_id
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleInput
   * @private
   */


  QueryBuilder.prototype.getRuleInput = function (rule, value_id) {
    var filter = rule.filter;
    var validation = rule.filter.validation || {};
    var name = rule.id + '_value_' + value_id;
    var c = filter.vertical ? ' class=block' : '';
    var h = '';
    var placeholder = Array.isArray(filter.placeholder) ? filter.placeholder[value_id] : filter.placeholder;

    if (typeof filter.input == 'function') {
      h = filter.input.call(this, rule, name);
    } else {
      switch (filter.input) {
        case 'radio':
        case 'checkbox':
          Utils.iterateOptions(filter.values, function (key, val) {
            h += '<label' + c + '><input type="' + filter.input + '" name="' + name + '" value="' + key + '"> ' + val + '</label> ';
          });
          break;

        case 'select':
          h = this.getRuleValueSelect(name, rule);
          break;

        case 'textarea':
          h += '<textarea class="form-control" name="' + name + '"';
          if (filter.size) h += ' cols="' + filter.size + '"';
          if (filter.rows) h += ' rows="' + filter.rows + '"';
          if (validation.min !== undefined) h += ' minlength="' + validation.min + '"';
          if (validation.max !== undefined) h += ' maxlength="' + validation.max + '"';
          if (placeholder) h += ' placeholder="' + placeholder + '"';
          h += '></textarea>';
          break;

        case 'number':
          h += '<input class="form-control" type="number" name="' + name + '"';
          if (validation.step !== undefined) h += ' step="' + validation.step + '"';
          if (validation.min !== undefined) h += ' min="' + validation.min + '"';
          if (validation.max !== undefined) h += ' max="' + validation.max + '"';
          if (placeholder) h += ' placeholder="' + placeholder + '"';
          if (filter.size) h += ' size="' + filter.size + '"';
          h += '>';
          break;

        default:
          h += '<input class="form-control" type="text" name="' + name + '"';
          if (placeholder) h += ' placeholder="' + placeholder + '"';
          if (filter.type === 'string' && validation.min !== undefined) h += ' minlength="' + validation.min + '"';
          if (filter.type === 'string' && validation.max !== undefined) h += ' maxlength="' + validation.max + '"';
          if (filter.size) h += ' size="' + filter.size + '"';
          h += '>';
      }
    }
    /**
     * Modifies the raw HTML of the rule's input
     * @event changer:getRuleInput
     * @memberof QueryBuilder
     * @param {string} html
     * @param {Rule} rule
     * @param {string} name - the name that the input must have
     * @returns {string}
     */


    return this.change('getRuleInput', h, rule, name);
  };
  /**
   * @namespace
   */


  var Utils = {};
  /**
   * @member {object}
   * @memberof QueryBuilder
   * @see Utils
   */

  QueryBuilder.utils = Utils;
  /**
   * @callback Utils#OptionsIteratee
   * @param {string} key
   * @param {string} value
   * @param {string} [optgroup]
   */

  /**
   * Iterates over radio/checkbox/selection options, it accept four formats
   *
   * @example
   * // array of values
   * options = ['one', 'two', 'three']
   * @example
   * // simple key-value map
   * options = {1: 'one', 2: 'two', 3: 'three'}
   * @example
   * // array of 1-element maps
   * options = [{1: 'one'}, {2: 'two'}, {3: 'three'}]
   * @example
   * // array of elements
   * options = [{value: 1, label: 'one', optgroup: 'group'}, {value: 2, label: 'two'}]
   *
   * @param {object|array} options
   * @param {Utils#OptionsIteratee} tpl
   */

  Utils.iterateOptions = function (options, tpl) {
    if (options) {
      if ($.isArray(options)) {
        options.forEach(function (entry) {
          if ($.isPlainObject(entry)) {
            // array of elements
            if ('value' in entry) {
              tpl(entry.value, entry.label || entry.value, entry.optgroup);
            } // array of one-element maps
            else {
                $.each(entry, function (key, val) {
                  tpl(key, val);
                  return false; // break after first entry
                });
              }
          } // array of values
          else {
              tpl(entry, entry);
            }
        });
      } // unordered map
      else {
          $.each(options, function (key, val) {
            tpl(key, val);
          });
        }
    }
  };
  /**
   * Replaces {0}, {1}, ... in a string
   * @param {string} str
   * @param {...*} args
   * @returns {string}
   */


  Utils.fmt = function (str, args) {
    if (!Array.isArray(args)) {
      args = Array.prototype.slice.call(arguments, 1);
    }

    console.log('str');
    console.log(str);
    console.log('args');
    console.log(args);
    return str.replace(/{([0-9]+)}/g, function (m, i) {
      return args[parseInt(i)];
    });
  };
  /**
   * Throws an Error object with custom name or logs an error
   * @param {boolean} [doThrow=true]
   * @param {string} type
   * @param {string} message
   * @param {...*} args
   */


  Utils.error = function () {
    var i = 0;
    var doThrow = typeof arguments[i] === 'boolean' ? arguments[i++] : true;
    var type = arguments[i++];
    var message = arguments[i++];
    var args = Array.isArray(arguments[i]) ? arguments[i] : Array.prototype.slice.call(arguments, i);

    if (doThrow) {
      var err = new Error(Utils.fmt(message, args));
      err.name = type + 'Error';
      err.args = args;
      throw err;
    } else {
      console.error(type + 'Error: ' + Utils.fmt(message, args));
    }
  };
  /**
   * Changes the type of a value to int, float or bool
   * @param {*} value
   * @param {string} type - 'integer', 'double', 'boolean' or anything else (passthrough)
   * @returns {*}
   */


  Utils.changeType = function (value, type) {
    if (value === '' || value === undefined) {
      return undefined;
    }

    switch (type) {
      // @formatter:off
      case 'integer':
        if (typeof value === 'string' && !/^-?\d+$/.test(value)) {
          return value;
        }

        return parseInt(value);

      case 'double':
        if (typeof value === 'string' && !/^-?\d+\.?\d*$/.test(value)) {
          return value;
        }

        return parseFloat(value);

      case 'boolean':
        if (typeof value === 'string' && !/^(0|1|true|false){1}$/i.test(value)) {
          return value;
        }

        return value === true || value === 1 || value.toLowerCase() === 'true' || value === '1';

      default:
        return value;
      // @formatter:on
    }
  };
  /**
   * Escapes a string like PHP's mysql_real_escape_string does
   * @param {string} value
   * @returns {string}
   */


  Utils.escapeString = function (value) {
    if (typeof value != 'string') {
      return value;
    }

    return value.replace(/[\0\n\r\b\\\'\"]/g, function (s) {
      switch (s) {
        // @formatter:off
        case '\0':
          return '\\0';

        case '\n':
          return '\\n';

        case '\r':
          return '\\r';

        case '\b':
          return '\\b';

        default:
          return '\\' + s;
        // @formatter:off
      }
    }) // uglify compliant
    .replace(/\t/g, '\\t').replace(/\x1a/g, '\\Z');
  };
  /**
   * Escapes a string for use in regex
   * @param {string} str
   * @returns {string}
   */


  Utils.escapeRegExp = function (str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  };
  /**
   * Escapes a string for use in HTML element id
   * @param {string} str
   * @returns {string}
   */


  Utils.escapeElementId = function (str) {
    // Regex based on that suggested by:
    // https://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/
    // - escapes : . [ ] ,
    // - avoids escaping already escaped values
    return str ? str.replace(/(\\)?([:.\[\],])/g, function ($0, $1, $2) {
      return $1 ? $0 : '\\' + $2;
    }) : str;
  };
  /**
   * Sorts objects by grouping them by `key`, preserving initial order when possible
   * @param {object[]} items
   * @param {string} key
   * @returns {object[]}
   */


  Utils.groupSort = function (items, key) {
    var optgroups = [];
    var newItems = [];
    items.forEach(function (item) {
      var idx;

      if (item[key]) {
        idx = optgroups.lastIndexOf(item[key]);

        if (idx == -1) {
          idx = optgroups.length;
        } else {
          idx++;
        }
      } else {
        idx = optgroups.length;
      }

      optgroups.splice(idx, 0, item[key]);
      newItems.splice(idx, 0, item);
    });
    return newItems;
  };
  /**
   * Defines properties on an Node prototype with getter and setter.<br>
   *     Update events are emitted in the setter through root Model (if any).<br>
   *     The object must have a `__` object, non enumerable property to store values.
   * @param {function} obj
   * @param {string[]} fields
   */


  Utils.defineModelProperties = function (obj, fields) {
    fields.forEach(function (field) {
      Object.defineProperty(obj.prototype, field, {
        enumerable: true,
        get: function () {
          return this.__[field];
        },
        set: function (value) {
          var previousValue = this.__[field] !== null && typeof this.__[field] == 'object' ? $.extend({}, this.__[field]) : this.__[field];
          this.__[field] = value;

          if (this.model !== null) {
            /**
             * After a value of the model changed
             * @event model:update
             * @memberof Model
             * @param {Node} node
             * @param {string} field
             * @param {*} value
             * @param {*} previousValue
             */
            this.model.trigger('update', this, field, value, previousValue);
          }
        }
      });
    });
  };
  /**
   * Main object storing data model and emitting model events
   * @constructor
   */


  function Model() {
    /**
     * @member {Group}
     * @readonly
     */
    this.root = null;
    /**
     * Base for event emitting
     * @member {jQuery}
     * @readonly
     * @private
     */

    this.$ = $(this);
  }

  $.extend(Model.prototype,
  /** @lends Model.prototype */
  {
    /**
     * Triggers an event on the model
     * @param {string} type
     * @returns {$.Event}
     */
    trigger: function (type) {
      var event = new $.Event(type);
      this.$.triggerHandler(event, Array.prototype.slice.call(arguments, 1));
      return event;
    },

    /**
     * Attaches an event listener on the model
     * @param {string} type
     * @param {function} cb
     * @returns {Model}
     */
    on: function () {
      this.$.on.apply(this.$, Array.prototype.slice.call(arguments));
      return this;
    },

    /**
     * Removes an event listener from the model
     * @param {string} type
     * @param {function} [cb]
     * @returns {Model}
     */
    off: function () {
      this.$.off.apply(this.$, Array.prototype.slice.call(arguments));
      return this;
    },

    /**
     * Attaches an event listener called once on the model
     * @param {string} type
     * @param {function} cb
     * @returns {Model}
     */
    once: function () {
      this.$.one.apply(this.$, Array.prototype.slice.call(arguments));
      return this;
    }
  });
  /**
   * Root abstract object
   * @constructor
   * @param {Node} [parent]
   * @param {jQuery} $el
   */

  var Node = function (parent, $el) {
    if (!(this instanceof Node)) {
      return new Node(parent, $el);
    }

    Object.defineProperty(this, '__', {
      value: {}
    });
    $el.data('queryBuilderModel', this);
    /**
     * @name level
     * @member {int}
     * @memberof Node
     * @instance
     * @readonly
     */

    this.__.level = 1;
    /**
     * @name error
     * @member {string}
     * @memberof Node
     * @instance
     */

    this.__.error = null;
    /**
     * @name flags
     * @member {object}
     * @memberof Node
     * @instance
     * @readonly
     */

    this.__.flags = {};
    /**
     * @name data
     * @member {object}
     * @memberof Node
     * @instance
     */

    this.__.data = undefined;
    /**
     * @member {jQuery}
     * @readonly
     */

    this.$el = $el;
    /**
     * @member {string}
     * @readonly
     */

    this.id = $el[0].id;
    /**
     * @member {Model}
     * @readonly
     */

    this.model = null;
    /**
     * @member {Group}
     * @readonly
     */

    this.parent = parent;
  };

  Utils.defineModelProperties(Node, ['level', 'error', 'data', 'flags']);
  Object.defineProperty(Node.prototype, 'parent', {
    enumerable: true,
    get: function () {
      return this.__.parent;
    },
    set: function (value) {
      this.__.parent = value;
      this.level = value === null ? 1 : value.level + 1;
      this.model = value === null ? null : value.model;
    }
  });
  /**
   * Checks if this Node is the root
   * @returns {boolean}
   */

  Node.prototype.isRoot = function () {
    return this.level === 1;
  };
  /**
   * Returns the node position inside its parent
   * @returns {int}
   */


  Node.prototype.getPos = function () {
    if (this.isRoot()) {
      return -1;
    } else {
      return this.parent.getNodePos(this);
    }
  };
  /**
   * Deletes self
   * @fires Model.model:drop
   */


  Node.prototype.drop = function () {
    var model = this.model;

    if (!!this.parent) {
      this.parent.removeNode(this);
    }

    this.$el.removeData('queryBuilderModel');

    if (model !== null) {
      /**
       * After a node of the model has been removed
       * @event model:drop
       * @memberof Model
       * @param {Node} node
       */
      model.trigger('drop', this);
    }
  };
  /**
   * Moves itself after another Node
   * @param {Node} target
   * @fires Model.model:move
   */


  Node.prototype.moveAfter = function (target) {
    if (!this.isRoot()) {
      this.move(target.parent, target.getPos() + 1);
    }
  };
  /**
   * Moves itself at the beginning of parent or another Group
   * @param {Group} [target]
   * @fires Model.model:move
   */


  Node.prototype.moveAtBegin = function (target) {
    if (!this.isRoot()) {
      if (target === undefined) {
        target = this.parent;
      }

      this.move(target, 0);
    }
  };
  /**
   * Moves itself at the end of parent or another Group
   * @param {Group} [target]
   * @fires Model.model:move
   */


  Node.prototype.moveAtEnd = function (target) {
    if (!this.isRoot()) {
      if (target === undefined) {
        target = this.parent;
      }

      this.move(target, target.length() === 0 ? 0 : target.length() - 1);
    }
  };
  /**
   * Moves itself at specific position of Group
   * @param {Group} target
   * @param {int} index
   * @fires Model.model:move
   */


  Node.prototype.move = function (target, index) {
    if (!this.isRoot()) {
      if (typeof target === 'number') {
        index = target;
        target = this.parent;
      }

      this.parent.removeNode(this);
      target.insertNode(this, index, false);

      if (this.model !== null) {
        /**
         * After a node of the model has been moved
         * @event model:move
         * @memberof Model
         * @param {Node} node
         * @param {Node} target
         * @param {int} index
         */
        this.model.trigger('move', this, target, index);
      }
    }
  };
  /**
   * Group object
   * @constructor
   * @extends Node
   * @param {Group} [parent]
   * @param {jQuery} $el
   */


  var Group = function (parent, $el) {
    if (!(this instanceof Group)) {
      return new Group(parent, $el);
    }

    Node.call(this, parent, $el);
    /**
     * @member {object[]}
     * @readonly
     */

    this.rules = [];
    /**
     * @name condition
     * @member {string}
     * @memberof Group
     * @instance
     */

    this.__.condition = null;
  };

  Group.prototype = Object.create(Node.prototype);
  Group.prototype.constructor = Group;
  Utils.defineModelProperties(Group, ['condition']);
  /**
   * Removes group's content
   */

  Group.prototype.empty = function () {
    this.each('reverse', function (rule) {
      rule.drop();
    }, function (group) {
      group.drop();
    });
  };
  /**
   * Deletes self
   */


  Group.prototype.drop = function () {
    this.empty();
    Node.prototype.drop.call(this);
  };
  /**
   * Returns the number of children
   * @returns {int}
   */


  Group.prototype.length = function () {
    return this.rules.length;
  };
  /**
   * Adds a Node at specified index
   * @param {Node} node
   * @param {int} [index=end]
   * @param {boolean} [trigger=false] - fire 'add' event
   * @returns {Node} the inserted node
   * @fires Model.model:add
   */


  Group.prototype.insertNode = function (node, index, trigger) {
    if (index === undefined) {
      index = this.length();
    }

    this.rules.splice(index, 0, node);
    node.parent = this;

    if (trigger && this.model !== null) {
      /**
       * After a node of the model has been added
       * @event model:add
       * @memberof Model
       * @param {Node} parent
       * @param {Node} node
       * @param {int} index
       */
      this.model.trigger('add', this, node, index);
    }

    return node;
  };
  /**
   * Adds a new Group at specified index
   * @param {jQuery} $el
   * @param {int} [index=end]
   * @returns {Group}
   * @fires Model.model:add
   */


  Group.prototype.addGroup = function ($el, index) {
    return this.insertNode(new Group(this, $el), index, true);
  };
  /**
   * Adds a new Rule at specified index
   * @param {jQuery} $el
   * @param {int} [index=end]
   * @returns {Rule}
   * @fires Model.model:add
   */


  Group.prototype.addRule = function ($el, index) {
    return this.insertNode(new Rule(this, $el), index, true);
  };
  /**
   * Deletes a specific Node
   * @param {Node} node
   */


  Group.prototype.removeNode = function (node) {
    var index = this.getNodePos(node);

    if (index !== -1) {
      node.parent = null;
      this.rules.splice(index, 1);
    }
  };
  /**
   * Returns the position of a child Node
   * @param {Node} node
   * @returns {int}
   */


  Group.prototype.getNodePos = function (node) {
    return this.rules.indexOf(node);
  };
  /**
   * @callback Model#GroupIteratee
   * @param {Node} node
   * @returns {boolean} stop the iteration
   */

  /**
   * Iterate over all Nodes
   * @param {boolean} [reverse=false] - iterate in reverse order, required if you delete nodes
   * @param {Model#GroupIteratee} cbRule - callback for Rules (can be `null` but not omitted)
   * @param {Model#GroupIteratee} [cbGroup] - callback for Groups
   * @param {object} [context] - context for callbacks
   * @returns {boolean} if the iteration has been stopped by a callback
   */


  Group.prototype.each = function (reverse, cbRule, cbGroup, context) {
    if (typeof reverse !== 'boolean' && typeof reverse !== 'string') {
      context = cbGroup;
      cbGroup = cbRule;
      cbRule = reverse;
      reverse = false;
    }

    context = context === undefined ? null : context;
    var i = reverse ? this.rules.length - 1 : 0;
    var l = reverse ? 0 : this.rules.length - 1;
    var c = reverse ? -1 : 1;

    var next = function () {
      return reverse ? i >= l : i <= l;
    };

    var stop = false;

    for (; next(); i += c) {
      if (this.rules[i] instanceof Group) {
        if (!!cbGroup) {
          stop = cbGroup.call(context, this.rules[i]) === false;
        }
      } else if (!!cbRule) {
        stop = cbRule.call(context, this.rules[i]) === false;
      }

      if (stop) {
        break;
      }
    }

    return !stop;
  };
  /**
   * Checks if the group contains a particular Node
   * @param {Node} node
   * @param {boolean} [recursive=false]
   * @returns {boolean}
   */


  Group.prototype.contains = function (node, recursive) {
    if (this.getNodePos(node) !== -1) {
      return true;
    } else if (!recursive) {
      return false;
    } else {
      // the loop will return with false as soon as the Node is found
      return !this.each(function () {
        return true;
      }, function (group) {
        return !group.contains(node, true);
      });
    }
  };
  /**
   * Rule object
   * @constructor
   * @extends Node
   * @param {Group} parent
   * @param {jQuery} $el
   */


  var Rule = function (parent, $el) {
    if (!(this instanceof Rule)) {
      return new Rule(parent, $el);
    }

    Node.call(this, parent, $el);
    this._updating_value = false;
    this._updating_input = false;
    /**
     * @name filter
     * @member {QueryBuilder.Filter}
     * @memberof Rule
     * @instance
     */

    this.__.filter = null;
    /**
     * @name operator
     * @member {QueryBuilder.Operator}
     * @memberof Rule
     * @instance
     */

    this.__.operator = null;
    /**
     * @name value
     * @member {*}
     * @memberof Rule
     * @instance
     */

    this.__.value = undefined;
  };

  Rule.prototype = Object.create(Node.prototype);
  Rule.prototype.constructor = Rule;
  Utils.defineModelProperties(Rule, ['filter', 'operator', 'value']);
  /**
   * Checks if this Node is the root
   * @returns {boolean} always false
   */

  Rule.prototype.isRoot = function () {
    return false;
  };
  /**
   * @member {function}
   * @memberof QueryBuilder
   * @see Group
   */


  QueryBuilder.Group = Group;
  /**
   * @member {function}
   * @memberof QueryBuilder
   * @see Rule
   */

  QueryBuilder.Rule = Rule;
  /**
   * The {@link http://learn.jquery.com/plugins/|jQuery Plugins} namespace
   * @external "jQuery.fn"
   */

  /**
   * Instanciates or accesses the {@link QueryBuilder} on an element
   * @function
   * @memberof external:"jQuery.fn"
   * @param {*} option - initial configuration or method name
   * @param {...*} args - method arguments
   *
   * @example
   * $('#builder').queryBuilder({ /** configuration object *\/ });
   * @example
   * $('#builder').queryBuilder('methodName', methodParam1, methodParam2);
   */

  $.fn.queryBuilder = function (option) {
    if (this.length === 0) {
      Utils.error('Config', 'No target defined');
    }

    if (this.length > 1) {
      Utils.error('Config', 'Unable to initialize on multiple target');
    }

    var data = this.data('queryBuilder');
    var options = typeof option == 'object' && option || {};

    if (!data && option == 'destroy') {
      return this;
    }

    if (!data) {
      var builder = new QueryBuilder(this, options);
      this.data('queryBuilder', builder);
      builder.init(options.rules);
    }

    if (typeof option == 'string') {
      return data[option].apply(data, Array.prototype.slice.call(arguments, 1));
    }

    return this;
  };
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder
   */


  $.fn.queryBuilder.constructor = QueryBuilder;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.defaults
   */

  $.fn.queryBuilder.defaults = QueryBuilder.defaults;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.defaults
   */

  $.fn.queryBuilder.extend = QueryBuilder.extend;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.define
   */

  $.fn.queryBuilder.define = QueryBuilder.define;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.regional
   */

  $.fn.queryBuilder.regional = QueryBuilder.regional;
  /**
   * @class BtTooltipErrors
   * @memberof module:plugins
   * @description Applies Bootstrap Tooltips on validation error messages.
   * @param {object} [options]
   * @param {string} [options.placement='right']
   * @throws MissingLibraryError
   */

  QueryBuilder.define('bt-tooltip-errors', function (options) {
    if (!$.fn.tooltip || !$.fn.tooltip.Constructor || !$.fn.tooltip.Constructor.prototype.fixTitle) {
      Utils.error('MissingLibrary', 'Bootstrap Tooltip is required to use "bt-tooltip-errors" plugin. Get it here: http://getbootstrap.com');
    }

    var self = this; // add BT Tooltip data

    this.on('getRuleTemplate.filter getGroupTemplate.filter', function (h) {
      var $h = $(h.value);
      $h.find(QueryBuilder.selectors.error_container).attr('data-toggle', 'tooltip');
      h.value = $h.prop('outerHTML');
    }); // init/refresh tooltip when title changes

    this.model.on('update', function (e, node, field) {
      if (field == 'error' && self.settings.display_errors) {
        node.$el.find(QueryBuilder.selectors.error_container).eq(0).tooltip(options).tooltip('hide').tooltip('fixTitle');
      }
    });
  }, {
    placement: 'right'
  });
  /**
   * @class BtSelectpicker
   * @memberof module:plugins
   * @descriptioon Applies Bootstrap Select on filters and operators combo-boxes.
   * @param {object} [options]
   * @param {string} [options.container='body']
   * @param {string} [options.style='btn-inverse btn-xs']
   * @param {int|string} [options.width='auto']
   * @param {boolean} [options.showIcon=false]
   * @throws MissingLibraryError
   */

  QueryBuilder.define('bt-selectpicker', function (options) {
    if (!$.fn.selectpicker || !$.fn.selectpicker.Constructor) {
      Utils.error('MissingLibrary', 'Bootstrap Select is required to use "bt-selectpicker" plugin. Get it here: http://silviomoreto.github.io/bootstrap-select');
    }

    var Selectors = QueryBuilder.selectors; // init selectpicker

    this.on('afterCreateRuleFilters', function (e, rule) {
      rule.$el.find(Selectors.rule_filter).removeClass('form-control').selectpicker(options);
    });
    this.on('afterCreateRuleOperators', function (e, rule) {
      rule.$el.find(Selectors.rule_operator).removeClass('form-control').selectpicker(options);
    }); // update selectpicker on change

    /*this.on('afterUpdateRuleFilter', function(e, rule) {
        var selectObj = rule.$el.find(Selectors.rule_filter);
        
        selectObj.selectpicker('render');
    //// Define select picker custom behaviour ////
        var selectButtonObj = selectObj.next();
        var groupNameObj = selectButtonObj.children('.filter-option-group-name');
        var optgroupName = rule.filter.optgroup;
         if (groupNameObj.length > 0) {
            groupNameObj = $(groupNameObj[0]);
        }
        else {
            groupNameObj = $('<div class="filter-option-group-name"></div>'); // define style
            selectButtonObj.prepend( groupNameObj );
        }
         // To get optgroup name
        // it.translate(it.settings.optgroups[optgroup])
         //this.settings.optgroups[filter.optgroup]
         //console.log(`optgroups ${rule.filter.settings.optgroups[optgroupName]}`);
        //console.log(`optgroups ${rule.filter.settings.optgroups[optgroupName]}`);
        
        //console.log( selectObj );
        //console.log(`opti ${optgroupName}`);
        //console.log(`groupNameObj ${groupNameObj}`);
         //groupNameObj.text('Title');
         // Filter optgroup visibility in selection box //
    });*/

    this.on('afterUpdateRuleOperator', function (e, rule) {
      rule.$el.find(Selectors.rule_operator).selectpicker('render');
    });
    this.on('beforeDeleteRule', function (e, rule) {
      rule.$el.find(Selectors.rule_filter).selectpicker('destroy');
      rule.$el.find(Selectors.rule_operator).selectpicker('destroy');
    });
  }, {
    container: 'body',
    style: 'btn-inverse btn-xs',
    width: 'auto',
    showIcon: false
  });
  /*!
   * jQuery QueryBuilder 2.5.0
   * Locale: English (en)
   * Author: Damien "Mistic" Sorel, http://www.strangeplanet.fr
   * Licensed under MIT (https://opensource.org/licenses/MIT)
   */

  QueryBuilder.regional['en'] = {
    "__locale": "English (en)",
    "__author": "Damien \"Mistic\" Sorel, http://www.strangeplanet.fr",
    "add_rule": "Add rule",
    "add_group": "Add group",
    "delete_rule": "Delete",
    "delete_group": "Delete",
    "conditions": {
      "AND": "AND",
      "OR": "OR"
    },
    "operators": {
      "equal": "equal",
      "not_equal": "not equal",
      "in": "in",
      "not_in": "not in",
      "less": "less",
      "less_or_equal": "less or equal",
      "greater": "greater",
      "greater_or_equal": "greater or equal",
      "between": "between",
      "not_between": "not between",
      "begins_with": "begins with",
      "not_begins_with": "doesn't begin with",
      "contains": "contains",
      "not_contains": "doesn't contain",
      "ends_with": "ends with",
      "not_ends_with": "doesn't end with",
      "is_empty": "is empty",
      "is_not_empty": "is not empty",
      "is_null": "is null",
      "is_not_null": "is not null"
    },
    "errors": {
      "no_filter": "No filter selected",
      "empty_group": "The group is empty",
      "radio_empty": "No value selected",
      "checkbox_empty": "No value selected",
      "select_empty": "No value selected",
      "string_empty": "Empty value",
      "string_exceed_min_length": "Must contain at least {0} characters",
      "string_exceed_max_length": "Must not contain more than {0} characters",
      "string_invalid_format": "Invalid format ({0})",
      "number_nan": "Not a number",
      "number_not_integer": "Not an integer",
      "number_not_double": "Not a real number",
      "number_exceed_min": "Must be greater than {0}",
      "number_exceed_max": "Must be lower than {0}",
      "number_wrong_step": "Must be a multiple of {0}",
      "number_between_invalid": "Invalid values, {0} is greater than {1}",
      "datetime_empty": "Empty value",
      "datetime_invalid": "Invalid date format ({0})",
      "datetime_exceed_min": "Must be after {0}",
      "datetime_exceed_max": "Must be before {0}",
      "datetime_between_invalid": "Invalid values, {0} is greater than {1}",
      "boolean_not_valid": "Not a boolean",
      "operator_not_multiple": "Operator \"{1}\" cannot accept multiple values"
    }
  };
  QueryBuilder.defaults({
    lang_code: 'en'
  });
  /*!
   * jQuery QueryBuilder 2.5.0
   * Locale: Polish (pl)
   * Author: Artur Smolarek
   * Licensed under MIT (https://opensource.org/licenses/MIT)
   */

  QueryBuilder.regional['pl'] = {
    "__locale": "Polish (pl)",
    "__author": "Artur Smolarek",
    "add_rule": "Dodaj regułę",
    "add_group": "Dodaj grupę",
    "delete_rule": "Usuń",
    "delete_group": "Usuń",
    "conditions": {
      "AND": "ORAZ",
      "OR": "LUB"
    },
    "operators": {
      "equal": "równa się",
      "not_equal": "jest różne od",
      "in": "zawiera",
      "not_in": "nie zawiera",
      "less": "mniejsze",
      "less_or_equal": "mniejsze lub równe",
      "greater": "większe",
      "greater_or_equal": "większe lub równe",
      "between": "pomiędzy",
      "not_between": "nie jest pomiędzy",
      "begins_with": "rozpoczyna się od",
      "not_begins_with": "nie rozpoczyna się od",
      "contains": "zawiera",
      "not_contains": "nie zawiera",
      "ends_with": "kończy się na",
      "not_ends_with": "nie kończy się na",
      "is_empty": "jest puste",
      "is_not_empty": "nie jest puste",
      "is_null": "jest niezdefiniowane",
      "is_not_null": "nie jest niezdefiniowane"
    },
    "errors": {
      "no_filter": "Nie wybrano żadnego filtra",
      "empty_group": "Grupa jest pusta",
      "radio_empty": "Nie wybrano wartości",
      "checkbox_empty": "Nie wybrano wartości",
      "select_empty": "Nie wybrano wartości",
      "string_empty": "Nie wpisano wartości",
      "string_exceed_min_length": "Minimalna długość to {0} znaków",
      "string_exceed_max_length": "Maksymalna długość to {0} znaków",
      "string_invalid_format": "Nieprawidłowy format ({0})",
      "number_nan": "To nie jest liczba",
      "number_not_integer": "To nie jest liczba całkowita",
      "number_not_double": "To nie jest liczba rzeczywista",
      "number_exceed_min": "Musi być większe niż {0}",
      "number_exceed_max": "Musi być mniejsze niż {0}",
      "number_wrong_step": "Musi być wielokrotnością {0}",
      "datetime_empty": "Nie wybrano wartości",
      "datetime_invalid": "Nieprawidłowy format daty ({0})",
      "datetime_exceed_min": "Musi być po {0}",
      "datetime_exceed_max": "Musi być przed {0}",
      "boolean_not_valid": "Niepoprawna wartość logiczna",
      "operator_not_multiple": "Operator \"{1}\" nie przyjmuje wielu wartości"
    }
  };
  QueryBuilder.defaults({
    lang_code: 'pl'
  });
  return QueryBuilder;
});

/***/ }),

/***/ 119:
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_RESULT__;// TinyColor v1.4.2
// https://github.com/bgrins/TinyColor
// Brian Grinstead, MIT License
(function (Math) {
  var trimLeft = /^\s+/,
      trimRight = /\s+$/,
      tinyCounter = 0,
      mathRound = Math.round,
      mathMin = Math.min,
      mathMax = Math.max,
      mathRandom = Math.random;

  function tinycolor(color, opts) {
    color = color ? color : '';
    opts = opts || {}; // If input is already a tinycolor, return itself

    if (color instanceof tinycolor) {
      return color;
    } // If we are called as a function, call using new instead


    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }

    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType; // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`

    if (this._r < 1) {
      this._r = mathRound(this._r);
    }

    if (this._g < 1) {
      this._g = mathRound(this._g);
    }

    if (this._b < 1) {
      this._b = mathRound(this._b);
    }

    this._ok = rgb.ok;
    this._tc_id = tinyCounter++;
  }

  tinycolor.prototype = {
    isDark: function () {
      return this.getBrightness() < 128;
    },
    isLight: function () {
      return !this.isDark();
    },
    isValid: function () {
      return this._ok;
    },
    getOriginalInput: function () {
      return this._originalInput;
    },
    getFormat: function () {
      return this._format;
    },
    getAlpha: function () {
      return this._a;
    },
    getBrightness: function () {
      //http://www.w3.org/TR/AERT#color-contrast
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function () {
      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;

      if (RsRGB <= 0.03928) {
        R = RsRGB / 12.92;
      } else {
        R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }

      if (GsRGB <= 0.03928) {
        G = GsRGB / 12.92;
      } else {
        G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }

      if (BsRGB <= 0.03928) {
        B = BsRGB / 12.92;
      } else {
        B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }

      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function (value) {
      this._a = boundAlpha(value);
      this._roundA = mathRound(100 * this._a) / 100;
      return this;
    },
    toHsv: function () {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function () {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = mathRound(hsv.h * 360),
          s = mathRound(hsv.s * 100),
          v = mathRound(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function () {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function () {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = mathRound(hsl.h * 360),
          s = mathRound(hsl.s * 100),
          l = mathRound(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function (allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function (allow3Char) {
      return '#' + this.toHex(allow3Char);
    },
    toHex8: function (allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function (allow4Char) {
      return '#' + this.toHex8(allow4Char);
    },
    toRgb: function () {
      return {
        r: mathRound(this._r),
        g: mathRound(this._g),
        b: mathRound(this._b),
        a: this._a
      };
    },
    toRgbString: function () {
      return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function () {
      return {
        r: mathRound(bound01(this._r, 255) * 100) + "%",
        g: mathRound(bound01(this._g, 255) * 100) + "%",
        b: mathRound(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function () {
      return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function () {
      if (this._a === 0) {
        return "transparent";
      }

      if (this._a < 1) {
        return false;
      }

      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function (secondColor) {
      var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";

      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = '#' + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }

      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function (format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");

      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === "name" && this._a === 0) {
          return this.toName();
        }

        return this.toRgbString();
      }

      if (format === "rgb") {
        formattedString = this.toRgbString();
      }

      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }

      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }

      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }

      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }

      if (format === "hex8") {
        formattedString = this.toHex8String();
      }

      if (format === "name") {
        formattedString = this.toName();
      }

      if (format === "hsl") {
        formattedString = this.toHslString();
      }

      if (format === "hsv") {
        formattedString = this.toHsvString();
      }

      return formattedString || this.toHexString();
    },
    clone: function () {
      return tinycolor(this.toString());
    },
    _applyModification: function (fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function () {
      return this._applyModification(lighten, arguments);
    },
    brighten: function () {
      return this._applyModification(brighten, arguments);
    },
    darken: function () {
      return this._applyModification(darken, arguments);
    },
    desaturate: function () {
      return this._applyModification(desaturate, arguments);
    },
    saturate: function () {
      return this._applyModification(saturate, arguments);
    },
    greyscale: function () {
      return this._applyModification(greyscale, arguments);
    },
    spin: function () {
      return this._applyModification(spin, arguments);
    },
    _applyCombination: function (fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function () {
      return this._applyCombination(analogous, arguments);
    },
    complement: function () {
      return this._applyCombination(complement, arguments);
    },
    monochromatic: function () {
      return this._applyCombination(monochromatic, arguments);
    },
    splitcomplement: function () {
      return this._applyCombination(splitcomplement, arguments);
    },
    triad: function () {
      return this._applyCombination(triad, arguments);
    },
    tetrad: function () {
      return this._applyCombination(tetrad, arguments);
    }
  }; // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1

  tinycolor.fromRatio = function (color, opts) {
    if (typeof color == "object") {
      var newColor = {};

      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }

      color = newColor;
    }

    return tinycolor(color, opts);
  }; // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //


  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;

    if (typeof color == "string") {
      color = stringInputToObject(color);
    }

    if (typeof color == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }

      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }

    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: mathMin(255, mathMax(rgb.r, 0)),
      g: mathMin(255, mathMax(rgb.g, 0)),
      b: mathMin(255, mathMax(rgb.b, 0)),
      a: a
    };
  } // Conversion Functions
  // --------------------
  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]


  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  } // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]


  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = mathMax(r, g, b),
        min = mathMin(r, g, b);
    var h,
        s,
        l = (max + min) / 2;

    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    return {
      h: h,
      s: s,
      l: l
    };
  } // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]


  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);

    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }

    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }

    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  } // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]


  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = mathMax(r, g, b),
        min = mathMin(r, g, b);
    var h,
        s,
        v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;

    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;

        case g:
          h = (b - r) / d + 2;
          break;

        case b:
          h = (r - g) / d + 4;
          break;
      }

      h /= 6;
    }

    return {
      h: h,
      s: s,
      v: v
    };
  } // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]


  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h),
        f = h - i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        mod = i % 6,
        r = [v, q, p, p, t, v][mod],
        g = [t, v, v, q, p, p][mod],
        b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  } // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex


  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))]; // Return a 3 character hex if possible

    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }

    return hex.join("");
  } // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex


  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16)), pad2(convertDecimalToHex(a))]; // Return a 4 character hex if possible

    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }

    return hex.join("");
  } // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"


  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(mathRound(r).toString(16)), pad2(mathRound(g).toString(16)), pad2(mathRound(b).toString(16))];
    return hex.join("");
  } // `equals`
  // Can be called with any tinycolor input


  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) {
      return false;
    }

    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };

  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: mathRandom(),
      g: mathRandom(),
      b: mathRandom()
    });
  }; // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>


  function desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }

  function saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }

  function greyscale(color) {
    return tinycolor(color).desaturate(100);
  }

  function lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  function brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
    return tinycolor(rgb);
  }

  function darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  } // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.


  function spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  } // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>


  function complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }

  function triad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 120) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 240) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }

  function tetrad(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 90) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 180) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 270) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }

  function splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }

  function analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];

    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }

    return ret;
  }

  function monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
        s = hsv.s,
        v = hsv.v;
    var ret = [];
    var modification = 1 / results;

    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }

    return ret;
  } // Utility Functions
  // ---------------------


  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  }; // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)


  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  }; // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.
  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false


  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);

    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;

      case "AAlarge":
        out = readability >= 3;
        break;

      case "AAAsmall":
        out = readability >= 7;
        break;
    }

    return out;
  }; // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"


  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;

    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);

      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }

    if (tinycolor.isReadable(baseColor, bestColor, {
      "level": level,
      "size": size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  }; // Big List of Colors
  // ------------------
  // <http://www.w3.org/TR/css3-color/#svg-color>


  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  }; // Make it easy to access colors via `hexNames[hex]`

  var hexNames = tinycolor.hexNames = flip(names); // Utilities
  // ---------
  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`

  function flip(o) {
    var flipped = {};

    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }

    return flipped;
  } // Return a valid alpha value [0,1] with all invalid values being set to 1


  function boundAlpha(a) {
    a = parseFloat(a);

    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }

    return a;
  } // Take input from [0, n] and return it as [0, 1]


  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = "100%";
    }

    var processPercent = isPercentage(n);
    n = mathMin(max, mathMax(0, parseFloat(n))); // Automatically convert percentage into number

    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    } // Handle floating point rounding errors


    if (Math.abs(n - max) < 0.000001) {
      return 1;
    } // Convert into [0, 1] range if it isn't already


    return n % max / parseFloat(max);
  } // Force a number between 0 and 1


  function clamp01(val) {
    return mathMin(1, mathMax(0, val));
  } // Parse a base-16 hex value into a base-10 integer


  function parseIntFromHex(val) {
    return parseInt(val, 16);
  } // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>


  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf('.') != -1 && parseFloat(n) === 1;
  } // Check to see if string passed in is a percentage


  function isPercentage(n) {
    return typeof n === "string" && n.indexOf('%') != -1;
  } // Force a hex value to have 2 characters


  function pad2(c) {
    return c.length == 1 ? '0' + c : '' + c;
  } // Replace a decimal with it's percentage value


  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }

    return n;
  } // Converts a decimal to a hex value


  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  } // Converts a hex value to a decimal


  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }

  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?"; // <http://www.w3.org/TR/css3-values/#number-value>

    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?"; // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.

    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")"; // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren

    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }(); // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).


  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  } // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`


  function stringInputToObject(color) {
    color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
    var named = false;

    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == 'transparent') {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    } // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.


    var match;

    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }

    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }

    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }

    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }

    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }

    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }

    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }

    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }

    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + '' + match[1]),
        g: parseIntFromHex(match[2] + '' + match[2]),
        b: parseIntFromHex(match[3] + '' + match[3]),
        a: convertHexToDecimal(match[4] + '' + match[4]),
        format: named ? "name" : "hex8"
      };
    }

    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + '' + match[1]),
        g: parseIntFromHex(match[2] + '' + match[2]),
        b: parseIntFromHex(match[3] + '' + match[3]),
        format: named ? "name" : "hex"
      };
    }

    return false;
  }

  function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
      "level": "AA",
      "size": "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();

    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }

    if (size !== "small" && size !== "large") {
      size = "small";
    }

    return {
      "level": level,
      "size": size
    };
  } // Node: Export function


  if ( true && module.exports) {
    module.exports = tinycolor;
  } // AMD/requirejs: Define the module
  else if (true) {
      !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
        return tinycolor;
      }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } // Browser: Expose to window
    else {}
})(Math);

/***/ }),

/***/ 1349:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
 * tinygradient (v1.1.5)
 * @copyright 2014-2021 Damien "Mistic" Sorel <contact@git.strangeplanet.fr>
 * @licence MIT
 */
(function (global, factory) {
   true ? module.exports = factory(__webpack_require__(119)) : 0;
})(this, function (tinycolor2) {
  'use strict';

  function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : {
      'default': e
    };
  }

  var tinycolor2__default = /*#__PURE__*/_interopDefaultLegacy(tinycolor2);
  /**
   * @typedef {Object} TinyGradient.StopInput
   * @property {ColorInput} color
   * @property {number} pos
   */

  /**
   * @typedef {Object} TinyGradient.StepValue
   * @type {number} [r]
   * @type {number} [g]
   * @type {number} [b]
   * @type {number} [h]
   * @type {number} [s]
   * @type {number} [v]
   * @type {number} [a]
   */

  /**
   * @type {StepValue}
   */


  var RGBA_MAX = {
    r: 256,
    g: 256,
    b: 256,
    a: 1
  };
  /**
   * @type {StepValue}
   */

  var HSVA_MAX = {
    h: 360,
    s: 1,
    v: 1,
    a: 1
  };
  /**
   * Linearly compute the step size between start and end (not normalized)
   * @param {StepValue} start
   * @param {StepValue} end
   * @param {number} steps - number of desired steps
   * @return {StepValue}
   */

  function stepize(start, end, steps) {
    var step = {};

    for (var k in start) {
      if (start.hasOwnProperty(k)) {
        step[k] = steps === 0 ? 0 : (end[k] - start[k]) / steps;
      }
    }

    return step;
  }
  /**
   * Compute the final step color
   * @param {StepValue} step - from `stepize`
   * @param {StepValue} start
   * @param {number} i - color index
   * @param {StepValue} max - rgba or hsva of maximum values for each channel
   * @return {StepValue}
   */


  function interpolate(step, start, i, max) {
    var color = {};

    for (var k in start) {
      if (start.hasOwnProperty(k)) {
        color[k] = step[k] * i + start[k];
        color[k] = color[k] < 0 ? color[k] + max[k] : max[k] !== 1 ? color[k] % max[k] : color[k];
      }
    }

    return color;
  }
  /**
   * Generate gradient with RGBa interpolation
   * @param {StopInput} stop1
   * @param {StopInput} stop2
   * @param {number} steps
   * @return {tinycolor[]} color1 included, color2 excluded
   */


  function interpolateRgb(stop1, stop2, steps) {
    var start = stop1.color.toRgb();
    var end = stop2.color.toRgb();
    var step = stepize(start, end, steps);
    var gradient = [stop1.color];

    for (var i = 1; i < steps; i++) {
      var color = interpolate(step, start, i, RGBA_MAX);
      gradient.push(tinycolor2__default['default'](color));
    }

    return gradient;
  }
  /**
   * Generate gradient with HSVa interpolation
   * @param {StopInput} stop1
   * @param {StopInput} stop2
   * @param {number} steps
   * @param {boolean|'long'|'short'} mode
   * @return {tinycolor[]} color1 included, color2 excluded
   */


  function interpolateHsv(stop1, stop2, steps, mode) {
    var start = stop1.color.toHsv();
    var end = stop2.color.toHsv(); // rgb interpolation if one of the steps in grayscale

    if (start.s === 0 || end.s === 0) {
      return interpolateRgb(stop1, stop2, steps);
    }

    var trigonometric;

    if (typeof mode === 'boolean') {
      trigonometric = mode;
    } else {
      var trigShortest = start.h < end.h && end.h - start.h < 180 || start.h > end.h && start.h - end.h > 180;
      trigonometric = mode === 'long' && trigShortest || mode === 'short' && !trigShortest;
    }

    var step = stepize(start, end, steps);
    var gradient = [stop1.color]; // recompute hue

    var diff;

    if (start.h <= end.h && !trigonometric || start.h >= end.h && trigonometric) {
      diff = end.h - start.h;
    } else if (trigonometric) {
      diff = 360 - end.h + start.h;
    } else {
      diff = 360 - start.h + end.h;
    }

    step.h = Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff) / steps;

    for (var i = 1; i < steps; i++) {
      var color = interpolate(step, start, i, HSVA_MAX);
      gradient.push(tinycolor2__default['default'](color));
    }

    return gradient;
  }
  /**
   * Compute substeps between each stops
   * @param {StopInput[]} stops
   * @param {number} steps
   * @return {number[]}
   */


  function computeSubsteps(stops, steps) {
    var l = stops.length; // validation

    steps = parseInt(steps, 10);

    if (isNaN(steps) || steps < 2) {
      throw new Error('Invalid number of steps (< 2)');
    }

    if (steps < l) {
      throw new Error('Number of steps cannot be inferior to number of stops');
    } // compute substeps from stop positions


    var substeps = [];

    for (var i = 1; i < l; i++) {
      var step = (steps - 1) * (stops[i].pos - stops[i - 1].pos);
      substeps.push(Math.max(1, Math.round(step)));
    } // adjust number of steps


    var totalSubsteps = 1;

    for (var n = l - 1; n--;) {
      totalSubsteps += substeps[n];
    }

    while (totalSubsteps !== steps) {
      if (totalSubsteps < steps) {
        var min = Math.min.apply(null, substeps);
        substeps[substeps.indexOf(min)]++;
        totalSubsteps++;
      } else {
        var max = Math.max.apply(null, substeps);
        substeps[substeps.indexOf(max)]--;
        totalSubsteps--;
      }
    }

    return substeps;
  }
  /**
   * Compute the color at a specific position
   * @param {StopInput[]} stops
   * @param {number} pos
   * @param {string} method
   * @param {StepValue} max
   * @returns {tinycolor}
   */


  function computeAt(stops, pos, method, max) {
    if (pos < 0 || pos > 1) {
      throw new Error('Position must be between 0 and 1');
    }

    var start, end;

    for (var i = 0, l = stops.length; i < l - 1; i++) {
      if (pos >= stops[i].pos && pos < stops[i + 1].pos) {
        start = stops[i];
        end = stops[i + 1];
        break;
      }
    }

    if (!start) {
      start = end = stops[stops.length - 1];
    }

    var step = stepize(start.color[method](), end.color[method](), (end.pos - start.pos) * 100);
    var color = interpolate(step, start.color[method](), (pos - start.pos) * 100, max);
    return tinycolor2__default['default'](color);
  }

  var TinyGradient = /*#__PURE__*/function () {
    /**
     * @param {StopInput[]|ColorInput[]} stops
     * @returns {TinyGradient}
     */
    function TinyGradient(stops) {
      // validation
      if (stops.length < 2) {
        throw new Error('Invalid number of stops (< 2)');
      }

      var havingPositions = stops[0].pos !== undefined;
      var l = stops.length;
      var p = -1;
      var lastColorLess = false; // create tinycolor objects and clean positions

      this.stops = stops.map(function (stop, i) {
        var hasPosition = stop.pos !== undefined;

        if (havingPositions ^ hasPosition) {
          throw new Error('Cannot mix positionned and not posionned color stops');
        }

        if (hasPosition) {
          var hasColor = stop.color !== undefined;

          if (!hasColor && (lastColorLess || i === 0 || i === l - 1)) {
            throw new Error('Cannot define two consecutive position-only stops');
          }

          lastColorLess = !hasColor;
          stop = {
            color: hasColor ? tinycolor2__default['default'](stop.color) : null,
            colorLess: !hasColor,
            pos: stop.pos
          };

          if (stop.pos < 0 || stop.pos > 1) {
            throw new Error('Color stops positions must be between 0 and 1');
          } else if (stop.pos < p) {
            throw new Error('Color stops positions are not ordered');
          }

          p = stop.pos;
        } else {
          stop = {
            color: tinycolor2__default['default'](stop.color !== undefined ? stop.color : stop),
            pos: i / (l - 1)
          };
        }

        return stop;
      });

      if (this.stops[0].pos !== 0) {
        this.stops.unshift({
          color: this.stops[0].color,
          pos: 0
        });
        l++;
      }

      if (this.stops[l - 1].pos !== 1) {
        this.stops.push({
          color: this.stops[l - 1].color,
          pos: 1
        });
      }
    }
    /**
     * Return new instance with reversed stops
     * @return {TinyGradient}
     */


    var _proto = TinyGradient.prototype;

    _proto.reverse = function reverse() {
      var stops = [];
      this.stops.forEach(function (stop) {
        stops.push({
          color: stop.color,
          pos: 1 - stop.pos
        });
      });
      return new TinyGradient(stops.reverse());
    }
    /**
     * Return new instance with looped stops
     * @return {TinyGradient}
     */
    ;

    _proto.loop = function loop() {
      var stops1 = [];
      var stops2 = [];
      this.stops.forEach(function (stop) {
        stops1.push({
          color: stop.color,
          pos: stop.pos / 2
        });
      });
      this.stops.slice(0, -1).forEach(function (stop) {
        stops2.push({
          color: stop.color,
          pos: 1 - stop.pos / 2
        });
      });
      return new TinyGradient(stops1.concat(stops2.reverse()));
    }
    /**
     * Generate gradient with RGBa interpolation
     * @param {number} steps
     * @return {tinycolor[]}
     */
    ;

    _proto.rgb = function rgb(steps) {
      var _this = this;

      var substeps = computeSubsteps(this.stops, steps);
      var gradient = [];
      this.stops.forEach(function (stop, i) {
        if (stop.colorLess) {
          stop.color = interpolateRgb(_this.stops[i - 1], _this.stops[i + 1], 2)[1];
        }
      });

      for (var i = 0, l = this.stops.length; i < l - 1; i++) {
        var rgb = interpolateRgb(this.stops[i], this.stops[i + 1], substeps[i]);
        gradient.splice.apply(gradient, [gradient.length, 0].concat(rgb));
      }

      gradient.push(this.stops[this.stops.length - 1].color);
      return gradient;
    }
    /**
     * Generate gradient with HSVa interpolation
     * @param {number} steps
     * @param {boolean|'long'|'short'} [mode=false]
     *    - false to step in clockwise
     *    - true to step in trigonometric order
     *    - 'short' to use the shortest way
     *    - 'long' to use the longest way
     * @return {tinycolor[]}
     */
    ;

    _proto.hsv = function hsv(steps, mode) {
      var _this2 = this;

      var substeps = computeSubsteps(this.stops, steps);
      var gradient = [];
      this.stops.forEach(function (stop, i) {
        if (stop.colorLess) {
          stop.color = interpolateHsv(_this2.stops[i - 1], _this2.stops[i + 1], 2, mode)[1];
        }
      });

      for (var i = 0, l = this.stops.length; i < l - 1; i++) {
        var hsv = interpolateHsv(this.stops[i], this.stops[i + 1], substeps[i], mode);
        gradient.splice.apply(gradient, [gradient.length, 0].concat(hsv));
      }

      gradient.push(this.stops[this.stops.length - 1].color);
      return gradient;
    }
    /**
     * Generate CSS3 command (no prefix) for this gradient
     * @param {String} [mode=linear] - 'linear' or 'radial'
     * @param {String} [direction] - default is 'to right' or 'ellipse at center'
     * @return {String}
     */
    ;

    _proto.css = function css(mode, direction) {
      mode = mode || 'linear';
      direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');
      var css = mode + '-gradient(' + direction;
      this.stops.forEach(function (stop) {
        css += ', ' + (stop.colorLess ? '' : stop.color.toRgbString() + ' ') + stop.pos * 100 + '%';
      });
      css += ')';
      return css;
    }
    /**
     * Returns the color at specific position with RGBa interpolation
     * @param {number} pos, between 0 and 1
     * @return {tinycolor}
     */
    ;

    _proto.rgbAt = function rgbAt(pos) {
      return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);
    }
    /**
     * Returns the color at specific position with HSVa interpolation
     * @param {number} pos, between 0 and 1
     * @return {tinycolor}
     */
    ;

    _proto.hsvAt = function hsvAt(pos) {
      return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);
    };

    return TinyGradient;
  }();
  /**
   * @param {StopInput[]|ColorInput[]|StopInput...|ColorInput...} stops
   * @returns {TinyGradient}
   */


  var tinygradient = function tinygradient(stops) {
    // varargs
    if (arguments.length === 1) {
      if (!Array.isArray(arguments[0])) {
        throw new Error('"stops" is not an array');
      }

      stops = arguments[0];
    } else {
      stops = Array.prototype.slice.call(arguments);
    }

    return new TinyGradient(stops);
  };

  return tinygradient;
});

/***/ }),

/***/ 725:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";

;// CONCATENATED MODULE: ./views/pages/map/css/map-modals.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const map_modals = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/css/sidebar.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const sidebar = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/css/legend.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const legend = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/css/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/map-modal/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const map_modal_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-sass/_colors.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const _colors = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/utilities.js


function clusterSettingSliderEventSetup(sliderObj, settingName, callerName = 'onChange') {
  $(sliderObj.input).on('update select-features-clustering cluster-strategy-change', function (event, data) {
    sliderObj.update({});
  });

  var eventFunction = async function (data) {
    let value;
    if (sliderObj.options.type === 'double') value = [data.from, data.to];else value = data.from;
    if (settingName === 'range') ArcheoEvents.broadcast(['cluster-setting-change', 'cluster-range-change'], null, {
      setting: settingName,
      value: value
    });else ArcheoEvents.broadcast(['cluster-setting-change'], null, {
      setting: settingName,
      value: value
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
}

function clusterConfigCheckboxEventSetup(selector, configName, refresh) {
  $(selector).on('select-features-clustering cluster-strategy-change', function (event, data) {
    $(selector).trigger('update');
  });
  $(selector).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(selector).hasClass('active'); // negation applied intentionally
    else config[configName] = $(selector).hasClass('active');
    ArcheoEvents.broadcast('cluster-config-change', null, {
      config: config,
      refresh: refresh
    });
  });
}

function clusterConfigRadiobuttonEventSetup(radiobuttonWrapper, configName) {
  $(radiobuttonWrapper).on('select-features-clustering cluster-strategy-change', function (event, data) {
    //$(checkboxObj).find("[checked='']").trigger('update');
    $(radiobuttonWrapper).trigger('update');
  });
  $(radiobuttonWrapper).on('change update', 'input', null, function (event) {
    var $input = $(event.target);
    let config = {};
    config[configName] = $input.attr('value');
    ArcheoEvents.broadcast('cluster-config-change', null, {
      config: config
    });
  });
}

function clusterRegionShowCheckboxEventSetup(selector, configName) {
  $(selector).on('select-features-clustering cluster-strategy-change', function (event, data) {
    $(selector).trigger('update');
  }); // layer has changed event

  $(selector).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(selector).hasClass('active'); // negation applied intentionally
    else config[configName] = $(selector).hasClass('active');
    ArcheoEvents.broadcast(['cluster-region-show', 'cluster-config-change'], null, {
      config: config
    });
  });
}
/* Assign regions ids to objects */


function promiseIncorporatingRegionsIds(regionsTypeId, featuresDict, objectId) {
  return new Promise((resolution, rejection) => {
    let featuresIds = Object.keys(featuresDict);
    var filters = {
      'id_in': featuresIds
    };
    var selectionSet = ['id', 'regionsIds(type: $type)'];
    var variablesDeclarations = {
      "$type": "String"
    };
    let query = ArcheoRequests.createGraphqlQuery(objectId, selectionSet, filters, variablesDeclarations);
    let variables = {
      type: regionsTypeId
    };
    ArcheoRequests.queryGraphQL(query, response => {
      let regionsIds = response.data[objectId];
      /* Incorporate it with features */

      regionsIds.forEach(info => {
        if (info.regionsIds.length > 0) {
          featuresDict[info.id].forEach(f => {
            f.get('properties').regionsIds = info.regionsIds;
            f.set('regionsIds', info.regionsIds, true);
          });
        } else {
          featuresDict[info.id].forEach(f => {
            f.get('properties').regionsIds = [];
            f.set('regionsIds', [], true);
          });
        }
      });
      resolution(true);
    }, variables);
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/utilities.js

const possiblePatterns = ['hatch', 'coal', 'dot', 'crosses', 'woven'];

function generateRandomRegionStyle() {
  let patternColor = ArcheoUtilities.randomRGBColorGenerator(true);
  let backgroundColor = ArcheoUtilities.randomRGBColorGenerator(true);
  return {
    name: '',
    color: {
      pattern: patternColor.toRgbString(),
      background: backgroundColor.setAlpha(0.3).toRgbString(),
      stroke: null
    },
    pattern: {
      type: possiblePatterns[ArcheoUtilities.getRandomInt(0, possiblePatterns.length)],
      angle: 45 * ArcheoUtilities.getRandomInt(0, 4),
      scale: 1.0 + 0.25 * ArcheoUtilities.getRandomInt(1, 4),
      spacing: ArcheoUtilities.getRandomInt(10, 21)
    }
  };
}
/* Gather basic data about all certain type's regions */


function promiseFetchRegionsBasicData(regionsTypeId) {
  return new Promise((resolution, rejection) => {
    var filters = {
      'this_is_division': {
        'Division': {
          'id': regionsTypeId
        }
      }
    };
    var selectionSet = ['id', 'name(lang: $lang)', 'centroid {x, y}', 'dating', 'bbox {x, y}'];
    var variablesDeclarations = {
      "$lang": "String"
    };
    let query = ArcheoRequests.createGraphqlQuery('Region', selectionSet, filters, variablesDeclarations);
    /* Register region type entry */

    let regionsLegend = ArcheoSession.get().legend.regions;
    if (!(regionsTypeId in regionsLegend)) regionsLegend[regionsTypeId] = {};
    ArcheoRequests.queryGraphQL(query, response => {
      let regionsDetails = response.data.Region;
      /* Add regions info to the regions dict */

      regionsDetails.forEach(regionInfo => {
        let id = regionInfo.id;
        let centroid = [regionInfo.centroid.x, regionInfo.centroid.y];
        centroid = ArcheoMap.getCoordinatesProjectedToMap(centroid);
        let boundingCoordinates = [];

        for (var i = 0; i < regionInfo.bbox.length; ++i) {
          let corner = [regionInfo.bbox[i].x, regionInfo.bbox[i].y];
          boundingCoordinates.push(ArcheoMap.getCoordinatesProjectedToMap(corner));
        }

        let isThereDatingInfo = ArcheoUtilities.isValid(regionInfo.dating) && ArcheoUtilities.isValid(regionInfo.dating[Object.keys(regionInfo.dating)[0]]);
        let regionName = regionInfo.name;
        let mapRegionInfo = {
          name: regionName,
          type: regionsTypeId,
          centroid: centroid,
          extent: ArcheoMap.getExtentFromBoundingBox(boundingCoordinates)
        };

        if (!(regionName in regionsLegend[regionsTypeId])) {
          if (regionsTypeId === 'cultures') regionsLegend[regionsTypeId][regionName] = generateRandomRegionStyle();
          regionsLegend[regionsTypeId][regionName] = { ...regionsLegend[regionsTypeId][regionName],
            name: regionName,
            filtered: false,
            group: null
          };
        }

        if (isThereDatingInfo) {
          mapRegionInfo.dating = regionInfo.dating;
          mapRegionInfo.datingMean = (regionInfo.dating.year_end - regionInfo.dating.year_start) / 2.0;
        }

        ArcheoMap.setMapRegions(id, mapRegionInfo, regionsTypeId);
      });
      resolution(true);
    }, {
      lang: window.getLang()
    });
  });
}

async function promiseGetDescendantsAttributes(attributeEntity, attributesValuesIds, treeIndex) {
  return new Promise(async function (resolution, rejection) {
    // 	"begins_with": "_starts_with", 
    var filters = {
      'name_in': attributesValuesIds,
      'treeIndex_starts_with': treeIndex
    };
    var selectionSet = ['name']; //var variablesDeclarations = {"$lang": "String"};

    let query = ArcheoRequests.createGraphqlQuery(attributeEntity, selectionSet, filters //variablesDeclarations
    );
    ArcheoRequests.queryGraphQL(query, response => {
      let attributeDescendants = response.data[attributeEntity];
      resolution(attributeDescendants);
    }); //{lang: window.getLang() });
  });
} // is_ancestor(treeIndex: String, lang: String = "en")


async function promiseGetAncestorsAttributes(attributeEntity, attributesValuesIds, treeIndex) {
  return new Promise(async function (resolution, rejection) {
    // "begins_with": "_starts_with", 
    var filters = {
      'name_in': attributesValuesIds
    };
    var selectionSet = ['is_ancestor(treeIndex: $treeIndex, lang: $lang)'];
    var variablesDeclarations = {
      "$lang": "String",
      "$treeIndex": "String"
    }; //var variablesDeclarations = {"$treeIndex": "String"};

    let query = ArcheoRequests.createGraphqlQuery(attributeEntity, selectionSet, filters, variablesDeclarations);
    ArcheoRequests.queryGraphQL(query, response => {
      let attributeAncestors = response.data[attributeEntity];
      attributeAncestors = attributeAncestors.map(el => el.is_ancestor);
      attributeAncestors = attributeAncestors.filter(ancestor => ArcheoUtilities.isValid(ancestor));
      resolution(attributeAncestors);
    }, {
      lang: window.getLang(),
      treeIndex: treeIndex
    });
  });
}

async function promiseGetAttributesByTreeLevel(attributeEntity, attributesValuesIds, treeLevel) {
  return new Promise(async function (resolution, rejection) {
    var filters = {
      'name_in': attributesValuesIds
    };
    var selectionSet = ['get_ancestor(treeLevel: $treeLevel, lang: $lang)'];
    var variablesDeclarations = {
      "$lang": "String",
      "$treeLevel": "Int"
    };
    let query = ArcheoRequests.createGraphqlQuery(attributeEntity, selectionSet, filters, variablesDeclarations);
    ArcheoRequests.queryGraphQL(query, response => {
      let attributeAncestors = response.data[attributeEntity];
      attributeAncestors = attributeAncestors.map(el => {
        return el.get_ancestor;
      });
      attributeAncestors = attributeAncestors.filter(ancestor => ArcheoUtilities.isValid(ancestor) && ancestor.path_length > -1);
      resolution(attributeAncestors);
    }, {
      lang: window.getLang(),
      treeLevel: treeLevel
    });
  });
}

async function promiseFitlerAttributesByTreeLevel(attributeEntity, attributesValuesIds, treeLevelFrom, treeLevelTo) {
  return new Promise(async function (resolution, rejection) {
    var filters = {
      'name_in': attributesValuesIds,
      'depth_gte': treeLevelFrom,
      'depth_lte': treeLevelTo
    };
    var selectionSet = ['name']; //var variablesDeclarations = {"$lang": "String"};

    var variablesDeclarations = {};
    let query = ArcheoRequests.createGraphqlQuery(attributeEntity, selectionSet, filters, variablesDeclarations);
    ArcheoRequests.queryGraphQL(query, response => {
      let attributeObjects = response.data[attributeEntity];
      resolution(attributeObjects);
    }, {//lang: window.getLang()
    });
  });
}

function initializeTreeSearch($inputEl, attributeId) {
  if (ArcheoUtilities.isValid($inputEl.autocomplete('instance'))) $inputEl.autocomplete("destroy");
  ArcheoSearcher.initialize($inputEl, attributeId, 'treeIndex', 'name', 'synonym', window.getLang(), function (event, ui) {
    $inputEl.attr('searched-label', ui.item.label);
    $inputEl.attr('searched-value', ui.item.value);
  }, function (event, ui) {
    let queryAttributeValue = $inputEl.attr('searched-label');
    let label = ArcheoUtilities.isStringUndefined(queryAttributeValue) ? '' : queryAttributeValue;
    $inputEl.val(label);
  });
}

function updateTreeLevelSlider($treeLevelClusteringPanel, $treeLevelSlider, attributeId, attributeType, data = {}) {
  if (attributeType === 'tree') {
    $treeLevelClusteringPanel.removeClass('hidden');
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    let minLevel = metadata[attributeEntity].minDepth;
    let maxLevel = metadata[attributeEntity].maxDepth;
    $treeLevelSlider.data("ionRangeSlider").update({
      min: minLevel,
      max: maxLevel,
      ...data
    });
  } else {
    $treeLevelClusteringPanel.addClass('hidden');
  }
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/features/clustering.js



function initializeClusteringStrategyEvents() {
  /* Change clustering mode setting */
  let distanceWrapper = $('#distance-clustering-wrapper');
  let clusteringWrapper = $('#region-clustering-wrapper');
  let settingsWrapper = $('#cluster-settings-wrapper');
  $('#clustering-mode-select').on('dataset-sampled dataset-shuffled', function () {
    ArcheoMap.triggerLayerStyleFunction();
  });
  $('#clustering-mode-select').on('dataset-sampled dataset-add dataset-shuffled', function (event, data) {
    let datasetId = data.datasetId;
    let regionsTypeId = ArcheoSession.get().clustering.features.method.region;

    if (ArcheoUtilities.isValid(regionsTypeId)) {
      let featuresDict = ArcheoMap.getAllFeaturesDictGroupedByObjectId(datasetId);
      let objectsIds = Object.keys(featuresDict);
      let promises = [];
      objectsIds.forEach(objectId => {
        promises.push(promiseIncorporatingRegionsIds(regionsTypeId, featuresDict[objectId], objectId));
      });
      Promise.all(promises).then(successFlags => {
        let didAllSucceeded = true;
        successFlags.forEach(hasSucceeded => {
          if (!hasSucceeded) {
            didAllSucceeded = false;
            console.error('[ERROR] Regions have not been fetched');
            return false;
          }
        });

        if (didAllSucceeded) {
          // Fix for sampling: do not refresh regions layer on sampling, only load up ragions data for features
          ArcheoMap.triggerClusterFilters();
          ArcheoMap.triggerLayerStyleFunction();
        }
      });
    }
  });
  $('#clustering-mode-select').on('changed.bs.select', function (event, data) {
    let datasetId = ArcheoUtilities.isValid(data) ? data.datasetId : null;
    var $select = $(event.target);
    var values = $select.selectpicker().val();
    let distance = values.filter(strategy => strategy.startsWith('distance'))[0] || null;
    let region = values.filter(strategy => strategy.startsWith('region'))[0] || null;
    if (ArcheoUtilities.isValid(distance)) distance = distance.split('__')[1];
    if (ArcheoUtilities.isValid(region)) region = region.split('__')[1];
    let clusterConfig = {
      method: {
        distance: distance,
        region: region
      }
    };
    ArcheoSession.get().clustering.features = { ...ArcheoSession.get().clustering.features,
      ...clusterConfig
    };
    if (!ArcheoUtilities.isValid(distance) && !ArcheoUtilities.isValid(region)) settingsWrapper.hide();
    /* Update UI */

    if (ArcheoUtilities.isValid(distance)) {
      distanceWrapper.removeClass('hidden');
      settingsWrapper.show();
    } else distanceWrapper.addClass('hidden');

    if (ArcheoUtilities.isValid(region)) {
      clusteringWrapper.removeClass('hidden');
      settingsWrapper.show();
    } else clusteringWrapper.addClass('hidden');

    if (ArcheoUtilities.isValid(clusterConfig.method.region)) {
      let regionsTypeId = clusterConfig.method.region;

      if (regionsTypeId === 'world') {
        ArcheoEvents.broadcast(['cluster-strategy-change'], null, {
          config: clusterConfig
        });
      } else {
        promiseFetchRegionsBasicData(regionsTypeId).then(isFetchingSuccessful => {
          if (isFetchingSuccessful) {
            let featuresDict = ArcheoMap.getAllFeaturesDictGroupedByObjectId(datasetId);
            let objectsIds = Object.keys(featuresDict);
            let promises = [];
            objectsIds.forEach(objectId => {
              promises.push(promiseIncorporatingRegionsIds(regionsTypeId, featuresDict[objectId], objectId));
            });
            Promise.all(promises).then(successFlags => {
              let didAllSucceeded = true;
              successFlags.forEach(hasSucceeded => {
                if (!hasSucceeded) {
                  didAllSucceeded = false;
                  console.error('[ERROR] Regions have not been fetched');
                  return false;
                }
              });

              if (didAllSucceeded) {
                // Fix for sampling: do not refresh regions layer on sampling, only load up ragions data for features
                ArcheoEvents.broadcast(['cluster-strategy-change'], null, {
                  config: clusterConfig
                });
              }
            });
          }
        });
      }
    } else {
      ArcheoEvents.broadcast(['cluster-strategy-change'], null, {
        config: clusterConfig
      });
    }
  });
  /* Change clustering distance setting */

  clusterSettingSliderEventSetup($('#clustering-slider').data("ionRangeSlider"), 'range', 'onFinish');
  /* Change clustering distance setting */

  clusterSettingSliderEventSetup($('#distance-slider').data("ionRangeSlider"), 'distance', 'onFinish');
  /* Change clusters at centroid placement setup */

  clusterConfigCheckboxEventSetup('#cluster-at-centroid', 'useCentroids', true);
  /* Change clusters at centroid placement setup */

  clusterRegionShowCheckboxEventSetup('#region-show', 'showRegions');
  /* Change clusters labels placement */

  clusterConfigRadiobuttonEventSetup('#region-label-position', 'labelPosition', false); // refresh = false

  /* Initialize session */

  initializeSessionLoadEvents();
}

function initializeSessionLoadEvents() {
  /* Session initialization events */
  $('#clustering-mode-select').on('session-load', function (event) {
    /* Save current values before they get overwritten by mode select */
    let rangeValue = ArcheoSession.get().clustering.features.range;
    let distanceValue = ArcheoSession.get().clustering.features.distance;
    let useCentroids = ArcheoSession.get().clustering.features.useCentroids;
    let showRegions = ArcheoSession.get().clustering.features.showRegions;
    let labelPosition = ArcheoSession.get().clustering.features.labelPosition;
    /* Initialize cluster at centroid */

    ArcheoUI.toggleCheckbox($('#cluster-at-centroid'), useCentroids);
    /* Initialize region show */

    ArcheoUI.toggleCheckbox($('#region-show'), showRegions);
    /* Initialize label position */

    ArcheoUI.toggleRadiobutton($('#region-label-position'), labelPosition);
    var $select = $(event.target);
    var methods = ArcheoSession.get().clustering.features.method;
    var values = [];
    if (ArcheoUtilities.isValidNonEmptyString(methods.distance)) values.push('distance__' + methods.distance);
    if (ArcheoUtilities.isValidNonEmptyString(methods.region)) values.push('region__' + methods.region);
    $('#clustering-slider').one("cluster-strategy-change", function () {
      $('#clustering-slider').data("ionRangeSlider").update({
        from: rangeValue
      });
    });
    $('#distance-slider').one("cluster-strategy-change", function () {
      $('#distance-slider').data("ionRangeSlider").update({
        from: distanceValue
      });
    });
    /* Update the select */

    $select.selectpicker('val', values);
  });
  /*$('#cluster-at-centroid').on('session-load', function(event) {
  	let $obj = $(event.target);
  	let state = ArcheoSession.get().clustering.features.useCentroids;
  		ArcheoUI.toggleCheckbox($obj, state);
  });
  
  $('#region-show').on('session-load', function(event) {
  	let $obj = $(event.target);
  	let state = ArcheoSession.get().clustering.features.showRegions;
  		ArcheoUI.toggleCheckbox($obj, state);
  });
  
  $('#region-label-position').on('session-load', function(event) {
  	let $obj = $(event.target);
  	let state = ArcheoSession.get().clustering.features.labelPosition;
  		ArcheoUI.toggleRadiobutton($obj, state);
  });*/
}

/* harmony default export */ const clustering = (initializeClusteringStrategyEvents);
;// CONCATENATED MODULE: ./views/pages/map/data/attributes.json
const attributes_namespaceObject = JSON.parse('{"RemainsAADR":{"":{},"sex":{"name":"Sex","entity":"Sex","selected":false},"haplogroup_y":{"name":"Haplogroup Y","entity":"HaplogroupY","type":"tree","selected":false},"haplogroup_mt":{"name":"Haplogroup Mt","entity":"HaplogroupMt","type":"tree","selected":false},"results":{"isOptgroup":true,"name":"Analysis results","options":{"admixture":{"name":"Admixture","entity":"Admixture","type":"admixture","selected":false}}}},"PersonAADR":{"":{},"sex":{"name":"Sex","entity":"Sex","selected":false},"haplogroup_y":{"name":"Haplogroup Y","entity":"HaplogroupY","type":"tree","selected":false},"haplogroup_mt":{"name":"Haplogroup Mt","entity":"HaplogroupMt","type":"tree","selected":false}},"PersonEMPOP":{"":{},"haplogroup_mt":{"name":"Haplogroup Mt","entity":"HaplogroupMt","type":"tree","selected":false}}}');
;// CONCATENATED MODULE: ./views/pages/map/data/attributesTypes.json
const attributesTypes_namespaceObject = JSON.parse('{"admixture":{"":{},"admixture_k2":{"name":"Admixture K=2","type":"admixture","selected":false},"admixture_k3":{"name":"Admixture K=3","type":"admixture","selected":false},"admixture_k4":{"name":"Admixture K=4","type":"admixture","selected":false},"admixture_k6":{"name":"Admixture K=6","type":"admixture","selected":false},"admixture_k7":{"name":"Admixture K=7","type":"admixture","selected":false},"admixture_k8":{"name":"Admixture K=8","type":"admixture","selected":false},"admixture_k9":{"name":"Admixture K=9","type":"admixture","selected":false},"admixture_k10":{"name":"Admixture K=10","type":"admixture","selected":false},"admixture_k11":{"name":"Admixture K=11","type":"admixture","selected":false},"admixture_k12":{"name":"Admixture K=12","type":"admixture","selected":false},"admixture_k13":{"name":"Admixture K=13","type":"admixture","selected":false},"admixture_k14":{"name":"Admixture K=14","type":"admixture","selected":false},"admixture_k16":{"name":"Admixture K=16","type":"admixture","selected":false},"admixture_k17":{"name":"Admixture K=17","type":"admixture","selected":false}}}');
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/attribute/tree-select.js


function ancestorSelectEvents() {
  let $ancestorSearchInput = $('#attribute-clustering-ancestors');
  let $ancestorSearchButton = $('#attribute-clustering-ancestors-button');
  let $selectValues = $('#select-attribute-cluster-browser');
  $ancestorSearchButton.on('click', function () {
    let treeIndex = $ancestorSearchInput.attr('searched-value');
    let attributesValuesIds = $selectValues.find('option:not(.hidden)').get().map(el => $(el).val());
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    promiseGetAncestorsAttributes(attributeEntity, attributesValuesIds, treeIndex).then(function (ancestors) {
      ancestors.forEach(ancestor => {
        $selectValues.find(`option:not(.hidden)[value="${ancestor.name}"]`).prop('selected', true); //$selectValues.find(`option:not(.hidden)[value="${ancestor.name}"]`).prop('selected', true);
      });
    });
  });
}

function descendantsSelectEvents() {
  let $descendantsSearchInput = $('#attribute-clustering-descendants');
  let $descendantsSearchButton = $('#attribute-clustering-descendants-button');
  let $selectValues = $('#select-attribute-cluster-browser');
  $descendantsSearchButton.on('click', function () {
    let treeIndex = $descendantsSearchInput.attr('searched-value');
    let attributesValuesIds = $selectValues.find('option:not(.hidden)').get().map(el => $(el).val());
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    promiseGetDescendantsAttributes(attributeEntity, attributesValuesIds, treeIndex).then(function (descendants) {
      descendants.forEach(descendant => {
        $selectValues.find(`option:not(.hidden)[value="${descendant.name}"]`).prop('selected', true); //$selectValues.find(`option:not(.hidden)[value="${descendant.name}"]`).prop('selected', true);
      });
    });
  });
}

function treeSelectEvents() {
  ancestorSelectEvents();
  descendantsSelectEvents();
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/attribute/utilities.js
function addGroupToLegend(legend, groupName) {
  if (!(groupName in legend)) {
    legend[groupName] = {
      name: groupName,
      filtered: false,
      color: ArcheoUtilities.randomRGBColorGenerator().toRgbString(),
      group: null
    };
  }

  if (!legend._groups.has(groupName)) {
    legend._groups.push(groupName);
  }
}

function updateBrowser() {
  let $selectAttribute = $('#select-cluster-attribute');
  let $selectAttributeType = $('#select-cluster-attribute-type');
  $selectAttribute.trigger('update');
  $selectAttributeType.trigger('update');
}

function resetGroupModyfing() {
  let $modifyGroup = $('#group-modify');
  let $removeGroups = $('#group-remove');
  let $selectValues = $('#select-attribute-cluster-browser');
  let $groupErrorText = $('#manage-group-error-text');
  let $modifyingMessage = $('#modifying-message-text');
  let $groupingButtonsPanel = $('#grouping-buttons-panel');
  $groupErrorText.text('');
  $selectValues.removeAttr('modifying');
  $modifyGroup.removeAttr('modifying');
  $modifyGroup.text('Modify group');
  $modifyGroup.removeClass('highlit');
  $modifyingMessage.text('');
  $removeGroups.removeAttr('disabled');
  $groupingButtonsPanel.addClass('hidden');
}

function activateGroupModyfing(groupName) {
  let $modifyGroup = $('#group-modify');
  let $removeGroups = $('#group-remove');
  let $selectValues = $('#select-attribute-cluster-browser');
  let $groupErrorText = $('#manage-group-error-text');
  let $modifyingMessage = $('#modifying-message-text');
  let $groupMessageText = $('#manage-group-message-text');
  let $groupingButtonsPanel = $('#grouping-buttons-panel');
  $groupErrorText.text('');
  $groupMessageText.text('');
  $selectValues.attr('modifying', groupName);
  $modifyGroup.attr('modifying', groupName);
  $modifyGroup.text('Apply edit');
  $modifyGroup.addClass('highlit');
  $modifyingMessage.text(`Modifying content of a group "${groupName}".`);
  $removeGroups.attr('disabled', '');
  $groupingButtonsPanel.removeClass('hidden');
}

function resetTreeSearch() {
  let $descendantsSearchInput = $('#attribute-clustering-descendants');
  let $ancestorSearchInput = $('#attribute-clustering-ancestors');
  $descendantsSearchInput.val('');
  $descendantsSearchInput.attr('searched-label', '');
  $descendantsSearchInput.attr('searched-value', '');
  $ancestorSearchInput.val('');
  $ancestorSearchInput.attr('searched-label', '');
  $ancestorSearchInput.attr('searched-value', '');
}

function toggleTreeSearch(attributeType, clusteringObjectName = 'attributes') {
  let $treeClusteringOptionsPanel = $('#tree-clustering-select-panel');
  if (attributeType === 'tree' && clusteringObjectName === 'attributes') $treeClusteringOptionsPanel.removeClass('hidden');else $treeClusteringOptionsPanel.addClass('hidden');
}

function resetClustering(triggerEvent = true) {
  let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
  let attributeId = clusteringConfig.attributeId;
  let attributeType = clusteringConfig.attributeType;

  if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
    let legend = ArcheoSession.getAttributeLegend(attributeId);
    let attributesLegend = ArcheoSession.getAttributeLegend(attributeId, true, false, true);
    let attributesValues = Object.keys(attributesLegend);

    for (var i = 0; i < attributesValues.length; ++i) {
      let value = attributesValues[i];
      legend[value].group = null;
    }

    legend._groups = [];
    if (triggerEvent) ArcheoEvents.broadcast('clustering-attribute-change', null, {
      attributeId: attributeId,
      attributeType: attributeType
    });
  }
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/attribute/tree-level.js



function treeLevelClusteringEvents() {
  let $treeLevelSlider = $('#attribute-clustering-tree-level-slider');
  $('#attribute-clustering-tree-level-button').on('click', function () {
    let treeLevel = $treeLevelSlider.data("from");
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let legend = ArcheoSession.getAttributeLegend(attributeId);
    let attributesValuesIds = Object.keys(ArcheoSession.getAttributeLegend(attributeId, true, false, true));
    /* Reset clustering */

    resetClustering(false);

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      let allAttributes = MapUtilities.getAttributesDict();
      let attributeEntity = allAttributes[attributeId].entity;
      let groupNamePrefix = $("#attribute-clustering-prefix").val();
      promiseGetAttributesByTreeLevel(attributeEntity, attributesValuesIds, treeLevel).then(function (ancestors) {
        for (var i = 0; i < ancestors.length; ++i) {
          let valueName = ancestors[i].name;
          let groupName = groupNamePrefix + ancestors[i].group; // Create new legend entry for the group, if it does not exists already //

          addGroupToLegend(legend, groupName); // Assign attributes to the group //

          if (valueName !== groupName && valueName in legend) legend[valueName].group = groupName;
        }

        ArcheoEvents.broadcast('clustering-attribute-change', null, {
          attributeId: attributeId,
          attributeType: attributeType
        });
      });
    }
  });
}

/* harmony default export */ const tree_level = (treeLevelClusteringEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/attribute/root-word.js


function initializeRootWordClusteringEvents() {
  let $rootWordButton = $('#attribute-clustering-root-word-input-button');
  $rootWordButton.on('click', function () {
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let legend = ArcheoSession.getAttributeLegend(attributeId); //let $selectValues = $('#select-attribute-cluster-browser');
    //let $selectedOptions = $selectValues.find(':selected:not(.hidden)');

    let attributesValuesIds = Object.keys(ArcheoSession.getAttributeLegend(attributeId, true, false, true));
    /* Reset clustering */

    resetClustering(false);
    let groupSet = new Set([]);
    let $rootWordSpinner = $('#attribute-clustering-root-word-input');
    let rootWordLength = parseInt($rootWordSpinner.val());
    attributesValuesIds.forEach(value => {
      let groupName = value.substring(0, rootWordLength);

      if (ArcheoUtilities.isValidNonEmptyString(groupName)) {
        groupSet.add(groupName); // Create new legend entry for the group, if it does not exists already //

        addGroupToLegend(legend, groupName); // Assign attributes to the group //

        if (value !== groupName && value in legend) legend[value].group = groupName;
      }
    }); //$groupMessageText.text(`Added ${attributesValuesCount} attribute's values to ${groupsCount} groups.`);

    ArcheoEvents.broadcast('clustering-attribute-change', null, {
      attributeId: attributeId,
      attributeType: attributeType
    });
  });
}

/* harmony default export */ const root_word = (initializeRootWordClusteringEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/attribute/index.js









function initializeNewGroupButton() {
  let $newGroupButton = $('#attribute-cluster-new-group-button');
  let $newGroupTextbox = $('#attribute-cluster-new-group');
  let $selectValues = $('#select-attribute-cluster-browser');
  let $groupErrorText = $('#new-group-error-text');
  let $groupMessageText = $('#new-group-message-text');
  $newGroupButton.on('click', function (event) {
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let legend = ArcheoSession.getAttributeLegend(attributeId);
    let groupName = $newGroupTextbox.val();
    $groupMessageText.text(''); // Add new group //

    if (ArcheoUtilities.isValidNonEmptyString(groupName)) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)'); // func(groupName, attributesValuesIds)

      if ($selectedOptions.length > 0) {
        $groupErrorText.text(''); //legend._groups.push( groupName );
        // Create new legend entry for the group, if it does not exists already //

        addGroupToLegend(legend, groupName); // Assign attributes to the group //

        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          if (value !== groupName && value in legend) legend[value].group = groupName;
        });
        let attributesValuesCount = $selectedOptions.length;
        $groupMessageText.text(`Added ${attributesValuesCount} attribute's values to "${groupName}" group.`);
      } else {
        $groupErrorText.text('To create a group you must select attributes, which will be assigned to it.');
      }
    } else {
      $groupErrorText.text('You must provide group\'s name.');
    }

    ArcheoEvents.broadcast('clustering-attribute-change', null, {
      attributeId: attributeId,
      attributeType: attributeType
    });
  });
}

function removeGroupsButton() {
  let $removeGroups = $('#group-remove');
  let $selectValues = $('#select-attribute-cluster-browser');
  let $groupErrorText = $('#manage-group-error-text');
  let $groupMessageText = $('#manage-group-message-text');
  $removeGroups.on('click', function (event) {
    $groupErrorText.text('');
    $groupMessageText.text('');
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let $selectedOptions = $selectValues.find(':selected:not(.hidden)');
    let attributes;
    if (attributeType === 'admixture') attributes = ArcheoSession.getAdmixtureLegend(attributeId, true);else attributes = ArcheoSession.getAttributeLegend(attributeId, true, false, true);
    let groupsList = ArcheoSession.getAttributeGroupsList(attributeId);

    if ($selectedOptions.length > 0) {
      var groupName;
      $selectedOptions.each(index => {
        groupName = $($selectedOptions[index]).val();
        /* Remove group from the list */

        groupsList.removeEl(groupName);
        /* Remove group pointer from all associated attributes */

        let attributesIds = Object.keys(attributes);

        for (var i = 0; i < attributesIds.length; ++i) {
          let attributeInfo = attributes[attributesIds[i]];
          if (attributeInfo.group === groupName) attributeInfo.group = null;
        }
      });
      let removedGroupsCount = $selectedOptions.length;
      if (removedGroupsCount > 0) $groupMessageText.text(`Removed ${removedGroupsCount} groups.`);else if (removedGroupsCount === 1) $groupMessageText.text(`Removed "${groupName}" group.`);
      ArcheoEvents.broadcast('clustering-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType
      });
    } else {
      $groupErrorText.text('No groups have been selected for removal.');
    }
  });
}

function modifyGroupButton() {
  let $modifyGroup = $('#group-modify');
  let $selectValues = $('#select-attribute-cluster-browser');
  let $groupErrorText = $('#manage-group-error-text');
  let $groupMessageText = $('#manage-group-message-text');
  $modifyGroup.on('click', function (event) {
    let $butt = $(event.target);
    let $buttText = $butt.find('.label');
    let isButtModifying = ArcheoUtilities.isValid($butt.attr('modifying'));
    $groupErrorText.text('');
    $groupMessageText.text('');
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let attributes;
    if (attributeType === 'admixture') attributes = ArcheoSession.getAdmixtureLegend(attributeId, true);else attributes = ArcheoSession.getAttributeLegend(attributeId, true, false, true);
    /* Apply changes */

    if (isButtModifying) {
      let $ungroupedOptions = $selectValues.find('.filtered');
      $ungroupedOptions.each(index => {
        let value = $($ungroupedOptions[index]).val();
        attributes[value].group = null;
      });
      let removedValuesCount = $ungroupedOptions.length;
      let groupName = $modifyGroup.attr('modifying');
      if (removedValuesCount > 0) $groupMessageText.text(`Removed ${removedValuesCount} attribute values from "${groupName}" group.`);else if (removedValuesCount === 0) $groupMessageText.text(`Group "${groupName}" has not been modified.`);
      resetGroupModyfing();
      ArcheoEvents.broadcast('clustering-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType
      });
    }
    /* Setup view for modifications */
    else {
        let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
        let $selectedOptions = $selectValues.find(':selected:not(.hidden)'); //let groupsList = ArcheoSession.getAttributeGroupsList(attributeId);

        if ($selectedOptions.length === 1) {
          let $selectedGroup = $($selectedOptions[0]);
          let groupName = $selectedGroup.val(); // it's only an id

          activateGroupModyfing(groupName);
          let groupsAttributes = {};
          let attributesIds = Object.keys(attributes);

          for (var i = 0; i < attributesIds.length; ++i) {
            let attributeId = attributesIds[i];
            let attributeInfo = attributes[attributeId];
            if (attributeInfo.group === groupName) groupsAttributes[attributeId] = attributeInfo; // Special case //

            if (attributeInfo.name == groupName) {
              attributeInfo.disabled = true;
              attributeInfo.title = "You can not exclude group's own value.";
              groupsAttributes[attributeId] = attributeInfo;
            }
          }

          ArcheoUI.setSelect($selectValues, groupsAttributes);
        } else if ($selectedOptions.length > 1) {
          $groupErrorText.text('You can modify only one group at the same time.');
        } else {
          $groupErrorText.text('No group has been selected for editing.');
        }
      }
  });
}

function initializeModifyingEvents() {
  let $selectValues = $('#select-attribute-cluster-browser');
  $selectValues.on('dblclick update', function (event) {
    let isModifyingActivated = ArcheoUtilities.isValid($selectValues.attr('modifying'));

    if (isModifyingActivated) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)');
      let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeClustering');
      let attributeId = clusteringConfig.attributeId;
      let attributeType = clusteringConfig.attributeType;
      let legend = ArcheoSession.getAttributeLegend(attributeId);
      let selectedCount = $selectedOptions.length;
      let filteredCount = $selectedOptions.filter('.filtered').length;

      if (filteredCount / selectedCount >= 0.5) {
        $selectedOptions.removeClass('filtered');
      } else {
        $selectedOptions.addClass('filtered');
      }
    }
  });
}

function initializeAttributesSelectButtons() {
  let $selectAllButt = $('#attribute-cluster-select-all');
  let $unselectAllButt = $('#attribute-cluster-unselect-all');
  let $selectValues = $('#select-attribute-cluster-browser');

  let filterButtonFunction = function (doSelect) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');

      if (doSelect) {
        $selectedOptions.prop('selected', true);
      } else {
        $selectedOptions.prop('selected', false);
      }
    };
  };

  $selectAllButt.on('click', filterButtonFunction(true));
  $unselectAllButt.on('click', filterButtonFunction(false));
  let $selectInvert = $('#attribute-cluster-select-invert');
  $selectInvert.on('click', function () {
    let $allOptions = $selectValues.find('option:not(.hidden:selected)');
    let $selectedOptions = $selectValues.find('option:not(.hidden):selected');
    $allOptions.prop('selected', true);
    $selectedOptions.prop('selected', false);
  });
} // #grouping-buttons-panel


function initializeAttributesFilterButtons() {
  let $groupAllButt = $('#attribute-cluster-group-all');
  let $ungroupAllButt = $('#attribute-cluster-ungroup-all');
  let $selectValues = $('#select-attribute-cluster-browser');

  let filterButtonFunction = function (doFilterOut) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');
      if (doFilterOut) $selectedOptions.removeClass('filtered');else $selectedOptions.addClass('filtered');
    };
  };

  $groupAllButt.on('click', filterButtonFunction(true));
  $ungroupAllButt.on('click', filterButtonFunction(false));
}

function initializeUseRegexEvent() {
  let $groupFilterRegexCheckbox = $('#group-cluster-regex');
  let $groupSearch = $('#cluster-group-search');
  $groupFilterRegexCheckbox.on('click update', function (event) {
    let value = $groupFilterRegexCheckbox.hasClass('active');
    if (event.type === 'click') value = !value; // negation applied intentionally

    let placeholder = $groupSearch.attr('placeholder');
    placeholder = placeholder.replace("...", "").replace(" by regex", "");

    if (value) {
      $groupSearch.attr('placeholder', `${placeholder} by regex...`);
      $groupSearch.attr('regex', "");
      $groupSearch.val('');
    } else {
      $groupSearch.attr('placeholder', `${placeholder}...`);
      $groupSearch.removeAttr('regex');
      $groupSearch.val('');
    }
  });
}

function initializeSearchEvents() {
  let $selectValues = $('#select-attribute-cluster-browser');
  let $groupsSearch = $('#cluster-group-search');
  $groupsSearch.on('input', function (event) {
    let $search = $(event.target);
    let searchValue = $(event.target).val();
    let doUseRegex = ArcheoUtilities.isValid($search.attr('regex'));
    $selectValues.find('option').filter(async function (index) {
      let $this = $(this);
      let optionValue = $this.val();
      let isMatched;

      try {
        if (doUseRegex) isMatched = optionValue.match(new RegExp(`${searchValue}`));else isMatched = optionValue.match(new RegExp(`^${ArcheoUtilities.escapeRegex(searchValue)}`));
      } catch (error) {
        isMatched = false;
      }

      if (!isMatched) $this.addClass('hidden');else $this.removeClass('hidden');
    });
  });
}

function initializeBrowserEvents() {
  let $groupsPanel = $('#attributes-clustering-group-panel');
  let $attributesPanel = $('#attributes-clustering-attribute-panel');
  let $groupSearch = $('#cluster-group-search');
  $('#attributes-clustering-object').on('change update', 'input', null, function (event) {
    var $input = $(event.target);
    var browsedObject = $input.attr('value');

    if (browsedObject === 'attributes') {
      $groupSearch.attr('placeholder', `Filter values`);
      $attributesPanel.removeClass('hidden');
      $groupsPanel.addClass('hidden');
      resetGroupModyfing();
    } else if (browsedObject === 'groups') {
      $groupSearch.attr('placeholder', `Filter groups`);
      $groupsPanel.removeClass('hidden');
      $attributesPanel.addClass('hidden');
    }
    /* Update search placeholder */


    $('#group-cluster-regex').trigger("update");
    updateBrowser();
  });
}

function initializeAttributeSelectEvents() {
  let $selectAttribute = $('#select-cluster-attribute');
  let $selectAttributeType = $('#select-cluster-attribute-type');
  let $selectValues = $('#select-attribute-cluster-browser');
  let $clusteringObject = $("#attributes-clustering-object");
  let $ancestorSearchInput = $('#attribute-clustering-ancestors');
  let $descendantsSearchInput = $('#attribute-clustering-descendants');
  let $resetButton = $('#attribute-clustering-reset');

  const attributeChangeEventFunction = function (event) {
    /* Update cache on interface event */
    var $select = $(event.target);

    if (event.type === 'changed') {
      let attributeId = $select.val();

      if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
        if (!(attributeId in attributesTypes_namespaceObject)) {
          $('#attribute-grouping-wrapper').removeClass('hidden');
        } else {
          $('#attribute-grouping-wrapper').addClass('hidden');
        }
      } else $('#attribute-grouping-wrapper').addClass('hidden');

      ArcheoCache.setTemporaryEntry('attributeClustering', {
        attributeId: $select.val(),
        attributeName: $select.find(':selected').val(),
        attributeType: $select.find(':selected').attr('type')
      });
    }

    let cache = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = cache.attributeId;
    let attributeType = cache.attributeType;

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
        let params = {
          attributeId: attributeId,
          attributeType: attributeType,
          eventType: event.type
        };
        ArcheoRequests.incorporateAttributes(params).then(() => {
          $select.trigger('update', params);
        });
      }
    }
  };

  const updateUI = function (event, data) {
    let cache = ArcheoCache.getTemporaryEntry('attributeClustering');
    let attributeId = cache.attributeId;
    let attributeName = cache.attributeName;
    let attributeType = cache.attributeType;
    let clusteringObjectName = $clusteringObject.find("input:checked").val();
    resetGroupModyfing();
    let attributeChangeEvent = ArcheoUtilities.isValid(data) ? data.eventType : event.type;

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      var $select = $(event.target);
      /* Update UI */

      if (attributeChangeEvent === 'changed') {
        let typesWrapper = $select.parent().next();

        if (attributeId in attributesTypes_namespaceObject) {
          typesWrapper.removeClass('d-none');
          ArcheoUI.setSelectpicker($selectAttributeType, attributesTypes_namespaceObject[attributeId], true); // Reset UI //
          //$treeLevelPanel.addClass('hidden');

          return;
        } else {
          typesWrapper.addClass('d-none');
        } //alert('attributeId');
        //alert(attributeId);

        /* Handle tree type options */


        if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
          resetTreeSearch();
          initializeTreeSearch($ancestorSearchInput, attributeId);
          initializeTreeSearch($descendantsSearchInput, attributeId);
          $resetButton.removeAttr('disabled'); //alert(attributeType);
          //alert(clusteringObjectName);

          updateTreeLevelSlider($('#tree-level-clustering'), $('#attribute-clustering-tree-level-slider'), attributeId, attributeType);
        } else {
          $resetButton.attr('disabled', '');
        }
      }
      /* Fix for hiding tree search when switching to groups */


      toggleTreeSearch(attributeType, clusteringObjectName);
      let attributesDict;

      if (attributeType === 'admixture') {
        attributesDict = ArcheoSession.getAdmixtureLegend(attributeId, true, true, true);
        delete attributesDict.OTHER;
        delete attributesDict.MISSING;
      } else attributesDict = ArcheoSession.getAttributeLegend(attributeId, true, false, true);

      let groups = ArcheoSession.getAttributeGroupsLegend(attributeId);

      if (clusteringObjectName === 'attributes') {
        /* Filter out grouped attributes */
        attributesDict = ArcheoUtilities.filterObject(attributesDict, ([key]) => !ArcheoUtilities.isValid(attributesDict[key].group) && !(key in groups));
      } else if (clusteringObjectName === 'groups') {
        attributesDict = groups;
      }

      ArcheoUI.setSelect($selectValues, attributesDict);
      $selectValues.attr('attributeId', attributeId);
      $selectValues.attr('attributeType', attributeType);
      ArcheoCache.setTemporaryEntry('attributeClustering', {
        attributeId: attributeId,
        attributeType: attributeType
      });
    }
  };
  /* Change layer attribute */


  $selectAttribute.on('changed.bs.select dataset-add dataset-remove', attributeChangeEventFunction);
  $selectAttribute.on('clustering-attribute-change update', updateUI);
  /* Change layer attribute type if available */

  $selectAttributeType.on('changed.bs.select dataset-add dataset-remove', attributeChangeEventFunction);
  $selectAttributeType.on('clustering-attribute-change update', updateUI);
}

function resetButtonEvents() {
  let $resetButton = $('#attribute-clustering-reset');
  $resetButton.on('click', resetClustering);
}

function initializeAttributeClusteringEvents() {
  initializeAttributeSelectEvents();
  initializeBrowserEvents();
  initializeSearchEvents();
  initializeUseRegexEvent();
  initializeAttributesSelectButtons();
  initializeAttributesFilterButtons();
  initializeNewGroupButton();
  initializeModifyingEvents();
  removeGroupsButton();
  modifyGroupButton();
  treeSelectEvents();
  tree_level();
  root_word();
  resetButtonEvents();
}

/* harmony default export */ const attribute = (initializeAttributeClusteringEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/features/distance-slider.js
function changeClusterConfigEvent() {
  $('#features-clustering').on('cluster-strategy-change', function (event, data) {
    var $obj = $(event.target);
    let sliderObj = $obj.find('#clustering-slider').data("ionRangeSlider");
    let distanceSliderObj = $obj.find('#distance-slider').data("ionRangeSlider");

    if (ArcheoUtilities.isValid(sliderObj)) {
      var resolution = ArcheoMap.getMap().getView().getResolution();
      var oldDistance = sliderObj.result.from;
      var oldMinInBetweenDistance = distanceSliderObj.result.from;

      if (!ArcheoUtilities.isValid(data.config.method.distance)) {
        let params = {
          block: true
        };
        sliderObj.update(params);
        distanceSliderObj.update(params);
      } else if (data.config.method.distance.endsWith('relative')) {
        let minDistance = 0;
        let maxDistance = 1000;

        if (sliderObj.options.postfix === 'km') {
          oldDistance = oldDistance * 1000 / resolution; // since distance is in kms and resolution is in meters

          oldMinInBetweenDistance = oldMinInBetweenDistance * 1000 / resolution;
        }

        let distance = ArcheoUtilities.limit(oldDistance, minDistance, maxDistance);
        let minInBetweenDistance = ArcheoUtilities.limit(oldMinInBetweenDistance, minDistance, distance);
        let params = {
          min: minDistance,
          max: maxDistance,
          block: false,
          postfix: 'px'
        };
        sliderObj.update({ ...params,
          from: distance
        }); //distanceSliderObj.update({...params, from_max: distance, from: minInBetweenDistance});
      } else if (data.config.method.distance.endsWith('absolute')) {
        let minDistance = 0;
        let maxDistance = 10000;

        if (sliderObj.options.postfix === 'px') {
          oldDistance = oldDistance * resolution / 1000; // since distance is in kms and resolution is in meters

          oldMinInBetweenDistance = oldMinInBetweenDistance * resolution / 1000;
        }

        let distance = ArcheoUtilities.limit(oldDistance, minDistance, maxDistance);
        let minInBetweenDistance = ArcheoUtilities.limit(oldMinInBetweenDistance, minDistance, distance);
        let params = {
          min: minDistance,
          max: maxDistance,
          block: false,
          postfix: 'km'
        };
        sliderObj.update({ ...params,
          from: distance
        }); //distanceSliderObj.update({...params, from_max: distance, from: minInBetweenDistance});
        // Abs: the range is 5000 (=5km) - 5 000 000 (=5 000 km)
      }
    }
  });
}
/*function changeClusterRangeEvent() {
    $('#features-clustering').on('cluster-range-change', function(event, data) {
        var $obj = $(event.target);
        var range = data.value;
        
        let distanceSliderObj = $obj.find('#distance-slider').data("ionRangeSlider");
        distanceSliderObj.update({ from_max: range });
    });
}*/


function distanceSliderRangeEvents() {
  changeClusterConfigEvent(); //changeClusterRangeEvent();
}

/* harmony default export */ const distance_slider = (distanceSliderRangeEvents);
// EXTERNAL MODULE: ./node_modules/tinygradient/browser.js
var browser = __webpack_require__(1349);
var browser_default = /*#__PURE__*/__webpack_require__.n(browser);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/color.js


function changeLayerColorEvent() {
  $('html').on('layer-color-change', '.layer', function (event, data) {
    var $layer = $(event.target);
    var layerId = $layer.attr('id');

    if (data.layerId === layerId) {
      var $el = $layer.find('.accordion-wrapper');
      $el.css('border-color', data.value);
      $el.css('border-image', 'none');
      /* Change input color button as well just to synchronize it with legend color picker */

      $layer.find('.layer-color-input .color').css('background-color', data.value);
    }
  });
}

function changeLayerGradientEvent() {
  $('html').on('layer-gradient-change', '.layer', function (event, data) {
    var $layer = $(event.target);
    var layerId = $layer.attr('id');

    if (data.layerId === layerId) {
      /* Update grapick object */
      let gradientInput = $($layer.find('.layer-gradient-input')[0]);
      let gradientInputObj = gradientInput.prop('grapick');
      ArcheoUI.setGradientValue(gradientInputObj, data.value);
    }
  });
  $('html').on('layer-gradient-change', '.layer-header', function (event, data) {
    var $layerHeader = $(event.target);
    var $layerWrapper = $layerHeader.parent();
    var $layer = $layerHeader.parents('.layer');
    var layerId = $layer.attr('id');

    if (data.layerId === layerId) {
      /* Change accordion highlight */
      let cssGradient = browser_default()(data.value).css();
      $layerWrapper.css('border-image', cssGradient);
      $layerWrapper.css('border-image-slice', '1'); // $layer.find('.layer-color-input .color').css('border-image', cssGradient);
    }
  });
}

function initializeLayerColorChangeEvents() {
  changeLayerColorEvent();
  changeLayerGradientEvent();
}

/* harmony default export */ const color = (initializeLayerColorChangeEvents);
;// CONCATENATED MODULE: ./views/pages/map/data/groups.json
const groups_namespaceObject = JSON.parse('{"special":{"isOptgroup":true,"name":"Special attributes","options":{"MISSING":{"name":"missing","filtered":false},"OTHER":{"name":"other","filtered":false}}},"attributes":{"isOptgroup":true,"name":"Data attributes","options":{}}}');
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/utilities.js
/* These are layer types which require substential amount of computation upon renderering */
//var HEAVY_LOAD_TYPES = new Set(['tag']);
function layerConfigSliderEventSetup(sliderObj, layerId, layerType, configName, callerName = 'onChange', refresh = false) {
  $(sliderObj.input).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      //sliderObj.update({});

      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      if (ArcheoUtilities.isArray(sessionValue)) sliderObj.update({
        from: sessionValue[0],
        to: sessionValue[1]
      });else sliderObj.update({
        from: sessionValue
      });
    }
  });

  var eventFunction = async function (data) {
    var config = {};
    if (sliderObj.options.type === 'double') config[configName] = [data.from, data.to];else config[configName] = data.from;
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config,
      refresh: refresh
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
}

function layerConfigSpinnerEventSetup($spinner, layerId, layerType, configName, refresh = false) {
  $spinner.on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      $spinner.spinner("value", sessionValue);
    }
  });
  $spinner.on('spinchange spinstop', function (event, data) {
    var config = {};
    var spinnerValue = $spinner.spinner("value");

    if (ArcheoUtilities.isValid(spinnerValue)) {
      config[configName] = spinnerValue;
      $spinner.attr('last-value', spinnerValue);
      ArcheoEvents.broadcast('layer-config-change', null, {
        layerId: layerId,
        value: config,
        refresh: refresh
      });
    } else {
      $spinner.spinner('value', $spinner.attr('last-value'));
    }
  });
}

function layerAngleEventSetup(sliderObj, layerId, layerType, configName, callerName = 'onChange') {
  $(sliderObj.input).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      //sliderObj.update({});

      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      sliderObj.anglePicker("setValue", sessionValue);
    }
  });

  var eventFunction = async function (event, data) {
    var config = {};
    config[configName] = data.value;
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config
    });
  };

  sliderObj.anglePicker({
    change: eventFunction
  });
}

function layerConfigCheckboxEventSetup(checkboxObj, layerId, layerType, configName, refresh = false) {
  $(checkboxObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      if (sessionValue) $(checkboxObj).addClass('active');else $(checkboxObj).removeClass('active'); //$(checkboxObj).trigger('update');
    }
  });
  $(checkboxObj).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(checkboxObj).hasClass('active'); // negation applied intentionally
    else config[configName] = $(checkboxObj).hasClass('active');
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config,
      refresh: refresh
    });
  });
}

function layerColorToggleCheckboxEventSetup(checkboxObj, layerId, layerType, configName) {
  $(checkboxObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      if (sessionValue) $(checkboxObj).addClass('active');else $(checkboxObj).removeClass('active'); //$(checkboxObj).trigger('update');
    }
  });
  $(checkboxObj).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(checkboxObj).hasClass('active'); // negation applied intentionally
    else config[configName] = $(checkboxObj).hasClass('active');
    ArcheoEvents.broadcast(['layer-config-change', 'layer-visibility-change'], null, {
      layerId: layerId,
      value: config,
      refreshRegions: true
    });
  });
}

function layerConfigRadiobuttonEventSetup(radiobuttonWrapper, layerId, layerType, configName, refresh = false) {
  $(radiobuttonWrapper).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) $(checkboxObj).find("[checked='']").trigger('update');
  });
  $(radiobuttonWrapper).on('change update', 'input', null, function (event) {
    var $input = $(event.target);
    let config = {};
    config[configName] = $input.attr('value');
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config,
      refresh: refresh
    });
  });
}

function layerSettingSliderEventSetup(sliderObj, layerId, layerType, settingName, callerName = 'onChange') {
  $(sliderObj.input).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      sliderObj.update({});
    }
  });

  var eventFunction = async function (data) {
    let value;
    if (sliderObj.options.type === 'double') value = [data.from, data.to];else value = data.from;
    ArcheoEvents.broadcast('layer-setting-change', null, {
      layerId: layerId,
      setting: settingName,
      value: value
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
}

function layerConfigSelectEventSetup(selectObj, layerId, layerType, configName, refresh = false) {
  $(selectObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      selectObj.trigger('changed.bs.select');
    }
  });
  $(selectObj).on('changed.bs.select', function (event) {
    var config = {};
    config[configName] = selectObj.val();
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config,
      refresh: refresh
    });
  });
}

function layerConfigColorPickEventSetup(colorPickerObj, layerId, notLayerType, callerName = 'move', refresh = false) {
  $(colorPickerObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(notLayerType) || data.value !== notLayerType)) {
      let currentColor = colorPickerObj.spectrum('get');
      colorPickerObj.trigger(`${callerName}.spectrum`, [currentColor]);
    }
  });
  colorPickerObj.on(`${callerName}.spectrum change.spectrum`, function (e, color) {
    let rgbColor = color.toRgbString();
    ArcheoEvents.broadcast('layer-color-change', null, {
      layerId: layerId,
      value: rgbColor,
      refresh: refresh
    });
  });
  /* Initialy run event to synchronize UI with layer config */

  $(colorPickerObj).trigger('layer-type-change', [{
    layerId: layerId
  }]);
} // handler:color:change
// handler:drag:end
// layerGradientInput


function layerConfigGradientPickEventSetup(gradientPicker, layerId, layerType, refresh = false) {
  let gradientEl = $(gradientPicker.el);
  gradientEl.on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      gradientPicker.change();
    }
  });

  var changeFunction = function (handler) {
    var gradientColor = gradientPicker.getColorValue(); //var gradientCss = gradientPicker.getValue();

    if (ArcheoUtilities.isValidNonEmptyString(gradientColor)) {
      //var rgbColors = gradientColor.split('%, ');
      ArcheoEvents.broadcast('layer-gradient-change', '.layer', {
        layerId: layerId,
        value: ArcheoUtilities.gradientToArray(gradientColor),
        refresh: refresh
      });
    }
  };

  gradientPicker.on(`change`, changeFunction);
  gradientPicker.on(`handler:color:change`, changeFunction);
  gradientPicker.on(`handler:drag:end`, changeFunction);
  gradientPicker.on(`handler:remove`, changeFunction);
  gradientPicker.on(`handler:add`, changeFunction);
}

function sizeSliderSettingSetup($obj, params = {}) {
  return ArcheoUI.initializeSlider($obj, {
    min: 10,
    max: 100,
    from: 20,
    step: 1,
    type: 'single',
    postfix: 'px',
    drag_interval: true,
    ...params
  });
}

function getDataSourceAttributeValues(datasetId, layerId, attributeId, attributeType) {
  //let features = ArcheoMap.getDataSourceFeatures(datasetId);
  var features = ArcheoCache.getDatasetFeatures(datasetId);
  var attributesValues = new Set();

  if (attributeType === "admixture") {
    /* Update decoration for every feature */
    let componentsCount;
    features.forEach(feature => {
      var decoration = ArcheoMap.setupFeatureAttributesData(feature, layerId);
      componentsCount = decoration.attributeCount;
    });
    let valuesArray = [];

    for (var i = 1; i < componentsCount + 1; ++i) valuesArray.push(`k #${i}`);

    return valuesArray;
  } else {
    features.forEach(feature => {
      /* Change to decoration */
      let decoration = ArcheoMap.setupFeatureAttributesData(feature, layerId);
      let value = decoration.attributeValue;
      if (ArcheoUtilities.isValid(value) && value !== 'MISSING') attributesValues.add(value);
    });
    return Array.from(attributesValues);
  }
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/initialize-layer-types-settings.js


function setPointSettingsEvents(elementsDict, layerId) {
  /* Appearance */
  layerConfigCheckboxEventSetup(elementsDict.bodyToggleCheckbox, layerId, 'point', 'bodyToggle');
  layerConfigSliderEventSetup(elementsDict.outlineSlider, layerId, 'point', 'outlineSizeRatio', 'onFinish');
  layerConfigSliderEventSetup(elementsDict.fillSlider, layerId, 'point', 'backgroundSizeRatio', 'onFinish');
}

function setPointSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Body toggle */

  var bodyToggleCheckboxId = layerId + '_point-appearance-body';
  var $bodyToggleCheckbox = newLayerElement.find('#point-appearance-body');
  $bodyToggleCheckbox.attr('name', bodyToggleCheckboxId);
  $bodyToggleCheckbox.attr('id', bodyToggleCheckboxId);
  ArcheoUI.toggleCheckbox($bodyToggleCheckbox, layerConfig.style.bodyToggle); // Outline

  var outlineSliderId = layerId + '_point-appearance-outline-size';
  var $outlineSlider = newLayerElement.find('#point-appearance-outline-size');
  $outlineSlider.attr('name', outlineSliderId);
  $outlineSlider.attr('id', outlineSliderId);
  var outlineSliderObj = ArcheoUI.initializeSlider($outlineSlider, {
    min: 0,
    max: 6.,
    from: layerConfig.style.outlineSizeRatio,
    step: 0.01,
    type: 'single',
    extra_classes: 'point-appearance-outline-size'
  }); // Fill

  var fillSliderId = layerId + '_point-appearance-body-size';
  var $fillSlider = newLayerElement.find('#point-appearance-body-size');
  $fillSlider.attr('name', fillSliderId);
  $fillSlider.attr('id', fillSliderId);
  var fillSliderObj = ArcheoUI.initializeSlider($fillSlider, {
    min: 0,
    max: 6.,
    from: layerConfig.style.backgroundSizeRatio,
    // get from session
    step: 0.01,
    type: 'single',
    extra_classes: 'point-appearance-body-size'
  });
  setPointSettingsEvents({
    'bodyToggleCheckbox': $bodyToggleCheckbox,
    'outlineSlider': outlineSliderObj,
    'fillSlider': fillSliderObj
  }, layerId);
}

function setPiechartSettingsEvents(elementsDict, layerId) {
  layerConfigRadiobuttonEventSetup(elementsDict.labelAppearanceRadiobutton, layerId, 'piechart', 'piechartLabelsAppearance', true);
  layerConfigCheckboxEventSetup(elementsDict.labelCountDataCheckbox, layerId, 'piechart', 'piechartLabelsShowCountData', true);
  layerConfigCheckboxEventSetup(elementsDict.labelPercentCheckbox, layerId, 'piechart', 'piechartLabelsShowPercent', true);
  layerConfigSliderEventSetup(elementsDict.labelSizeSlider, layerId, 'piechart', 'piechartLabelsSizeRatio', 'onFinish', true);
  layerConfigSliderEventSetup(elementsDict.labelOffsetSlider, layerId, 'piechart', 'piechartLabelsOffsetRatio', 'onFinish', true);
}

function setPiechartSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Labels appearance options */

  var labelAppearanceRadiobuttonId = layerId + '_piechart-label-appearance';
  var $labelAppearanceRadiobutton = newLayerElement.find('#piechart-label-appearance');
  $labelAppearanceRadiobutton.attr('name', labelAppearanceRadiobuttonId);
  $labelAppearanceRadiobutton.attr('id', labelAppearanceRadiobuttonId);
  $labelAppearanceRadiobutton.find('input').attr('name', labelAppearanceRadiobuttonId);
  $labelAppearanceRadiobutton.find(`input[value=${layerConfig.style.piechartLabelsAppearance}]`).click();
  /* Labels show count data */

  var labelCountDataCheckboxId = layerId + '_piechart-label-count-toggle';
  var $labelCountDataCheckbox = newLayerElement.find('#piechart-label-count-toggle');
  $labelCountDataCheckbox.attr('name', labelCountDataCheckboxId);
  $labelCountDataCheckbox.attr('id', labelCountDataCheckboxId);
  if (!ArcheoUtilities.isValid(layerConfig.style.piechartLabelsShowCountData)) layerConfig.style.piechartLabelsShowCountData = true;
  ArcheoUI.toggleCheckbox($labelCountDataCheckbox, layerConfig.style.piechartLabelsShowCountData);
  /* Labels percetanges */

  var labelPercentCheckboxId = layerId + '_piechart-label-percent';
  var $labelPercentCheckbox = newLayerElement.find('#piechart-label-percent');
  $labelPercentCheckbox.attr('name', labelPercentCheckboxId);
  $labelPercentCheckbox.attr('id', labelPercentCheckboxId);
  ArcheoUI.toggleCheckbox($labelPercentCheckbox, layerConfig.style.piechartLabelsShowPercent);
  /* Labels size ratio */

  var labelSizeSliderId = layerId + '_piechart-label-size';
  var $labelSizeSlider = newLayerElement.find('#piechart-label-size');
  $labelSizeSlider.attr('name', labelSizeSliderId);
  $labelSizeSlider.attr('id', labelSizeSliderId);
  var labelSizeSliderObj = ArcheoUI.initializeSlider($labelSizeSlider, {
    min: 0,
    max: 3,
    from: layerConfig.style.piechartLabelsSizeRatio,
    step: 0.01,
    type: 'single' //extra_classes: 'piechart-label-size'

  });
  /* Labels offset ratio */

  var labelOffsetSliderId = layerId + '_piechart-label-offset';
  var $labelOffsetSlider = newLayerElement.find('#piechart-label-offset');
  $labelOffsetSlider.attr('name', labelOffsetSliderId);
  $labelOffsetSlider.attr('id', labelOffsetSliderId);
  var labelOffsetSliderObj = ArcheoUI.initializeSlider($labelOffsetSlider, {
    min: 0,
    max: 5,
    from: layerConfig.style.piechartLabelsOffsetRatio,
    step: 0.01,
    type: 'single' //extra_classes: 'piechart-others-slider',

  });
  setPiechartSettingsEvents({
    'labelAppearanceRadiobutton': $labelAppearanceRadiobutton,
    'labelPercentCheckbox': $labelPercentCheckbox,
    'labelSizeSlider': labelSizeSliderObj,
    'labelOffsetSlider': labelOffsetSliderObj,
    'labelCountDataCheckbox': $labelCountDataCheckbox
  }, layerId);
}

function setHeatmapSettingsEvents(elementsDict, layerId) {
  layerSettingSliderEventSetup(elementsDict.radiusSlider, layerId, 'heatmap', 'radius');
  layerSettingSliderEventSetup(elementsDict.blurSlider, layerId, 'heatmap', 'blur');
}

function setHeatmapSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Heatmap radius */

  var radiusSliderId = layerId + '_heatmap-radius';
  var $radiusSlider = newLayerElement.find('#heatmap-radius');
  $radiusSlider.attr('name', radiusSliderId);
  $radiusSlider.attr('id', radiusSliderId);
  var radiusSliderObj = sizeSliderSettingSetup($radiusSlider, {
    from: layerConfig.settings.radius,
    min: 1,
    max: 1000
  });
  /* Heatmap blur setting */

  var blurSliderId = layerId + '_heatmap-blur';
  var $blurSlider = newLayerElement.find('#heatmap-blur');
  $blurSlider.attr('name', blurSliderId);
  $blurSlider.attr('id', blurSliderId);
  var blurSliderObj = sizeSliderSettingSetup($blurSlider, {
    from: layerConfig.settings.blur,
    min: 1,
    max: 1000
  });
  setHeatmapSettingsEvents({
    'blurSlider': blurSliderObj,
    'radiusSlider': radiusSliderObj
  }, layerId);
  /* Initialize blur size */
  // It is initialized inside layerChange function
}

function setTagSettingsEvents(elementsDict, layerId) {
  /* Appearance */
  layerConfigCheckboxEventSetup(elementsDict.dotsCheckbox, layerId, 'tag', 'showFullStop');
  layerConfigSliderEventSetup(elementsDict.outlineSlider, layerId, 'tag', 'outlineSizeRatio', 'onFinish');
  layerConfigSliderEventSetup(elementsDict.fillSlider, layerId, 'tag', 'backgroundSizeRatio', 'onFinish');
  layerConfigSliderEventSetup(elementsDict.paddingSlider, layerId, 'tag', 'padding', 'onFinish');
  layerConfigSliderEventSetup(elementsDict.seedSlider, layerId, 'tag', 'seed', 'onFinish');
  layerConfigRadiobuttonEventSetup(elementsDict.strategyRadiobutton, layerId, 'tag', 'strategy');
}

function setTagSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Tag appearance elements */
  // Dots

  var dotsCheckboxId = layerId + '_tag-appearance-dots';
  var $dotsCheckbox = newLayerElement.find('#tag-appearance-dots');
  $dotsCheckbox.attr('name', dotsCheckboxId);
  $dotsCheckbox.attr('id', dotsCheckboxId);
  ArcheoUI.toggleCheckbox($dotsCheckbox, layerConfig.style.showFullStop); // Outline

  var outlineSliderId = layerId + '_tag-appearance-outline-size';
  var $outlineSlider = newLayerElement.find('#tag-appearance-outline-size');
  $outlineSlider.attr('name', outlineSliderId);
  $outlineSlider.attr('id', outlineSliderId);
  var outlineSliderObj = ArcheoUI.initializeSlider($outlineSlider, {
    min: 0,
    max: 6.,
    from: layerConfig.style.outlineSizeRatio,
    step: 0.01,
    type: 'single',
    extra_classes: 'tag-appearance-outline-size'
  }); // Fill

  var fillSliderId = layerId + '_tag-appearance-fill-size';
  var $fillSlider = newLayerElement.find('#tag-appearance-fill-size');
  $fillSlider.attr('name', fillSliderId);
  $fillSlider.attr('id', fillSliderId);
  var fillSliderObj = ArcheoUI.initializeSlider($fillSlider, {
    min: 0,
    max: 6.,
    from: layerConfig.style.backgroundSizeRatio,
    // get from session
    step: 0.01,
    type: 'single',
    extra_classes: 'tag-appearance-fill-size'
  }); // Padding

  var paddingSliderId = layerId + '_tag-appearance-padding';
  var $paddingSlider = newLayerElement.find('#tag-appearance-padding');
  $paddingSlider.attr('name', paddingSliderId);
  $paddingSlider.attr('id', paddingSliderId);
  var paddingSliderObj = ArcheoUI.initializeSlider($paddingSlider, {
    min: .01,
    max: 0.6,
    from: layerConfig.style.padding,
    // get from session
    step: .01,
    type: 'single',
    extra_classes: 'tag-appearance-padding'
  }); // Seed

  var seedSliderId = layerId + '_tag-appearance-seed';
  var $seedSlider = newLayerElement.find('#tag-appearance-seed');
  $seedSlider.attr('name', seedSliderId);
  $seedSlider.attr('id', seedSliderId);
  var seedSliderObj = ArcheoUI.initializeSlider($seedSlider, {
    min: .01,
    max: 3,
    from: layerConfig.style.seed,
    // get from session
    step: .01,
    type: 'single',
    extra_classes: 'tag-appearance-seed'
  }); // Placement strategy

  var strategyRadiobuttonId = layerId + '_tag-appearance-strategy';
  var $strategyRadiobutton = newLayerElement.find('#tag-appearance-strategy');
  $strategyRadiobutton.attr('name', strategyRadiobuttonId);
  $strategyRadiobutton.attr('id', strategyRadiobuttonId);
  $strategyRadiobutton.find('input').attr('name', strategyRadiobuttonId);
  $strategyRadiobutton.find(`input[value=${layerConfig.style.strategy}]`).click();
  setTagSettingsEvents({
    'dotsCheckbox': $dotsCheckbox,
    'outlineSlider': outlineSliderObj,
    'fillSlider': fillSliderObj,
    'paddingSlider': paddingSliderObj,
    'seedSlider': seedSliderObj,
    'strategyRadiobutton': $strategyRadiobutton
  }, layerId);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/components/tree-select.js


function tree_select_ancestorSelectEvents(elementsDic, layerId) {
  let $ancestorSearchInput = elementsDic.ancestorsInput;
  let $ancestorSearchButton = elementsDic.ancestorsButt;
  let $selectValues = elementsDic.browser;
  $ancestorSearchButton.on('click', function () {
    let treeIndex = $ancestorSearchInput.attr('searched-value');
    let attributesValuesIds = $selectValues.find('option:not(.hidden)').get().map(el => $(el).val());
    let layerConfig = ArcheoSession.get().layers[layerId];
    let attributeId = layerConfig.attributeId;
    let attributeType = layerConfig.attributeType;
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    promiseGetAncestorsAttributes(attributeEntity, attributesValuesIds, treeIndex).then(function (ancestors) {
      ancestors.forEach(ancestor => {
        $selectValues.find(`option:not(.hidden)[value="${ancestor.name}"]`).prop('selected', true);
      });
    });
  });
}

function tree_select_descendantsSelectEvents(elementsDic, layerId) {
  let $descendantsSearchInput = elementsDic.descendantsInput;
  let $descendantsSearchButton = elementsDic.descendantsButton;
  let $selectValues = elementsDic.browser;
  $descendantsSearchButton.on('click', function () {
    let treeIndex = $descendantsSearchInput.attr('searched-value');
    let attributesValuesIds = $selectValues.find('option:not(.hidden)').get().map(el => $(el).val());
    let layerConfig = ArcheoSession.get().layers[layerId];
    let attributeId = layerConfig.attributeId;
    let attributeType = layerConfig.attributeType;
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    promiseGetDescendantsAttributes(attributeEntity, attributesValuesIds, treeIndex).then(function (descendants) {
      descendants.forEach(descendant => {
        $selectValues.find(`option:not(.hidden)[value="${descendant.name}"]`).prop('selected', true);
      });
    });
  });
}

function tree_select_treeSelectEvents(elementsDic, layerId) {
  tree_select_ancestorSelectEvents(elementsDic, layerId);
  tree_select_descendantsSelectEvents(elementsDic, layerId);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/components/utilities.js
function utilities_resetTreeSearch(elementsDic) {
  let $descendantsSearchInput = elementsDic.descendantsInput;
  let $ancestorSearchInput = elementsDic.ancestorsInput;
  $descendantsSearchInput.val('');
  $descendantsSearchInput.attr('searched-label', '');
  $descendantsSearchInput.attr('searched-value', '');
  $ancestorSearchInput.val('');
  $ancestorSearchInput.attr('searched-label', '');
  $ancestorSearchInput.attr('searched-value', '');
}

function utilities_toggleTreeSearch(elementsDic, attributeType, clusteringObjectName = 'attributes') {
  let $treeClusteringOptionsPanel = elementsDic.treePanel;
  if (attributeType === 'tree' && clusteringObjectName === 'attributes') $treeClusteringOptionsPanel.removeClass('hidden');else $treeClusteringOptionsPanel.addClass('hidden');
}

function resetFiltering(elementsDict, layerId, filtered = false, triggerEvent = true) {
  let layerConfig = ArcheoSession.get().layers[layerId];
  let attributeId = layerConfig.attributeId;
  let attributeType = layerConfig.attributeType;

  if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
    layerConfig.style.componentValues.data = "selectAll";
    ArcheoEvents.broadcast('layer-attribute-change', null, {
      layerId: layerId,
      //data.eventType
      attributeId: attributeId,
      //attributeName: attributeTitle,
      attributeType: attributeType
    });
    /*elementsDict.browser.trigger('layer-attribute-change', {
    	layerId: layerId,
    	attributeId: attributeId,
    	attributeType: attributeType
    });*/

    /*let legend = ArcheoSession.getAttributeLegend(attributeId);
    
    let attributesLegend;
    if(attributeType === 'admixture')
    	attributesLegend = ArcheoSession.getAdmixtureLegend(attributeId, true);
    else
    	attributesLegend = ArcheoSession.getAttributeLegend(attributeId, true);
    	let attributesValues = Object.keys(attributesLegend);
    	for(var i = 0; i < attributesValues.length; ++i) {
    	let value = attributesValues[i];
    	legend[value].filtered = filtered;
    }
    	if(triggerEvent)
    	ArcheoEvents.broadcast('filter-attribute-change', null, {
    		attributeId: attributeId,
    		attributeType: attributeType
    	});*/
  }
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/components/index.js








function components_initializeAttributesSelectButtons(elementsDict) {
  let $selectAllButt = elementsDict.selectAllButt;
  let $unselectAllButt = elementsDict.unselectAllButt;
  let $selectValues = elementsDict.browser;

  let filterButtonFunction = function (doSelect) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');

      if (doSelect) {
        $selectedOptions.prop('selected', true);
      } else {
        $selectedOptions.prop('selected', false);
      }
    };
  };

  $selectAllButt.on('click', filterButtonFunction(true));
  $unselectAllButt.on('click', filterButtonFunction(false));
  let $selectInvert = elementsDict.invertButt;
  $selectInvert.on('click', function () {
    let $allOptions = $selectValues.find('option:not(.hidden:selected)');
    let $selectedOptions = $selectValues.find('option:not(.hidden):selected');
    $allOptions.prop('selected', true);
    $selectedOptions.prop('selected', false);
  });
}

function initializeAttriutesFilterButtons(elementsDict) {
  let $filterAllButt = elementsDict.filterButt;
  let $unfilterAllButt = elementsDict.unfilterButt;
  let $selectValues = elementsDict.browser;

  let filterButtonFunction = function (doFilterOut) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:selected:not(.hidden)');
      let attributeId = $selectValues.attr('attributeId');
      let attributeType = $selectValues.attr('attributeType');
      let legend = ArcheoSession.getAttributeLegend(attributeId);
      if (doFilterOut) $selectedOptions.addClass('filtered');else $selectedOptions.removeClass('filtered');
      /*$selectedOptions.each((index) => {
      	let value = $($selectedOptions[index]).val();
      	legend[value].filtered = doFilterOut;
      });*/

      /* Force update of the components data */

      elementsDict.browser.trigger('update');
    };
  };

  $filterAllButt.on('click', filterButtonFunction(false));
  $unfilterAllButt.on('click', filterButtonFunction(true));
}

function components_initializeUseRegexEvent(elementsDict) {
  let $attributeRegexCheckbox = elementsDict.searchRegex;
  let $attributeSearch = elementsDict.search;
  $attributeRegexCheckbox.on('click', function (event) {
    let value = !$attributeRegexCheckbox.hasClass('active'); // negation applied intentionally

    if (value) {
      $attributeSearch.attr('placeholder', "Filter attributes by regex...");
      $attributeSearch.attr('regex', "");
      $attributeSearch.val('');
    } else {
      $attributeSearch.attr('placeholder', "Filter attributes...");
      $attributeSearch.removeAttr('regex');
      $attributeSearch.val('');
    }
  });
}

function browserFilteringEvents(elementsDict) {
  /*elementsDict.valuesSelect.on('changed.bs.select', function (event, data) {
  	let layerConfig = ArcheoSession.get().layers[layerId];
  		var $select = $(event.target);
  	var values = $select.selectpicker().val();
  		let allPossibleAttributesCount = getDataAttributesIds(elementsDict.valuesSelect).length;
  		let attributeId;
  	var attributeType;
  	if(event.type === 'layer-attribute-change') {
  		attributeId =  data.attributeId;
  		attributeType = data.attributeType;
  	} else {
  		attributeId = layerConfig.attributeId; 
  		attributeType = layerConfig.attributeType;
  	}
  	
  	ArcheoEvents.broadcast('layer-value-change', null, {
  		layerId: layerId,
  		values: values,
  		dataAttributesCount: allPossibleAttributesCount,
  		attributeId: attributeId,
  		attributeType: attributeType	
  	});
  });*/
}

function initializeFilteringEvents(elementsDict, layerId) {
  let filteringFunction = function ($selectValues) {
    return function (event) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)');
      let layerConfig = ArcheoSession.get().layers[layerId];
      let attributeId = layerConfig.attributeId;
      let attributeType = layerConfig.attributeType; //let legend = ArcheoSession.getAttributeLegend(attributeId);

      let selectedCount = $selectedOptions.length;
      let filteredCount = $selectedOptions.filter('.filtered').length;

      if (filteredCount / selectedCount >= 0.5) {
        $selectedOptions.removeClass('filtered');
      } else {
        $selectedOptions.addClass('filtered');
      }

      let allOptions = $selectValues.find('option:not(.filtered)');
      let values = $.map(allOptions, el => $(el).val());
      let allPossibleAttributesCount = getDataAttributesIds(elementsDict.browser).length;
      ArcheoEvents.broadcast('layer-value-change', null, {
        layerId: layerId,
        values: values,
        dataAttributesCount: allPossibleAttributesCount,
        attributeId: attributeId,
        attributeType: attributeType
      });
    };
  };

  let $selectAttributeValues = elementsDict.browser;
  $selectAttributeValues.on('dblclick update', filteringFunction($selectAttributeValues));
}

function components_initializeSearchEvents(elementsDict) {
  let searchEventFunction = function ($selectValues) {
    return function (event) {
      let $search = $(event.target);
      let searchValue = $(event.target).val();
      let doUseRegex = ArcheoUtilities.isValid($search.attr('regex'));
      $selectValues.find('option').filter(async function (index) {
        let $this = $(this);
        let optionValue = $this.val();
        let isMatched;

        try {
          if (doUseRegex) isMatched = optionValue.match(new RegExp(`${searchValue}`));else isMatched = optionValue.match(new RegExp(`^${ArcheoUtilities.escapeRegex(searchValue)}`));
        } catch (error) {
          isMatched = false;
        }

        if (!isMatched) $this.addClass('hidden');else $this.removeClass('hidden');
      });
    };
  };

  let $selectAttributesValues = elementsDict.browser;
  let $attributesSearch = elementsDict.search;
  $attributesSearch.on('input', searchEventFunction($selectAttributesValues));
}

function getDataAttributesIds($browser) {
  return $.map($browser.find('optgroup[label="Data attributes"] option'), el => {
    //return $.map($browser.find('option'), (el) => {
    return $(el).attr('value');
  });
}

function componentUIUpdateEvents(elementsDict, layerId) {
  let $ancestorSearchInput = elementsDict.ancestorsInput;
  let $descendantsSearchInput = elementsDict.descendantsInput;
  elementsDict.browser.on('layer-attribute-change filter-attribute-change clustering-attribute-change layer-initialization', function (event, data) {
    if (event.type === 'layer-initialization' && layerId !== data.layerId) return;
    let layerConfig = ArcheoSession.get().layers[layerId];
    var attributeId;
    var attributeType;

    if (event.type === 'layer-attribute-change') {
      attributeId = data.attributeId;
      attributeType = data.attributeType;
    } else {
      attributeId = layerConfig.attributeId;
      attributeType = layerConfig.attributeType;
    }

    let datasetId = layerConfig.datasetId;
    var attributesDict = ArcheoUtilities.deepCloneObject(groups_namespaceObject);
    let doesFilterChangeConcernsThisLayer = (event.type === 'filter-attribute-change' || event.type === 'clustering-attribute-change') && data.attributeId === attributeId;

    if (ArcheoUtilities.isValidNonEmptyString(datasetId)) {
      if (data.layerId === layerId || doesFilterChangeConcernsThisLayer === true) {
        // Reset value //
        if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
          /* Update UI */
          if (event.type === 'layer-attribute-change' || event.type === 'layer-initialization') {
            utilities_resetTreeSearch(elementsDict);
            initializeTreeSearch($ancestorSearchInput, attributeId);
            initializeTreeSearch($descendantsSearchInput, attributeId);
            utilities_toggleTreeSearch(elementsDict, attributeType);
          }
          /* Populate select UI */


          let attributeLegend = ArcheoSession.getAttributeLegend(attributeId);
          var attributeValues = getDataSourceAttributeValues(datasetId, layerId, attributeId, attributeType);
          attributeValues.forEach(function (value) {
            //if(value in attributeLegend && attributeLegend[value].filtered === false)
            attributesDict.attributes.options[value] = {
              name: value,
              filtered: true // By default every value is filtered out

            };
          });
          /* Apply proper filtering according to session info */

          let componentValues = layerConfig.style.componentValues;
          var selected;
          let commonAttributesDict = attributesDict.attributes.options;

          if (event.type === 'layer-initialization') {
            if (componentValues.data === 'selectAll') {
              Object.keys(commonAttributesDict).forEach(value => {
                commonAttributesDict[value].filtered = false;
              });
            } else {
              Object.keys(componentValues.data).forEach(value => {
                if (value in commonAttributesDict) commonAttributesDict[value].filtered = false;
              });
            }

            ArcheoMap.refreshLayer(data.layerId);
          } else if (event.type === 'layer-attribute-change') {
            Object.keys(commonAttributesDict).forEach(value => {
              commonAttributesDict[value].filtered = false;
            });
          } else if (event.type === 'filter-attribute-change' || event.type === 'clustering-attribute-change') {
            if (componentValues.data === 'selectAll') {
              Object.keys(commonAttributesDict).forEach(value => {
                commonAttributesDict[value].filtered = false;
              });
            } else {
              Object.keys(componentValues.data).forEach(value => {
                if (value in commonAttributesDict) commonAttributesDict[value].filtered = false;
              });
            }
          }
          /* Initialize filtering for special attributes */


          if (ArcheoUtilities.isValid(componentValues.special.MISSING)) attributesDict.special.options.MISSING.filtered = false;else attributesDict.special.options.MISSING.filtered = true;
          if (ArcheoUtilities.isValid(componentValues.special.OTHER)) attributesDict.special.options.OTHER.filtered = false;else attributesDict.special.options.OTHER.filtered = true;
          /* Update browser */

          ArcheoUI.setSelect(elementsDict.browser, attributesDict);
          elementsDict.browser.attr('attributeId', attributeId);
          elementsDict.browser.attr('attributeType', attributeType);
        }
      }
    } else {
      /* Reset to default */
      ArcheoUI.setSelect(elementsDict.browser, groups_namespaceObject);
    }
  });
}

function components_resetButtonEvents(elementsDict, layerId) {
  let $resetButton = elementsDict.resetButt;
  $resetButton.on('click', () => resetFiltering(elementsDict, layerId));
}

function initializeUI(newLayerElement, layerId) {
  let $browser = newLayerElement.find('#layer-select-attribute-filter-browser');
  $browser.attr('id', layerId + '_' + $browser.prop('id'));
  let $resetButt = newLayerElement.find('#layer-attribute-filter-reset');
  $resetButt.attr('id', layerId + '_' + $resetButt.prop('id'));
  let $search = newLayerElement.find('#layer-filter-attribute-search');
  $search.attr('id', layerId + '_' + $search.prop('id'));
  let $searchRegex = newLayerElement.find('#layer-attribute-filter-regex');
  $searchRegex.attr('id', layerId + '_' + $searchRegex.prop('id'));
  let $selectAllButt = newLayerElement.find('#layer-attribute-filter-select-all');
  $selectAllButt.attr('id', layerId + '_' + $selectAllButt.prop('id'));
  let $unselectAllButt = newLayerElement.find('#layer-attribute-filter-unselect-all');
  $unselectAllButt.attr('id', layerId + '_' + $unselectAllButt.prop('id'));
  let $invertButt = newLayerElement.find('#layer-attribute-filter-select-invert');
  $invertButt.attr('id', layerId + '_' + $invertButt.prop('id'));
  let $unfilterButt = newLayerElement.find('#layer-attribute-filter-unfilter-all');
  $unfilterButt.attr('id', layerId + '_' + $unfilterButt.prop('id'));
  let $filterButt = newLayerElement.find('#layer-attribute-filter-filter-all');
  $filterButt.attr('id', layerId + '_' + $filterButt.prop('id'));
  let $ancestorsInput = newLayerElement.find('#layer-attribute-filtering-ancestors');
  $ancestorsInput.attr('id', layerId + '_' + $ancestorsInput.prop('id'));
  let $ancestorsButt = newLayerElement.find('#layer-attribute-filtering-ancestors-button');
  $ancestorsButt.attr('id', layerId + '_' + $ancestorsButt.prop('id'));
  let $descendantsInput = newLayerElement.find('#layer-attribute-filtering-descendants');
  $descendantsInput.attr('id', layerId + '_' + $descendantsInput.prop('id'));
  let $descendantsButton = newLayerElement.find('#layer-attribute-filtering-descendants-button');
  $descendantsButton.attr('id', layerId + '_' + $descendantsButton.prop('id'));
  let $treePanel = newLayerElement.find('#tree-filter-select-panel');
  $treePanel.attr('id', layerId + '_' + $treePanel.prop('id'));
  return {
    'browser': $browser,
    'resetButt': $resetButt,
    'search': $search,
    'searchRegex': $searchRegex,
    'selectAllButt': $selectAllButt,
    'unselectAllButt': $unselectAllButt,
    'invertButt': $invertButt,
    'unfilterButt': $unfilterButt,
    'filterButt': $filterButt,
    'ancestorsInput': $ancestorsInput,
    'ancestorsButt': $ancestorsButt,
    'descendantsInput': $descendantsInput,
    'descendantsButton': $descendantsButton,
    'treePanel': $treePanel
  };
}

function setComponentsSettings(newLayerElement, layerId) {
  /* Initialize UI */
  let elementsDict = initializeUI(newLayerElement, layerId);
  /* Initialize events */
  //initializeAttributeSelectEvents(elementsDict);

  componentUIUpdateEvents(elementsDict, layerId);
  browserFilteringEvents(elementsDict);
  components_initializeSearchEvents(elementsDict);
  initializeFilteringEvents(elementsDict, layerId);
  components_initializeUseRegexEvent(elementsDict);
  components_initializeAttributesSelectButtons(elementsDict);
  initializeAttriutesFilterButtons(elementsDict);
  tree_select_treeSelectEvents(elementsDict, layerId);
  components_resetButtonEvents(elementsDict, layerId);
}

/* harmony default export */ const components = (setComponentsSettings);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/initialize-layer.js








function setLayerAccordion(newLayerElement, layerId) {
  /* Assign meta */
  newLayerElement.find('.layer-header > .header-text').html(ArcheoSession.get().layers[layerId].settings.title);
  /* Assign correct id to all accordions */

  newLayerElement.find(`[data-target="#layer-template-accordion"]`).attr('data-target', `#${layerId}-accordion`);
  newLayerElement.find('#layer-template-accordion').attr('id', `${layerId}-accordion`);
}

function setSettingsAccordion(newLayerElement, layerId) {
  /* Layer type accordion */
  newLayerElement.find(`[data-target="#layer-type-settings"]`).attr('data-target', `#${layerId}-accordion-type-settings`);
  newLayerElement.find('#layer-type-settings').attr('id', `${layerId}-accordion-type-settings`);
  /* Appearance accordion */

  newLayerElement.find(`[data-target="#layer-visibility-settings"]`).attr('data-target', `#${layerId}-accordion-layer-visibility-settings`);
  newLayerElement.find('#layer-visibility-settings').attr('id', `${layerId}-accordion-layer-visibility-settings`);
  /* Position accordion */

  newLayerElement.find(`[data-target="#features-position"]`).attr('data-target', `#${layerId}-accordion-features-position`);
  newLayerElement.find('#features-position').attr('id', `${layerId}-accordion-features-position`);
  /* Features size accordion */

  newLayerElement.find(`[data-target="#features-size"]`).attr('data-target', `#${layerId}-accordion-features-size`);
  newLayerElement.find('#features-size').attr('id', `${layerId}-accordion-features-size`);
  /* Layer weight accordion */

  newLayerElement.find(`[data-target="#layer-weight"]`).attr('data-target', `#${layerId}-accordion-layer-weight`);
  newLayerElement.find('#layer-weight').attr('id', `${layerId}-accordion-layer-weight`);
  /* Components accordion */

  newLayerElement.find(`[data-target="#values-settings"]`).attr('data-target', `#${layerId}-accordion-values-settings`);
  newLayerElement.find('#values-settings').attr('id', `${layerId}-accordion-values-settings`);
}

function setGeneralSettingsEvents(elementsDict, layerId) {
  /* Change layer name */
  elementsDict.layerNameTextbox.on('change', function (event) {
    var $textbox = $(event.target);
    var newLayerName = $textbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(newLayerName)) {
      //ArcheoSession.get().layers[ layerId ].settings.title = newLayerName;
      elementsDict.layerHeaderTextElement.html(newLayerName);
      ArcheoEvents.broadcast('layer-name-change', null, {
        layerId: layerId,
        value: newLayerName
      });
      ArcheoEvents.broadcast('layer-setting-change', null, {
        layerId: layerId,
        setting: 'title',
        value: newLayerName
      });
      $textbox.trigger('blur');
    } else {
      let oldLayerName = ArcheoSession.get().layers[layerId].settings.title;
      $textbox.val(oldLayerName);
    }
  });
  /* Change layer type */

  elementsDict.layerTypeSelect.on('changed.bs.select', function (event) {
    var $select = $(event.target);
    let layerType = $select.val();
    let layerTypeName = $select.find(':selected').text();
    let layerConfig = ArcheoSession.get().layers[layerId];
    ArcheoSession.get().layers[layerId].type = layerType;
    /* Show layer type settings */

    elementsDict.layerElement.find('.type-settings').addClass('d-none');
    elementsDict.layerElement.find(`.${layerType}-settings`).removeClass('d-none');
    /* Change type settings header text */

    let $layerSettings = elementsDict.layerElement.find(`.layer-type-settings`);

    if (ArcheoUtilities.isValidNonEmptyString(layerTypeName)) {
      $layerSettings.find(`.header-text`).text(`${layerTypeName} settings`);
      $layerSettings.removeClass('hidden');
    } else $layerSettings.addClass('hidden');

    if (layerType === 'heatmap') {
      /* Weight appearance */
      elementsDict.layerElement.find('.weight-appearance-wrapper').hide();
      /* Color toggle */

      elementsDict.layerElement.find('.layer-color-toggle-wrapper').hide();
      elementsDict.layerElement.find('.layer-name-toggle-wrapper').hide();
      /* Show proper color settings */

      elementsDict.layerElement.find('.layer-color-input').hide();
      elementsDict.layerElement.find('.layer-color-pointer-options').hide();
      elementsDict.layerElement.find('.gradient-input-wrapper').show(); //('d-none');

      /* Change to type's default blending mode */

      elementsDict.layerElement.find('.select-layer-blending-mode').selectpicker('val', 'screen');
      /* Hide Postion and Size setting, as they are unapplicable to the heatmap */

      elementsDict.layerElement.find('.features-position-settings').hide();
      elementsDict.layerElement.find('.features-size-settings').hide();
    } else {
      /* Weight appearance */
      elementsDict.layerElement.find('.weight-appearance-wrapper').show();
      /* Color toggle */

      elementsDict.layerElement.find('.layer-color-toggle-wrapper').show();
      elementsDict.layerElement.find('.layer-name-toggle-wrapper').show();
      /* Show proper color settings */

      elementsDict.layerElement.find('.gradient-input-wrapper').hide();
      elementsDict.layerElement.find('.layer-color-input').show();
      elementsDict.layerElement.find('.layer-color-pointer-options').show();
      /* Change to type's default blending mode */

      elementsDict.layerElement.find('.select-layer-blending-mode').selectpicker('val', 'normal');
      /* Show Postion and Size setting */

      elementsDict.layerElement.find('.features-position-settings').show();
      elementsDict.layerElement.find('.features-size-settings').show();
    }

    ArcheoEvents.broadcast('layer-type-change', null, {
      layerId: layerId,
      value: layerType
    });
  });
  /* Change layer attribute */

  const attributeChangeEventFunction = function (event, data) {
    let $select = $(event.target);
    let attributeId = $select.val();
    let attributeType = $select.find(':selected').attr('type');
    let layerConfig = ArcheoSession.get().layers[layerId];
    let datasetId;

    if (event.type === 'layer-dataset-change') {
      attributeId = layerConfig.attributeId;
      attributeType = layerConfig.attributeType;
      datasetId = data.datasetId;
      if (data.layerId !== layerId) return;

      if (elementsDict.attributeTypeSelect.is(event.target)) {
        if (!(attributeType in attributesTypes_namespaceObject) || !(attributeId in attributesTypes_namespaceObject[attributeType])) return;
      } else if (elementsDict.attributeSelect.is(event.target)) {
        if (attributeType in attributesTypes_namespaceObject && attributeId in attributesTypes_namespaceObject[attributeType]) return;
      }
    } else {
      datasetId = ArcheoSession.get().layers[layerId].datasetId;
    } //alert(`attributeId 0 ${attributeId} attributeType 0 ${attributeType}`);


    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      if (ArcheoUtilities.isValidNonEmptyString(datasetId)) {
        let params = {
          layerId: layerId,
          attributeId: attributeId,
          attributeType: attributeType,
          datasetId: datasetId,
          eventType: event.type
        };
        ArcheoRequests.incorporateAttributes(params).then(isSuccess => {
          if (isSuccess === true) {
            ArcheoEvents.broadcast('attribute-fetched', null, {
              datasetId: datasetId,
              layerId: layerId
            });
          }

          $select.trigger('update-ui', params);
        });
      }
    } else {
      if (elementsDict.attributeSelect.is(event.target)) {
        let layer = ArcheoMap.getLayer(layerId);
        ArcheoMap.setLayerConfig(layer, {
          attributeId: attributeId,
          attributeType: attributeType
        });
        ArcheoMap.refreshLayer(layerId);
      }
    }
  };

  const updateUI = async function (event, data) {
    if (data.layerId === layerId) {
      let layerConfig = ArcheoSession.get().layers[layerId];
      var $select = $(event.target);
      let attributeId = $select.val();
      let attributeType = $select.find(':selected').attr('type');
      let doesFilterChangeConcernsThisLayer = data.attributeId === attributeId;

      if (doesFilterChangeConcernsThisLayer === true) {
        let typesWrapper = $select.parent().next();
        let params = {
          layerId: layerId,
          eventType: data.eventType
        };

        if (attributeId in attributesTypes_namespaceObject) {
          typesWrapper.removeClass('d-none'); //ArcheoUI.setSelectpicker( elementsDict.attributeSelect, attributeType, false );

          ArcheoUI.setSelectpicker(elementsDict.attributeTypeSelect, attributesTypes_namespaceObject[attributeType], true);
          return;
        } else {
          typesWrapper.addClass('d-none');
        }

        if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
          let attributeType = $select.find(`option[value=${attributeId}]`).attr("type") || 'value';
          let attributeTitle = $select.find(`option[value=${attributeId}]`).text();
          params = { ...params,
            attributeId: attributeId,
            attributeName: attributeTitle,
            attributeType: attributeType
          };
          if (attributeType === "admixture") elementsDict.layerElement.find('.piechart-label-percent').hide();else elementsDict.layerElement.find('.piechart-label-percent').show();
        } //if(data.eventType !== 'layer-initialization' && data.eventType !== 'layer-dataset-change') {


        if (data.eventType !== 'layer-dataset-change') {
          /* Reset filtering on new attribute select */
          layerConfig.style.componentValues.data = "selectAll";
          ArcheoEvents.broadcast('layer-attribute-change', null, params);
        } else {
          elementsDict.layerElement.find('select.select-value').trigger('layer-initialization', params);
          ArcheoMap.getMapSources()[data.datasetId].changed();
        }
      }
    }
  };
  /* Change layer attribute */
  //elementsDict.attributeSelect.on('changed.bs.select update layer-initialization', attributeChangeEventFunction);


  elementsDict.attributeSelect.on('changed.bs.select update layer-dataset-change', attributeChangeEventFunction);
  elementsDict.attributeSelect.on('update-ui dataset-remove', updateUI);
  /* Change layer attribute type if available */
  //elementsDict.attributeTypeSelect.on('changed.bs.select update layer-initialization', attributeChangeEventFunction);

  elementsDict.attributeTypeSelect.on('changed.bs.select update layer-dataset-change', attributeChangeEventFunction);
  elementsDict.attributeTypeSelect.on('update-ui dataset-remove', updateUI);
  /* Change dataset */

  elementsDict.datasetSelect.on('changed.bs.select layer-initialization', function (event, data) {
    if (event.type === 'layer-initialization' && layerId !== data.layerId) return;
    let layerConfig = ArcheoMap.getLayerConfigById(layerId);
    var $select = $(event.target);
    let datasetId;

    if (event.type === "layer-initialization") {
      datasetId = layerConfig.datasetId;
    } else {
      datasetId = $select.val();
      ArcheoSession.get().layers[layerId].datasetId = datasetId;
    }

    ArcheoEvents.broadcast('layer-dataset-change', null, {
      layerId: layerId,
      datasetId: datasetId
    });

    if (ArcheoUtilities.isValidNonEmptyString(datasetId)) {
      let dataset = ArcheoSession.get().datasets[datasetId];
      let isDatasetCustom = dataset.isCustom;
      console.log("VIS dataset dataset");
      console.log(dataset);
      let attributeId = layerConfig.attributeId;
      let attributeType = layerConfig.attributeType;

      if (!ArcheoUtilities.isValid(isDatasetCustom)) {
        let objectId = dataset.objectId;

        if (event.type === "layer-initialization") {
          /* Attribute which has subtypes */
          if (attributeType in attributesTypes_namespaceObject && attributeId in attributesTypes_namespaceObject[attributeType]) {
            ArcheoUI.setSelectpicker(elementsDict.attributeSelect, attributes_namespaceObject[objectId], true);
            ArcheoUI.setSelectpicker(elementsDict.attributeTypeSelect, attributesTypes_namespaceObject[attributeType], true);
            ArcheoUI.setSelectValueNoEvent(elementsDict.attributeSelect, attributeType);
            ArcheoUI.setSelectValue(elementsDict.attributeTypeSelect, attributeId);
            let typesWrapper = elementsDict.attributeTypeSelect.parent().parent();
            typesWrapper.removeClass('d-none');
          }
          /* Normal attribute */
          else {
              ArcheoUI.setSelectpicker(elementsDict.attributeSelect, attributes_namespaceObject[objectId], true);
              ArcheoUI.setSelectValueNoEvent(elementsDict.attributeSelect, attributeId);
            }
        } else {
          ArcheoUI.setSelectpicker(elementsDict.attributeSelect, attributes_namespaceObject[objectId], true);
          ArcheoUI.setSelectValueNoEvent(elementsDict.attributeSelect, attributeId);
        }
      } else {
        ArcheoUI.setSelectpicker(elementsDict.attributeSelect, dataset.attributesDict, true);
        ArcheoUI.setSelectValueNoEvent(elementsDict.attributeSelect, attributeId);
      }
    } else {
      ArcheoUI.setSelectpicker(elementsDict.attributeSelect, {}, true);
    }
  });
}

function setGeneralSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Layer name textbox */

  var layerHeaderTextElement = newLayerElement.find('.layer-header > .header-text');
  var layerNameTextboxId = layerId + '_layer-name-textbox';
  var layerNameTextbox = newLayerElement.find('#layer-name-textbox');
  layerNameTextbox.attr('id', layerNameTextboxId); // Initialize

  layerNameTextbox.val(ArcheoSession.get().layers[layerId].settings.title);
  /* Layer dataset select */

  var datasetSelectId = layerId + '_select-layer-dataset';
  var $datasetSelect = newLayerElement.find('#select-layer-dataset');
  $datasetSelect.attr('id', datasetSelectId);
  let $datasetSelectpicker = $datasetSelect.selectpicker();
  /* Layer attribute select */

  var attributeSelectId = layerId + '_select-attribute';
  var $attributeSelect = newLayerElement.find('#select-attribute');
  $attributeSelect.attr('id', attributeSelectId);
  $attributeSelect.selectpicker();
  /* Layer attribute type select */

  var attributeTypeSelectId = layerId + '_select-attribute-type';
  var $attributeTypeSelect = newLayerElement.find('#select-attribute-type');
  $attributeTypeSelect.attr('id', attributeTypeSelectId);
  $attributeTypeSelect.selectpicker();
  /* Layer type select */

  var layerTypeSelectId = layerId + '_select-layer-type';
  var $layerTypeSelect = newLayerElement.find('#select-layer-type');
  $layerTypeSelect.attr('id', layerTypeSelectId);
  $layerTypeSelect.selectpicker();
  let elements = {
    'layerElement': newLayerElement,
    'layerHeaderTextElement': layerHeaderTextElement,
    'layerNameTextbox': layerNameTextbox,
    'layerTypeSelect': $layerTypeSelect,
    'attributeSelect': $attributeSelect,
    'attributeTypeSelect': $attributeTypeSelect,
    'datasetSelect': $datasetSelect
  };
  setGeneralSettingsEvents(elements, layerId);
  /* Initialize layer type selectpicker */

  $layerTypeSelect.selectpicker('val', layerConfig.type); //$attributeSelect.selectpicker('val', layerConfig.attributeId);

  /* Initialize dataset and attribute selectpicker by triggering dataset change event */

  ArcheoEvents.broadcast('dataset-update', null, {
    layerId: layerId
  }); //$datasetSelectpicker.selectpicker('val', layerConfig.datasetId);
  //ArcheoUI.setSelectValueNoEvent($datasetSelectpicker, layerConfig.datasetId);

  return elements;
}

function setVisibilitySettingsEvents(elementsDict, layerId) {
  /* Change visibility setting */
  elementsDict.layerVisibilityButt.on('click', function (event) {
    /* The button status will be changed only after click event, thus negation */
    var isToggled = !$(event.target).hasClass('active'); // negation applied on purpose

    ArcheoEvents.broadcast(['layer-setting-change', 'layer-visibility-change'], null, {
      layerId: layerId,
      setting: 'visible',
      value: isToggled
    });
    ArcheoMap.triggerLayerStyleFunction();
  });
  /* Change opacity setting */

  layerConfigSliderEventSetup(elementsDict.opacitySlider, layerId, null, 'drawingAlpha', 'onFinish');
  /* Change blending mode */

  layerConfigSelectEventSetup(elementsDict.layerBlendingModeSelect, layerId, null, 'blendingMode');
  /* Change color */

  layerConfigColorPickEventSetup(elementsDict.layerColorInput, layerId,
  /* notLayerType */
  'heatmap', 'move');
  /* Toggle layer name */

  layerConfigCheckboxEventSetup(elementsDict.layerNameToggleCheckbox, layerId, null, 'layerNameToggle');
  /* Toggle color */

  layerColorToggleCheckboxEventSetup(elementsDict.layerColorToggleCheckbox, layerId, null, 'colorToggle'); // layer-visibility-change
  // ArcheoMap.triggerLayerStyleFunction( ArcheoMap.getRegionsLayer() );

  /* Toggle color */

  layerColorToggleCheckboxEventSetup(elementsDict.layerPointerToggleCheckbox, layerId, null, 'pointerToggle');
  /* Change gradient */

  layerConfigGradientPickEventSetup(elementsDict.gradientInput, layerId, 'heatmap');
}

function setVisibilitySettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Visibility button */

  let layerVisibilityButt = newLayerElement.find('#visibility');
  layerVisibilityButt.attr('id', `${layerId}_visibility`);
  layerVisibilityButt.next().attr('for', `${layerId}_visibility`); // Initialize

  ArcheoUI.toggleCheckbox(layerVisibilityButt, layerConfig.settings.visible);
  /* Opacity slider */

  var opacitySliderId = layerId + '_layer-opacity';
  var $opacitySlider = newLayerElement.find('#layer-opacity');
  $opacitySlider.attr('name', opacitySliderId);
  $opacitySlider.attr('id', opacitySliderId);
  var opacitySliderObj = ArcheoUI.initializeSlider($opacitySlider, {
    min: .0,
    max: 1.,
    from: layerConfig.style.drawingAlpha,
    step: 0.01,
    type: 'single',
    prettify: val => {
      return Math.round(val * 100) + '%';
    }
  });
  var layerNumber = ArcheoSession.get().layers._counter - 1;
  /* Toggle layer name */

  var layerNameToggleCheckboxId = layerId + '_layer-name-toggle';
  var $layerNameToggleCheckbox = newLayerElement.find('#layer-name-toggle');
  $layerNameToggleCheckbox.attr('name', layerNameToggleCheckboxId);
  $layerNameToggleCheckbox.attr('id', layerNameToggleCheckboxId);
  if (layerConfig.style.layerNameToggle) $layerNameToggleCheckbox.addClass('active');else $layerNameToggleCheckbox.removeClass('active');
  /* Body Color */

  var layerColorInputId = layerId + '_layer-color-input';
  var $layerColorInput = newLayerElement.find('#layer-color-input');
  $layerColorInput.attr('id', layerColorInputId);
  if (ArcheoUtilities.isValidNonEmptyString(layerConfig.style.color)) ArcheoUI.initializeColorInput($layerColorInput, {
    color: layerConfig.style.color,
    palette: 'layer'
  }, layerNumber);else ArcheoUI.initializeColorInput($layerColorInput, {
    palette: 'layer'
  }, layerNumber);
  /* Body Toggle color */

  var layerColorToggleCheckboxId = layerId + '_layer-color-toggle';
  var $layerColorToggleCheckbox = newLayerElement.find('#layer-color-toggle');
  $layerColorToggleCheckbox.attr('name', layerColorToggleCheckboxId);
  $layerColorToggleCheckbox.attr('id', layerColorToggleCheckboxId);
  if (layerConfig.style.colorToggle) $layerColorToggleCheckbox.addClass('active');else $layerColorToggleCheckbox.removeClass('active');
  /* Pointer Toggle */

  var layerPointerToggleCheckboxId = layerId + '_layer-pointer-toggle';
  var $layerPointerToggleCheckbox = newLayerElement.find('#layer-pointer-toggle');
  $layerPointerToggleCheckbox.attr('name', layerPointerToggleCheckboxId);
  $layerPointerToggleCheckbox.attr('id', layerPointerToggleCheckboxId);
  if (layerConfig.style.pointerToggle) $layerPointerToggleCheckbox.addClass('active');else $layerPointerToggleCheckbox.removeClass('active');
  /* Gradient */

  var layerGradientInputId = layerId + '_layer-gradient-input';
  var $layerGradientInput = newLayerElement.find('#layer-gradient-input');
  $layerGradientInput.attr('id', layerGradientInputId);
  var gradientInputObj = ArcheoUI.initializeGradientInput($layerGradientInput);
  /* Decide whether show single color or gradient options */

  /*if( ArcheoUtilities.isArray(layerConfig.style.color) ) {
  	$layerColorInput.addClass('d-none');
  	$layerGradientInput.parent().removeClass('d-none');
  } else {
  	$layerColorInput.removeClass('d-none');
  	$layerGradientInput.parent().addClass('d-none');
  }*/

  /* Layer type select */

  var layerBlendingModeSelectId = layerId + '_select-layer-blending-mode';
  var $layerBlendingModeSelect = newLayerElement.find('#select-layer-blending-mode');
  $layerBlendingModeSelect.attr('id', layerBlendingModeSelectId);
  $layerBlendingModeSelect.selectpicker();
  $layerBlendingModeSelect.selectpicker('val', layerConfig.style.blendingMode);
  setVisibilitySettingsEvents({
    'layerElement': newLayerElement,
    'opacitySlider': opacitySliderObj,
    'layerBlendingModeSelect': $layerBlendingModeSelect,
    'layerColorInput': $layerColorInput,
    'gradientInput': gradientInputObj,
    'layerVisibilityButt': layerVisibilityButt,
    'layerColorToggleCheckbox': $layerColorToggleCheckbox,
    'layerPointerToggleCheckbox': $layerPointerToggleCheckbox,
    'layerNameToggleCheckbox': $layerNameToggleCheckbox
  }, layerId); // Initialize

  $layerColorToggleCheckbox.trigger('update'); // Initialize gradient

  var newGradient;
  if (ArcheoUtilities.isValid(layerConfig.style.gradient)) newGradient = ArcheoUI.setGradientValue(gradientInputObj, layerConfig.style.gradient, layerNumber);else newGradient = ArcheoUI.setGradientValue(gradientInputObj, null, layerNumber);
  /* Save default color to the session */
  //layerConfig.style.gradient = newGradient;
}

function setSizeSettingsEvents(elementsDict, layerId) {
  /* Change size setting */
  layerConfigSliderEventSetup(elementsDict.sizeSlider, layerId, null, 'size', 'onFinish'); //layerSettingSliderEventSetup(elementsDict.sizeSlider, layerId, null, 'radius', 'onFinish');

  /* Change font size setting */

  layerConfigSliderEventSetup(elementsDict.fontSlider, layerId, null, 'fontSizeRatio', 'onFinish');
}

function setSizeSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Layer size slider */

  var sizeSliderId = layerId + '_features-size-slider';
  var $sizeSlider = newLayerElement.find('#features-size-slider');
  $sizeSlider.attr('name', sizeSliderId);
  $sizeSlider.attr('id', sizeSliderId);
  var sizeSliderObj = sizeSliderSettingSetup($sizeSlider, {
    from: layerConfig.style.size[0],
    to: layerConfig.style.size[1],
    min: 4,
    max: 100,
    type: 'double'
  });
  /* Font size slider */

  var fontSliderId = layerId + '_font-size-slider';
  var $fontSlider = newLayerElement.find('#font-size-slider');
  $fontSlider.attr('name', fontSliderId);
  $fontSlider.attr('id', fontSliderId);
  var fontSliderObj = sizeSliderSettingSetup($fontSlider, {
    from: layerConfig.style.fontSizeRatio,
    step: 0.01,
    min: 0,
    max: 3,
    type: 'single',
    postfix: ''
  });
  setSizeSettingsEvents({
    'sizeSlider': sizeSliderObj,
    'fontSlider': fontSliderObj
  }, layerId);
}

function setPositionSettingsEvents(elementsDict, layerId) {
  /* Change feature angle setting */
  layerAngleEventSetup(elementsDict.anglepicker, layerId, null, 'angle');
  /* Change feature offset setting */

  layerConfigSliderEventSetup(elementsDict.offsetSlider, layerId, null, 'positionOffsetRatio', 'onFinish');
  /* Change feature offset relative toggle */

  layerConfigCheckboxEventSetup(elementsDict.offsetRelativeCheckbox, layerId, null, 'positionOffsetRelativeToggle');
}

function setPositionSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Layer size slider */

  var anglepickerId = layerId + '_anglepicker';
  var $anglepicker = newLayerElement.find('#anglepicker');
  $anglepicker.attr('name', anglepickerId);
  $anglepicker.attr('id', anglepickerId);
  /* Initialize it with value */

  if (layerConfig.style.angle === '') {
    let layerNumber = ArcheoSession.get().layers._counter - 1;
    layerConfig.style.angle = layerNumber * 45;
  }

  var anglepickerObj = $anglepicker.anglePicker({
    flat: true,
    value: layerConfig.style.angle,
    enableCenter: true,
    centerSize: 20,
    size: 75,
    handleSize: 15,
    handleType: "default",
    snap: 1,
    showValue: true,
    start: -90,
    showValueAlwaysEnabled: true
  });
  /* Relative offset toggle */

  var offsetRelativeCheckboxId = layerId + '_feature-offset-relative-toggle';
  var $offsetRelativeCheckbox = newLayerElement.find('#feature-offset-relative-toggle');
  $offsetRelativeCheckbox.attr('name', offsetRelativeCheckboxId);
  $offsetRelativeCheckbox.attr('id', offsetRelativeCheckboxId);
  if (layerConfig.style.positionOffsetRelativeToggle) $offsetRelativeCheckbox.addClass('active');else $offsetRelativeCheckbox.removeClass('active');
  /* Font size slider */

  var offsetSliderId = layerId + '_feature-offset-slider';
  var $offsetSlider = newLayerElement.find('#feature-offset-slider');
  $offsetSlider.attr('name', offsetSliderId);
  $offsetSlider.attr('id', offsetSliderId);
  var offsetSliderObj = sizeSliderSettingSetup($offsetSlider, {
    from: layerConfig.style.positionOffsetRatio,
    step: 0.05,
    min: -10,
    max: 10,
    type: 'single',
    postfix: ''
  });
  setPositionSettingsEvents({
    'anglepicker': anglepickerObj,
    'offsetSlider': offsetSliderObj,
    'offsetRelativeCheckbox': $offsetRelativeCheckbox
  }, layerId);
}

function setWeightSettingsEvents(elementsDict, layerId) {
  /* Change min weight scaling factor for logarithmic weight function */
  $(elementsDict.weightGrowthSelect).on('changed.bs.select', function (event) {
    let weightFunction = $(event.target).val();

    if (weightFunction === "logarithmic") {
      elementsDict.growthFactorSpinner.spinner("option", "min", 2);
    } else {
      elementsDict.growthFactorSpinner.spinner("option", "min", 0);
    }

    return true;
  });
  /* Change size setting */

  layerConfigSpinnerEventSetup(elementsDict.scalingFactorSpinner, layerId, null, 'weightScalingFactor');
  layerConfigSpinnerEventSetup(elementsDict.growthFactorSpinner, layerId, null, 'weightGrowthFactor');
  layerConfigSelectEventSetup(elementsDict.weightGrowthSelect, layerId, null, 'weightGrowth');
  layerConfigSelectEventSetup(elementsDict.standMethodSelect, layerId, null, 'standardisationMethod');
  layerConfigRadiobuttonEventSetup(elementsDict.displayRadiobutton, layerId, null, 'valueDisplay');
  layerConfigCheckboxEventSetup(elementsDict.weightValueCheckbox, layerId, null, 'cardinalityByValue');
  layerConfigCheckboxEventSetup(elementsDict.weightSizeCheckbox, layerId, null, 'cardinalityBySize');
  layerConfigCheckboxEventSetup(elementsDict.weightColorCheckbox, layerId, null, 'cardinalityByColor');
}

function setWeightSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Weight appearance */

  /* Cardinality by value setting */

  var weightValueCheckboxId = layerId + '_weight-by-value';
  var $weightValueCheckbox = newLayerElement.find('#weight-by-value');
  $weightValueCheckbox.attr('name', weightValueCheckboxId);
  $weightValueCheckbox.attr('id', weightValueCheckboxId);
  ArcheoUI.toggleCheckbox($weightValueCheckbox, layerConfig.style.cardinalityByValue);
  /* Cardinality by size setting */

  var weightSizeCheckboxId = layerId + '_weight-by-size';
  var $weightSizeCheckbox = newLayerElement.find('#weight-by-size');
  $weightSizeCheckbox.attr('name', weightSizeCheckboxId);
  $weightSizeCheckbox.attr('id', weightSizeCheckboxId);
  ArcheoUI.toggleCheckbox($weightSizeCheckbox, layerConfig.style.cardinalityBySize);
  /* Cardinality by color setting */

  var weightColorCheckboxId = layerId + '_weight-by-color';
  var $weightColorCheckbox = newLayerElement.find('#weight-by-color');
  $weightColorCheckbox.attr('name', weightColorCheckboxId);
  $weightColorCheckbox.attr('id', weightColorCheckboxId);
  ArcheoUI.toggleCheckbox($weightColorCheckbox, layerConfig.style.cardinalityByColor);
  /* Weight display mode */

  var displayRadiobuttonId = layerId + '_weight-value-display';
  var $displayRadiobutton = newLayerElement.find('#weight-value-display');
  $displayRadiobutton.attr('name', displayRadiobuttonId);
  $displayRadiobutton.attr('id', displayRadiobuttonId);
  $displayRadiobutton.find('input').attr('name', displayRadiobuttonId);
  $displayRadiobutton.find(`input[value=${layerConfig.style.valueDisplay}]`).click();
  /* Weight scaling factor slider */

  var scalingFactorSpinnerId = layerId + '_weight-scaling-factor';
  var $scalingFactorSpinner = newLayerElement.find('#weight-scaling-factor');
  $scalingFactorSpinner.attr('name', scalingFactorSpinnerId);
  $scalingFactorSpinner.attr('id', scalingFactorSpinnerId);
  $scalingFactorSpinner.spinner({
    culture: window.getLang(),
    min: 0,
    max: 100.0,
    numberFormat: "n",
    step: 0.00001
  });
  $scalingFactorSpinner.val(layerConfig.style.weightScalingFactor);
  $scalingFactorSpinner.attr('last-value', layerConfig.style.weightScalingFactor);
  /* Weight growth factor slider */

  var growthFactorSpinnerId = layerId + '_weight-growth-factor';
  var $growthFactorSpinner = newLayerElement.find('#weight-growth-factor');
  $growthFactorSpinner.attr('name', growthFactorSpinnerId);
  $growthFactorSpinner.attr('id', growthFactorSpinnerId);
  $growthFactorSpinner.spinner({
    culture: window.getLang(),
    min: 0,
    max: 100.0,
    numberFormat: "n",
    step: 0.00001
  });
  $growthFactorSpinner.val(layerConfig.style.weightGrowthFactor);
  $growthFactorSpinner.attr('last-value', layerConfig.style.weightGrowthFactor);
  /* Weight growth select */

  var standMethodSelectId = layerId + '_select-stand-method';
  var $standMethodSelect = newLayerElement.find('#select-stand-method');
  $standMethodSelect.attr('id', standMethodSelectId);
  $standMethodSelect.selectpicker();
  $standMethodSelect.selectpicker('val', layerConfig.style.standardisationMethod);
  /* Weight growth select */

  var weightGrowthSelectId = layerId + '_select-weight-growth';
  var $weightGrowthSelect = newLayerElement.find('#select-weight-growth');
  $weightGrowthSelect.attr('id', weightGrowthSelectId);
  $weightGrowthSelect.selectpicker();
  $weightGrowthSelect.selectpicker('val', layerConfig.style.weightGrowth);
  setWeightSettingsEvents({
    'weightValueCheckbox': $weightValueCheckbox,
    'weightSizeCheckbox': $weightSizeCheckbox,
    'weightColorCheckbox': $weightColorCheckbox,
    'scalingFactorSpinner': $scalingFactorSpinner,
    'growthFactorSpinner': $growthFactorSpinner,
    'weightGrowthSelect': $weightGrowthSelect,
    'standMethodSelect': $standMethodSelect,
    'displayRadiobutton': $displayRadiobutton
  }, layerId);
}

function setLayerTypeSettings(newLayerElement, layerId) {
  setPointSettings(newLayerElement, layerId);
  setPiechartSettings(newLayerElement, layerId);
  setHeatmapSettings(newLayerElement, layerId);
  setTagSettings(newLayerElement, layerId);
}

function setCloneEvents(elementsDict, layerId) {
  /* Values select */
  elementsDict.cloneButton.on('click', function (event) {
    ArcheoUtilities.setButtonLoading(elementsDict.cloneButton).then(() => {
      $('.clone-button').one('layer-initialization', () => {
        ArcheoUtilities.setButtonLoaded(elementsDict.cloneButton);
      });
      var $button = $(event.target);
      ArcheoSession.cloneLayer(layerId);
    });
  });
}

function setSmallQuantitiesEvents(elementsDict, layerId) {
  layerConfigSliderEventSetup(elementsDict.othersSlider, layerId, null, 'otherRatio', 'onFinish', true);
  layerConfigSliderEventSetup(elementsDict.othersCountSlider, layerId, null, 'otherCount', 'onFinish', true);
}

function setSmallQuantitiesSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Group others slider setting */

  var othersSliderId = layerId + '_others-slider';
  var $othersSlider = newLayerElement.find('#others-slider');
  $othersSlider.attr('name', othersSliderId);
  $othersSlider.attr('id', othersSliderId);
  var othersSliderObj = ArcheoUI.initializeSlider($othersSlider, {
    min: .0,
    max: 1.,
    from: layerConfig.style.otherRatio,
    step: 0.01,
    type: 'single',
    extra_classes: 'others-slider',
    prettify: val => {
      return Math.round(val * 100) + '%';
    }
  });
  /* Group others slider setting */

  var othersCountSliderId = layerId + '_others-count-slider';
  var $othersCountSlider = newLayerElement.find('#others-count-slider');
  $othersCountSlider.attr('name', othersCountSliderId);
  $othersCountSlider.attr('id', othersCountSliderId);
  var othersCountSliderObj = ArcheoUI.initializeSlider($othersCountSlider, {
    min: 0,
    max: 100,
    from: layerConfig.style.otherCount,
    step: 1,
    type: 'single',
    extra_classes: 'others-slider',
    prettify: val => val
  });
  setSmallQuantitiesEvents({
    "othersSlider": othersSliderObj,
    "othersCountSlider": othersCountSliderObj
  }, layerId);
}

function setCloneSettings(newLayerElement, layerId) {
  var $cloneButton = newLayerElement.find('.clone-button');
  setCloneEvents({
    'cloneButton': $cloneButton
  }, layerId);
}

function initalizeClustering(newLayerElement, layerId) {
  newLayerElement.on('layer-initialization', function (event, data) {
    if (data.layerId === layerId) {
      ArcheoEvents.broadcast('cluster-setting-change', null, {
        layerId: layerId,
        setting: 'distance'
      });
      ArcheoEvents.broadcast('cluster-setting-change', null, {
        layerId: layerId,
        setting: 'range'
      });
    }
  });
}

function initializeTooltips(newLayerElement, layerId) {
  newLayerElement.find('.archeo-tooltip').each(function () {
    let tooltipId = $(this).attr('tooltip-id');
    let text = window.dictionary.tooltips[tooltipId];
    tippy(this, {
      content: text,
      interactive: true,
      appendTo: () => document.body
    });
  });
}

function createLayerElement(layerId, hideLayer) {
  return new Promise((resolution, rejection) => {
    let newLayerElement = $(`#layer-template`).clone();
    newLayerElement.addClass('layer');

    if (hideLayer) {
      newLayerElement.find('.layer-header').addClass('collapsed');
      newLayerElement.children('.collapse').removeClass('show');
    }
    /* Assign new dataset id */


    newLayerElement.attr('id', layerId);
    newLayerElement.appendTo('#layers-container');
    setCloneSettings(newLayerElement, layerId);
    let el = setGeneralSettings(newLayerElement, layerId);
    components(newLayerElement, layerId);
    setVisibilitySettings(newLayerElement, layerId);
    let layerConfig = ArcheoSession.get().layers[layerId];
    el.layerTypeSelect.selectpicker('val', layerConfig.type);
    setLayerTypeSettings(newLayerElement, layerId);
    setPositionSettings(newLayerElement, layerId);
    setSizeSettings(newLayerElement, layerId);
    setWeightSettings(newLayerElement, layerId);
    setSmallQuantitiesSettings(newLayerElement, layerId);
    setLayerAccordion(newLayerElement, layerId);
    setSettingsAccordion(newLayerElement, layerId);
    initalizeClustering(newLayerElement, layerId);
    initializeTooltips(newLayerElement, layerId);
    newLayerElement.css('display', 'block');
    resolution(newLayerElement);
  });
}

function initializeLayer(layerId) {
  return new Promise((resolution, rejection) => {
    var hideLayer = Object.keys(ArcheoMap.getMapLayers()).length > 0;
    createLayerElement(layerId, hideLayer).then(() => {
      /* Initialize filter values */
      ArcheoEvents.broadcast('layer-initialization', null, {
        layerId: layerId
      });
      resolution();
    });
  });
}

function broadcastLayerCreation(layerId, delayTime = null) {
  return ArcheoEvents.broadcast('layer-add', '#new-layer-button', {
    layerId: layerId,
    settings: ArcheoSession.get().layers[layerId].settings
  }, delayTime);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/new-layer.js


function initializeNewLayerButtonEvents() {
  let session = ArcheoSession.get();
  $('#new-layer-button').on('dataset-add dataset-remove', function (event) {
    let datasetsCount = session.datasets._counter;
    if (datasetsCount > 0) $('#new-layer-button').removeAttr('disabled');else $('#new-layer-button').attr("disabled", true);
  });
  $('#new-layer-button').on('click', async function () {
    /* Disable loading screen on layer initialization */
    $('#new-layer-button').one('layer-initialization', () => {
      ArcheoUtilities.setButtonLoaded('#new-layer-button');
    });
    /* Enable loading screen on add layer click event */

    ArcheoUtilities.setButtonLoading('#new-layer-button').then(async () => {
      var layerId = ArcheoSession.addLayer();
      broadcastLayerCreation(layerId);
      initializeLayer(layerId);
    });
  });
}

/* harmony default export */ const new_layer = (initializeNewLayerButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/time/utilities.js
function completeCallTimeData(data) {
  let timelineInfo = ArcheoSession.get().filters.timeline;
  data.showPresent = data.showPresent || timelineInfo.showPresent;
  data.yearTo = data.yearTo || timelineInfo.yearTo;
  data.yearTo = data.yearTo || timelineInfo.yearTo;
  data.yearFrom = data.yearFrom || timelineInfo.yearFrom;
  data.minYear = data.minYear || timelineInfo.minYear;
  data.maxYear = data.maxYear || timelineInfo.maxYear;
  return data;
}

function initializeTimelineConfigCheckboxEvent($checkbox, option) {
  $checkbox.on('click', function (event) {
    /* The button status will be changed only after click event, thus negation */
    var isToggled = !$checkbox.hasClass('active'); // negation applied on purpose

    ArcheoSession.get().filters.timeline[option] = isToggled;
    ArcheoEvents.broadcast('time-filter-update', null, {});
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/time/index.js


function onTimelineUpdate(selector = "#timeline") {
  $(selector).on('time-filter-update session-load', function (event, data = {}) {
    completeCallTimeData(data);
    $(event.target).data("ionRangeSlider").update({
      min: data.minYear,
      max: data.maxYear,
      from: data.yearFrom,
      to: data.yearTo
    });
  });
}

function onTimelineRangeUpdate(selector = "#timeline-range") {
  $(selector).on('time-filter-update session-load', function (event, data = {}) {
    completeCallTimeData(data);
    $(event.target).data("ionRangeSlider").update({
      from: data.minYear,
      to: data.maxYear
    });
  });
}

function initializeTimelineSettingsEvents() {
  $('#time-filter').on('time-filter-update session-load', function (event, data = {}) {
    completeCallTimeData(data);
    let $min = $(event.target).find('#filter-min-max .input-years-from input');
    let $max = $(event.target).find('#filter-min-max .input-years-to input');
    $min.val(data.minYear);
    $max.val(data.maxYear);
    $min.trigger('change');
    $max.trigger('change');
    let $from = $(event.target).find('#filter-from-to .input-years-from input');
    let $to = $(event.target).find('#filter-from-to .input-years-to input');
    $from.attr('min', data.minYear);
    $from.attr('max', data.maxYear);
    $to.attr('min', data.minYear);
    $to.attr('max', data.maxYear);
    $from.val(data.yearFrom);
    $to.val(data.yearTo);
    $from.trigger('change');
    $to.trigger('change');
    let minMaxedFrom = parseInt($from.attr('value'));
    let minMaxedTo = parseInt($to.attr('value'));
    data.yearFrom = minMaxedFrom;
    data.yearTo = minMaxedTo;
  });
  $('#filter-min-max input').on('change', function (event) {
    if (ArcheoUtilities.isHumanTriggeredEvent(event)) {
      let fromValue = parseInt($('#filter-min-max .input-years-from input').attr('value'));
      let toValue = parseInt($('#filter-min-max .input-years-to input').attr('value'));
      if (!event.isTrigger) ArcheoEvents.broadcast('time-filter-update', null, {
        minYear: fromValue,
        maxYear: toValue
      }, 100);
    }
  });
  $('#filter-from-to input').on('change', function (event) {
    if (ArcheoUtilities.isHumanTriggeredEvent(event)) {
      let fromValue = parseInt($('#filter-from-to .input-years-from input').attr('value'));
      let toValue = parseInt($('#filter-from-to .input-years-to input').attr('value'));
      if (!event.isTrigger) ArcheoEvents.broadcast('time-filter-update', null, {
        yearFrom: fromValue,
        yearTo: toValue
      }, 100);
    }
  });
}

function initializePresetTimeButtonEvents() {
  $('#present-switch').parent().on('click', function (event) {
    let value = !$('#present-switch').prop('checked'); // negated on purpose;

    if (ArcheoUtilities.isHumanTriggeredEvent(event)) {
      ArcheoSession.get().filters.timeline.showPresent = value;
      ArcheoEvents.broadcast('time-present-filter-update', '#present-switch', {
        showPresent: value
      }, 100);
    }
  });
  $('#present-switch').on('time-present-filter-update session-load', function (event, data) {
    completeCallTimeData(data);
    let doShowPresent = data.showPresent;
    if (doShowPresent !== $('#present-switch').prop('checked')) $('#present-switch').parent().trigger('click');
  });
}

function initializePresentTimeCheckboxEvents() {
  $('#time-filter-present-toggle').on('click update', function (event) {
    let $obj = $(event.target);
    let value;
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      value = !$obj.hasClass('active'); // negation applied intentionally
    else value = $obj.hasClass('active');

    if (ArcheoUtilities.isHumanTriggeredEvent(event)) {
      ArcheoSession.get().filters.timeline.showPresent = value;
      ArcheoEvents.broadcast('time-present-filter-update', '#time-filter-present-toggle', {
        showPresent: value
      }, 100);
    }
  });
  $('#time-filter-present-toggle').on('time-present-filter-update session-load', function (event, data) {
    let $obj = $(event.target);
    completeCallTimeData(data);
    let doShowPresent = data.showPresent;

    if (doShowPresent === true) {
      $obj.addClass('active');
    } else {
      $obj.removeClass('active');
    }
  });
} // completeCallTimeData(data); 


function filterTriggerEvents() {
  let $trigger = $('#time-filter_trigger');
  $trigger.on('click', function (event) {
    /* The button status will be changed only after click event, thus negation */
    var isToggled = !$(event.target).hasClass('active'); // negation applied on purpose

    ArcheoSession.get().filters.timeline.isActive = isToggled;
    ArcheoEvents.broadcast('time-filter-update', null, {});
  });
}

function initializeMoreTimeFilteringEvents() {
  initializeTimelineConfigCheckboxEvent($('#time-filter-regions-filter-toggle'), 'doFilterRegions');
}

function initializeAppearanceEvents() {
  initializeTimelineConfigCheckboxEvent($('#time-filter-propability-toggle'), 'showPropability');
}

function initializeOptimizationEvents() {
  initializeTimelineConfigCheckboxEvent($('#time-filter-onfinish-toggle'), 'eventOnFinish');
}

function time_initializeSessionLoadEvents() {
  $('#time-filter_trigger').on('session-load', function () {
    let isActive = ArcheoSession.get().filters.timeline.isActive;
    ArcheoUI.toggleCheckbox($('#time-filter_trigger'), isActive);
  });
  $('#time-filter-regions-filter-toggle').on('session-load', function () {
    let doFilterRegions = ArcheoSession.get().filters.timeline.doFilterRegions;
    ArcheoUI.toggleCheckbox($('#time-filter-regions-filter-toggle'), doFilterRegions);
  });
  $('#time-filter-propability-toggle').on('session-load', function () {
    let showPropability = ArcheoSession.get().filters.timeline.showPropability;
    ArcheoUI.toggleCheckbox($('#time-filter-propability-toggle'), showPropability);
  });
  $('#time-filter-onfinish-toggle').on('session-load', function () {
    let eventOnFinish = ArcheoSession.get().filters.timeline.eventOnFinish;
    ArcheoUI.toggleCheckbox($('#time-filter-onfinish-toggle'), eventOnFinish);
  });
}

function initializeTimelineEvents() {
  onTimelineUpdate("#timeline");
  onTimelineRangeUpdate("#timeline-range");
  initializeTimelineSettingsEvents();
  initializePresetTimeButtonEvents();
  filterTriggerEvents();
  initializePresentTimeCheckboxEvents();
  initializeMoreTimeFilteringEvents();
  initializeAppearanceEvents();
  initializeOptimizationEvents();
  time_initializeSessionLoadEvents();
}

/* harmony default export */ const time = (initializeTimelineEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/attribute/tree-select.js


function attribute_tree_select_ancestorSelectEvents() {
  let $ancestorSearchInput = $('#attribute-filtering-ancestors');
  let $ancestorSearchButton = $('#attribute-filtering-ancestors-button');
  let $selectValues = $('#select-attribute-filter-browser');
  $ancestorSearchButton.on('click', function () {
    let treeIndex = $ancestorSearchInput.attr('searched-value');
    let attributesValuesIds = $selectValues.find('option:not(.hidden)').get().map(el => $(el).val());
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeFiltering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    promiseGetAncestorsAttributes(attributeEntity, attributesValuesIds, treeIndex).then(function (ancestors) {
      ancestors.forEach(ancestor => {
        $selectValues.find(`option:not(.hidden)[value="${ancestor.name}"]`).prop('selected', true);
      });
    });
  });
}

function attribute_tree_select_descendantsSelectEvents() {
  let $descendantsSearchInput = $('#attribute-filtering-descendants');
  let $descendantsSearchButton = $('#attribute-filtering-descendants-button');
  let $selectValues = $('#select-attribute-filter-browser');
  $descendantsSearchButton.on('click', function () {
    let treeIndex = $descendantsSearchInput.attr('searched-value');
    let attributesValuesIds = $selectValues.find('option:not(.hidden)').get().map(el => $(el).val());
    let clusteringConfig = ArcheoCache.getTemporaryEntry('attributeFiltering');
    let attributeId = clusteringConfig.attributeId;
    let attributeType = clusteringConfig.attributeType;
    let allAttributes = MapUtilities.getAttributesDict();
    let attributeEntity = allAttributes[attributeId].entity;
    promiseGetDescendantsAttributes(attributeEntity, attributesValuesIds, treeIndex).then(function (descendants) {
      descendants.forEach(descendant => {
        $selectValues.find(`option:not(.hidden)[value="${descendant.name}"]`).prop('selected', true);
      });
    });
  });
}

function attribute_tree_select_treeSelectEvents() {
  attribute_tree_select_ancestorSelectEvents();
  attribute_tree_select_descendantsSelectEvents();
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/attribute/utilities.js
function attribute_utilities_resetTreeSearch() {
  let $descendantsSearchInput = $('#attribute-filtering-descendants');
  let $ancestorSearchInput = $('#attribute-filtering-ancestors');
  $descendantsSearchInput.val('');
  $descendantsSearchInput.attr('searched-label', '');
  $descendantsSearchInput.attr('searched-value', '');
  $ancestorSearchInput.val('');
  $ancestorSearchInput.attr('searched-label', '');
  $ancestorSearchInput.attr('searched-value', '');
}

function attribute_utilities_toggleTreeSearch(attributeType, clusteringObjectName = 'attributes') {
  let $treeClusteringOptionsPanel = $('#tree-filter-select-panel');
  if (attributeType === 'tree' && clusteringObjectName === 'attributes') $treeClusteringOptionsPanel.removeClass('hidden');else $treeClusteringOptionsPanel.addClass('hidden');
}

function toggleAdmixture(attributeType, clusteringObjectName = 'attributes') {
  let $admixturePanel = $('#admixture-filtering');
  if (attributeType === 'admixture' && clusteringObjectName === 'attributes') $admixturePanel.removeClass('hidden');else $admixturePanel.addClass('hidden');
}

function utilities_resetFiltering(filtered = false, triggerEvent = true) {
  let filteringConfig = ArcheoCache.getTemporaryEntry('attributeFiltering');
  let attributeId = filteringConfig.attributeId;
  let attributeType = filteringConfig.attributeType;

  if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
    let legend = ArcheoSession.getAttributeLegend(attributeId);
    let attributesLegend;
    if (attributeType === 'admixture') attributesLegend = ArcheoSession.getAdmixtureLegend(attributeId, true);else attributesLegend = ArcheoSession.getAttributeLegend(attributeId, true);
    let attributesValues = Object.keys(attributesLegend);

    for (var i = 0; i < attributesValues.length; ++i) {
      let value = attributesValues[i];
      legend[value].filtered = filtered;
    }

    if (triggerEvent) {
      ArcheoEvents.broadcast('filter-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType
      });
      utilities_updateBrowser();
    }
  }
}

function utilities_updateBrowser(event, params = {}) {
  if (!ArcheoUtilities.isValid(params.doNotRefreshBrowser)) {
    let $selectAttribute = $('#select-filter-attribute');
    let $selectAttributeType = $('#select-filter-attribute-type');
    $selectAttribute.trigger('update');
    $selectAttributeType.trigger('update');
  }
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/attribute/tree-level.js



function treeLevelFilteringEvents() {
  let $treeLevelSlider = $('#attribute-filtering-tree-level-slider');
  $('#attribute-filtering-tree-level-button').on('click', function () {
    let treeLevelFrom = $treeLevelSlider.data("from");
    let treeLevelTo = $treeLevelSlider.data("to");
    let filteringConfig = ArcheoCache.getTemporaryEntry('attributeFiltering');

    if (ArcheoUtilities.isValid(filteringConfig)) {
      let attributeId = filteringConfig.attributeId;
      let attributeType = filteringConfig.attributeType;

      if (attributeType === 'tree') {
        let legend = ArcheoSession.getAttributeLegend(attributeId);
        let attributesValuesIds = Object.keys(ArcheoSession.getAttributeLegend(attributeId, true));
        /* Update session */

        ArcheoSession.get().filters.attributes.configs[attributeId].treeLevel = [treeLevelFrom, treeLevelTo];

        if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
          let allAttributes = MapUtilities.getAttributesDict();
          let attributeEntity = allAttributes[attributeId].entity;
          promiseFitlerAttributesByTreeLevel(attributeEntity, attributesValuesIds, treeLevelFrom, treeLevelTo).then(function (values) {
            /* Reset the filtering */
            utilities_resetFiltering(true, false);
            /* Apply filtering for values in-between the level range */

            for (var i = 0; i < values.length; ++i) {
              let valueName = values[i].name;
              if (valueName in legend) legend[valueName].filtered = false;
            }

            ArcheoEvents.broadcast('filter-attribute-change', null, {
              attributeId: attributeId,
              attributeType: attributeType
            });
          });
        }
      }
    }
  });
}

/* harmony default export */ const attribute_tree_level = (treeLevelFilteringEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/attribute/admixture-proportions.js
function admixtureOptionsSliderEvents(elementsDict, attributeValue, attributeId, attributeType) {
  var eventFunction = async function (data) {
    let proportionValue = data.from;
    /* Change proportion for this attribute value */

    let valueSettings = ArcheoSession.get().filters.attributes.configs[attributeId].proportions[attributeValue];
    valueSettings.value = proportionValue;
    ArcheoEvents.broadcast('filter-attribute-change', null, {
      attributeId: attributeId,
      attributeType: attributeType
    });
  };

  elementsDict.sliderObj.data("ionRangeSlider").update({
    onFinish: eventFunction
  });
}

function admixtureOptionsOperatorEvents(elementsDict, attributeValue, attributeId, attributeType) {
  elementsDict.operatorOptionObj.on('change update', 'input', null, function (event) {
    var $input = $(event.target);
    var operatorName = $input.attr('value');
    /* Change proportion for this attribute value */

    ArcheoSession.get().filters.attributes.configs[attributeId].proportions[attributeValue].operator = operatorName;
    /* Change UI */

    let $sliderWrapper = elementsDict.proportion.find('.admixture-proportion-slider-wrapper');
    $sliderWrapper.attr('operator', operatorName);
    ArcheoEvents.broadcast('filter-attribute-change', null, {
      attributeId: attributeId,
      attributeType: attributeType
    });
  });
}

function initializeAdmixtureOptionsEvents(elementsDict, attributeValue, attributeId, attributeType) {
  admixtureOptionsSliderEvents(elementsDict, attributeValue, attributeId, attributeType);
  admixtureOptionsOperatorEvents(elementsDict, attributeValue, attributeId, attributeType);
}

function initializeAdmixtureOptions(attributeId, attributeType, attributes) {
  let $admixturePanel = $('#admixture-filtering');
  let $admixtureOptionsPanel = $('#admixture-filtering-options');
  let filterConfigsDict = ArcheoSession.get().filters.attributes.configs;

  if (attributeType === 'admixture' && attributeId in filterConfigsDict) {
    $admixtureOptionsPanel.empty();
    Object.keys(attributes).forEach(attributeValue => {
      let $proportion = $(`#admixture-proportion-template`).clone();
      /* Register new proportions settings if none */

      let valueSettingsDict = filterConfigsDict[attributeId].proportions;
      if (!(attributeValue in valueSettingsDict)) valueSettingsDict[attributeValue] = {
        value: 0,
        operator: 'geq'
      };
      /* Assign new dataset id */

      $proportion.attr('id', `${attributeValue}_proportion-option`);
      $proportion.appendTo($admixtureOptionsPanel);
      /* Assign title */

      let $proportionTitle = $proportion.find('.title');
      $proportionTitle.html(`<span>"<b>${attributeValue}</b>" filter options</span>`);
      /* Change operators ids */

      let $operatorOption = $proportion.find('#proportion-operator-option');
      let operatorOptionsId = `${attributeValue}_proportion-operator-option`;
      $operatorOption.attr('id', operatorOptionsId);
      $operatorOption.find('input').attr('name', operatorOptionsId);
      $operatorOption.addClass('proportion-operator-option');
      /* Initialize slider */

      let $slider = $proportion.find('#admixture-proportion-slider');
      ArcheoUI.initializeSlider($slider, {
        min: 0,
        max: 1,
        from: valueSettingsDict[attributeValue].value,
        step: 0.01,
        type: 'single',
        extra_classes: 'admixture-proportion-slider-wrapper',
        onUpdate: function (data) {
          let valueSettings = ArcheoSession.get().filters.attributes.configs[attributeId].proportions[attributeValue];
          let $sliderWrapper = $proportion.find('.admixture-proportion-slider-wrapper');
          $sliderWrapper.attr('operator', valueSettings.operator);
        }
      });
      $slider.removeAttr('id');
      let $sliderWrapper = $proportion.find('.admixture-proportion-slider-wrapper');
      /* Initialize operator */

      $sliderWrapper.attr('operator', valueSettingsDict[attributeValue].operator);
      let $operatorWrapper = $proportion.find('.proportion-operator-option');
      ArcheoUI.toggleRadiobutton($operatorWrapper, valueSettingsDict[attributeValue].operator);
      initializeAdmixtureOptionsEvents({
        'proportion': $proportion,
        'sliderObj': $slider,
        'sliderWrapperObj': $sliderWrapper,
        'operatorOptionObj': $operatorOption
      }, attributeValue, attributeId, attributeType);
      $proportion.removeClass('hidden');
    });
    $admixturePanel.removeClass('hidden');
  } else {
    $admixturePanel.addClass('hidden');
  }
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/attribute/index.js









function initializeFilterSwitch() {
  let $switch = $('#attribute-filter-switch');
  let $filteringPanel = $('#attribute-filtering-panel');
  $switch.on('click update', function (event) {
    let value = !$switch.hasClass('active'); // negation applied intentionally

    let cache = ArcheoCache.getTemporaryEntry('attributeFiltering');
    let attributeId = cache.attributeId;

    if (value === true) {
      $filteringPanel.removeAttr('disabled');
      ArcheoSession.get().filters.attributes.available.push(attributeId);
    } else {
      $filteringPanel.attr('disabled', '');
      ArcheoSession.get().filters.attributes.available.removeEl(attributeId);
    }

    ArcheoEvents.broadcast('filter-attribute-change', null, {
      attributeId: cache.attributeId,
      attributeType: cache.attributeType
    });
  });
}

function attribute_initializeAttributesSelectButtons() {
  let $selectAllButt = $('#attribute-filter-select-all');
  let $unselectAllButt = $('#attribute-filter-unselect-all');
  let $selectValues = $('#select-attribute-filter-browser');

  let filterButtonFunction = function (doSelect) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');

      if (doSelect) {
        $selectedOptions.prop('selected', true);
      } else {
        $selectedOptions.prop('selected', false);
      }
    };
  };

  $selectAllButt.on('click', filterButtonFunction(true));
  $unselectAllButt.on('click', filterButtonFunction(false));
  let $selectInvert = $('#attribute-filter-select-invert');
  $selectInvert.on('click', function () {
    let $allOptions = $selectValues.find('option:not(.hidden:selected)');
    let $selectedOptions = $selectValues.find('option:not(.hidden):selected');
    $allOptions.prop('selected', true);
    $selectedOptions.prop('selected', false);
  });
}

function attribute_initializeAttriutesFilterButtons() {
  let $filterAllButt = $('#attribute-filter-filter-all');
  let $unfilterAllButt = $('#attribute-filter-unfilter-all');
  let $selectValues = $('#select-attribute-filter-browser');

  let filterButtonFunction = function (doFilterOut) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:selected:not(.hidden)');
      let attributeId = $selectValues.attr('attributeId');
      let attributeType = $selectValues.attr('attributeType');
      let legend = ArcheoSession.getAttributeLegend(attributeId);
      if (doFilterOut) $selectedOptions.addClass('filtered');else $selectedOptions.removeClass('filtered');
      $selectedOptions.each(index => {
        let value = $($selectedOptions[index]).val();
        legend[value].filtered = doFilterOut;
      });
      ArcheoEvents.broadcast('filter-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType
      });
    };
  };

  $filterAllButt.on('click', filterButtonFunction(true));
  $unfilterAllButt.on('click', filterButtonFunction(false));
}

function attribute_initializeUseRegexEvent() {
  let $attributeRegexCheckbox = $('#attribute-filter-regex');
  let $attributeSearch = $('#filter-attribute-search');
  $attributeRegexCheckbox.on('click', function (event) {
    let value = !$attributeRegexCheckbox.hasClass('active'); // negation applied intentionally

    if (value) {
      $attributeSearch.attr('placeholder', "Filter attributes by regex...");
      $attributeSearch.attr('regex', "");
      $attributeSearch.val('');
    } else {
      $attributeSearch.attr('placeholder', "Filter attributes...");
      $attributeSearch.removeAttr('regex');
      $attributeSearch.val('');
    }
  });
}

function attribute_initializeFilteringEvents() {
  let filteringFunction = function ($selectValues) {
    return function (event) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)');
      let cache = ArcheoCache.getTemporaryEntry('attributeFiltering');
      let attributeId = cache.attributeId;
      let attributeType = cache.attributeType;
      let legend = ArcheoSession.getAttributeLegend(attributeId);
      let selectedCount = $selectedOptions.length;
      let filteredCount = $selectedOptions.filter('.filtered').length;

      if (filteredCount / selectedCount >= 0.5) {
        $selectedOptions.removeClass('filtered');
        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          legend[value].filtered = false;
        });
      } else {
        $selectedOptions.addClass('filtered');
        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          legend[value].filtered = true;
        });
      }

      ArcheoEvents.broadcast('filter-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType,
        doNotRefreshBrowser: true
      });
    };
  };

  let $selectAttributeValues = $('#select-attribute-filter-browser');
  $selectAttributeValues.on('dblclick update', filteringFunction($selectAttributeValues));
}

function attribute_initializeSearchEvents() {
  let searchEventFunction = function ($selectValues) {
    return function (event) {
      let $search = $(event.target);
      let searchValue = $(event.target).val();
      let doUseRegex = ArcheoUtilities.isValid($search.attr('regex'));
      $selectValues.find('option').filter(async function (index) {
        let $this = $(this);
        let optionValue = $this.val();
        let isMatched;

        try {
          if (doUseRegex) isMatched = optionValue.match(new RegExp(`${searchValue}`));else isMatched = optionValue.match(new RegExp(`^${ArcheoUtilities.escapeRegex(searchValue)}`));
        } catch (error) {
          isMatched = false;
        }

        if (!isMatched) $this.addClass('hidden');else $this.removeClass('hidden');
      });
    };
  };

  let $selectAttributesValues = $('#select-attribute-filter-browser');
  let $attributesSearch = $('#filter-attribute-search');
  $attributesSearch.on('input', searchEventFunction($selectAttributesValues));
}

function attribute_initializeAttributeSelectEvents() {
  let $selectAttribute = $('#select-filter-attribute');
  let $selectAttributeType = $('#select-filter-attribute-type');
  let $selectValues = $('#select-attribute-filter-browser');
  let $ancestorSearchInput = $('#attribute-filtering-ancestors');
  let $descendantsSearchInput = $('#attribute-filtering-descendants');
  let $filterSwitch = $('#attribute-filter-switch');
  let $filterSwitchWrapper = $($filterSwitch.parent());
  let $filteringPanel = $('#attribute-filtering-panel');
  let $treeLevelPanel = $('#tree-level-filtering');
  let $admixturePanel = $('#admixture-filtering');
  var treeLevelSliderData = {
    from: 1,
    to: 100
  };

  const attributeChangeEventFunction = function (event) {
    var $select = $(event.target);
    /* Update cache on interface event */

    if (event.type === 'changed') {
      let attributeId = $select.val();

      if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
        if (!(attributeId in attributesTypes_namespaceObject)) {
          $('#attribute-filter-wrapper').removeClass('hidden');
        } else {
          $('#attribute-filter-wrapper').addClass('hidden');
        }
      } else $('#attribute-filter-wrapper').addClass('hidden');

      ArcheoCache.setTemporaryEntry('attributeFiltering', {
        attributeId: attributeId,
        attributeName: $select.find(':selected').val(),
        attributeType: $select.find(':selected').attr('type')
      });
    }

    let cache = ArcheoCache.getTemporaryEntry('attributeFiltering');
    let attributeId = cache.attributeId;
    let attributeType = cache.attributeType;

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      let params = {
        attributeId: attributeId,
        attributeType: attributeType,
        eventType: event.type
      };
      ArcheoRequests.incorporateAttributes(params).then(() => {
        if (event.type === 'changed') $select.trigger('clustering-attribute-change', params);else $select.trigger('update', params);
      });
    }
  };

  const updateUI = function (event, data) {
    let cache = ArcheoCache.getTemporaryEntry('attributeFiltering');
    let attributeId = cache.attributeId;
    let attributeName = cache.attributeName;
    let attributeType = cache.attributeType;
    let attributeChangeEvent = ArcheoUtilities.isValid(data) ? data.eventType : undefined;

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      var $select = $(event.target);
      let typesWrapper = $select.parent().next();
      let filtersConfig = ArcheoSession.get().filters.attributes; // Initialize UI state on attribute change //

      if (attributeChangeEvent === 'changed') {
        if (attributeId in attributesTypes_namespaceObject) {
          typesWrapper.removeClass('d-none');
          ArcheoUI.setSelectpicker($selectAttributeType, attributesTypes_namespaceObject[attributeId], true); // Reset UI //

          $filteringPanel.attr('disabled', '');
          $filterSwitchWrapper.addClass('hidden');
          $treeLevelPanel.addClass('hidden');
          $admixturePanel.addClass('hidden');
          return;
        } else if (attributeType in attributesTypes_namespaceObject && attributeId in attributesTypes_namespaceObject[attributeType]) {
          // Reset UI //
          $filteringPanel.removeAttr('disabled');
          $filterSwitchWrapper.removeClass('hidden');
          $treeLevelPanel.addClass('hidden');
        } else {
          typesWrapper.addClass('d-none');
        }

        if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
          attribute_utilities_resetTreeSearch();
          initializeTreeSearch($ancestorSearchInput, attributeId);
          initializeTreeSearch($descendantsSearchInput, attributeId); // Initialize the switch with session info //

          $filterSwitchWrapper.removeClass('hidden');

          if (filtersConfig.available.has(attributeId)) {
            $filterSwitch.addClass('active');
            $filteringPanel.removeAttr('disabled');
          } else {
            $filterSwitch.removeClass('active');
            $filteringPanel.attr('disabled', '');
          }

          attribute_utilities_toggleTreeSearch(attributeType);
          toggleAdmixture(attributeType);
          let attributeConfig = ArcheoSession.get().filters.attributes.configs[attributeId];

          if (ArcheoUtilities.isValid(attributeConfig)) {
            treeLevelSliderData = {
              from: attributeConfig.treeLevel[0],
              to: attributeConfig.treeLevel[1]
            };
          } else {
            // Register attribute config entry if neccessary //
            ArcheoSession.get().filters.attributes.configs[attributeId] = {
              id: attributeId,
              name: attributeName,
              type: attributeType,
              treeLevel: [0, 100],
              proportions: {}
            };
          } // Update state of other UI elements //


          updateTreeLevelSlider($treeLevelPanel, $('#attribute-filtering-tree-level-slider'), attributeId, attributeType, treeLevelSliderData);
        } else {
          $filteringPanel.attr('disabled', '');
          $filterSwitchWrapper.addClass('hidden');
        }
      }
      /* Update browser */


      var attributesDict = ArcheoUtilities.deepCloneObject(groups_namespaceObject);
      /*"special": {
      	"isOptgroup": true,
      	"name": "Special attributes",
      	"options": {
      		"MISSING": {
      			"name": "missing",
      			"filtered": false*/

      if (attributeType === 'admixture') {
        let legend = ArcheoSession.getAdmixtureLegend(attributeId, true, false, true);
        /* Prepare special attributes */
        //delete attributesDict.special.options.MISSING;

        if ('OTHER' in legend) {
          attributesDict.special.options.OTHER.filtered = legend.OTHER.filtered;
          delete legend.OTHER;
        }

        if ('MISSING' in legend) {
          attributesDict.special.options.MISSING.filtered = legend.MISSING.filtered;
          delete legend.MISSING;
        }

        attributesDict.attributes.options = legend;
        /* Update admixtures' options */

        if (event.type !== 'update') initializeAdmixtureOptions(attributeId, attributeType, attributesDict.attributes.options);
      } else {
        let legend = ArcheoSession.getAttributeLegend(attributeId, true, true, false);

        if ('OTHER' in legend) {
          attributesDict.special.options.OTHER.filtered = legend.OTHER.filtered;
          delete legend.OTHER;
        }

        if ('MISSING' in legend) {
          attributesDict.special.options.MISSING.filtered = legend.MISSING.filtered;
          delete legend.MISSING;
        }

        attributesDict.attributes.options = legend;
      }

      ArcheoUI.setSelect($selectValues, attributesDict); // error

      $selectValues.attr('attributeId', attributeId);
      $selectValues.attr('attributeType', attributeType);
    }
  };
  /* Change layer attribute */


  $selectAttribute.on('changed.bs.select dataset-add dataset-remove', attributeChangeEventFunction);
  $selectAttribute.on('clustering-attribute-change update', updateUI);
  /* Change layer attribute type if available */

  $selectAttributeType.on('changed.bs.select dataset-add dataset-remove', attributeChangeEventFunction);
  $selectAttributeType.on('clustering-attribute-change update', updateUI);
}

function attribute_resetButtonEvents() {
  let $resetButton = $('#attribute-filter-reset');
  $resetButton.on('click', () => utilities_resetFiltering());
}

function attribute_filterTriggerEvents() {
  let $trigger = $('#attribute-filter_trigger');
  $trigger.on('click', function (event) {
    /* The button status will be changed only after click event, thus negation */
    var isToggled = !$(event.target).hasClass('active'); // negation applied on purpose

    ArcheoSession.get().filters.attributes.isActive = isToggled;
    let cache = ArcheoCache.getTemporaryEntry('attributeFiltering');
    ArcheoEvents.broadcast('filter-attribute-change', null, {
      attributeId: cache.attributeId,
      attributeType: cache.attributeType
    });
  });
}

function attribute_initializeSessionLoadEvents() {
  $('#attribute-filter_trigger').on('session-load', function () {
    let isActive = ArcheoSession.get().filters.attributes.isActive;
    ArcheoUI.toggleCheckbox($('#attribute-filter_trigger'), isActive);
  });
  $('#select-filter-attribute').on('session-load', function () {
    $('#select-filter-attribute').selectpicker('val', '');
  });
}

function initializeAttributeFilterEvents() {
  initializeFilterSwitch();
  attribute_initializeAttributeSelectEvents();
  attribute_initializeSearchEvents();
  attribute_initializeFilteringEvents();
  attribute_initializeUseRegexEvent();
  attribute_initializeAttributesSelectButtons();
  attribute_initializeAttriutesFilterButtons();
  attribute_tree_select_treeSelectEvents();
  attribute_tree_level();
  attribute_resetButtonEvents();
  attribute_filterTriggerEvents();
  attribute_initializeSessionLoadEvents();
}

/* harmony default export */ const filters_attribute = (initializeAttributeFilterEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/region/utilities.js
function region_utilities_resetFiltering(filtered = false, triggerEvent = true) {
  let $regionSelect = $('#select-filter-region');
  let regionTypeId = $regionSelect.val().split('__')[1];

  if (ArcheoUtilities.isValidNonEmptyString(regionTypeId)) {
    let regions = ArcheoSession.getRegionLegend(regionTypeId, true);
    /* Reset regions filtering */

    Object.keys(regions).forEach(key => {
      regions[key].filtered = filtered;
    });

    if (triggerEvent) {
      ArcheoEvents.broadcast('filter-region-change', null, {
        regionTypeId: regionTypeId
      });
      region_utilities_updateBrowser();
    }
  }
}

function region_utilities_updateBrowser() {
  let $regionSelect = $('#select-filter-region');
  $regionSelect.trigger('update');
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/region/index.js



function initializeRegionsFilterButtons() {
  let $selectAllButt = $('#region-filter-select-all');
  let $unselectAllButt = $('#region-filter-unselect-all');
  let $selectValues = $('#select-filter-region-values');

  let filterButtonFunction = function (doSelect) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');

      if (doSelect) {
        $selectedOptions.prop('selected', true);
      } else {
        $selectedOptions.prop('selected', false);
      }
    };
  };

  $selectAllButt.on('click', filterButtonFunction(true));
  $unselectAllButt.on('click', filterButtonFunction(false));
  let $selectInvert = $('#region-filter-select-invert');
  $selectInvert.on('click', function () {
    let $allOptions = $selectValues.find('option:not(.hidden:selected)');
    let $selectedOptions = $selectValues.find('option:not(.hidden):selected');
    $allOptions.prop('selected', true);
    $selectedOptions.prop('selected', false);
  });
}

function initializeRegionsSelectButtons() {
  let $filterAllButt = $('#region-filter-filter-all');
  let $unfilterAllButt = $('#region-filter-unfilter-all');
  let $selectValues = $('#select-filter-region-values');

  let filterButtonFunction = function (doFilterOut) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:selected:not(.hidden)');
      let regionTypeId = $selectValues.attr('regionTypeId');
      let legend = ArcheoSession.getRegionLegend(regionTypeId);
      if (doFilterOut) $selectedOptions.addClass('filtered');else $selectedOptions.removeClass('filtered');
      $selectedOptions.each(index => {
        let value = $($selectedOptions[index]).val();
        legend[value].filtered = doFilterOut;
      });
      ArcheoEvents.broadcast('filter-region-change', null, {
        regionTypeId: regionTypeId
      });
    };
  };

  $filterAllButt.on('click', filterButtonFunction(true));
  $unfilterAllButt.on('click', filterButtonFunction(false));
}

function initializeManualSelectEvents() {
  let $selectValues = $('#select-filter-region-values');
  $selectValues.on('change', function (event) {
    let $allSelectedOptions = $selectValues.find('option:selected');
    let $properSelectedOptions = $selectValues.find('option:selected:not(.hidden)');
    $allSelectedOptions.prop('selected', false);
    $properSelectedOptions.prop('selected', true);
  });
}

function region_initializeUseRegexEvent() {
  let $regionRegexCheckbox = $('#region-filter-regex');
  let $regionSearch = $('#filter-region-search');
  $regionRegexCheckbox.on('click', function (event) {
    let value = !$regionRegexCheckbox.hasClass('active'); // negation applied intentionally

    if (value) {
      $regionSearch.attr('placeholder', "Filter regions by regex...");
      $regionSearch.attr('regex', "");
      $regionSearch.val('');
    } else {
      $regionSearch.attr('placeholder', "Filter regions...");
      $regionSearch.removeAttr('regex');
      $regionSearch.val('');
    }
  });
}

function region_initializeFilteringEvents() {
  let filteringFunction = function ($selectValues) {
    return function (event) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)');
      let regionTypeId = ArcheoSession.get().filters.regions.regionTypeId;
      let legend = ArcheoSession.getRegionLegend(regionTypeId);
      let selectedCount = $selectedOptions.length;
      let filteredCount = $selectedOptions.filter('.filtered').length;

      if (filteredCount / selectedCount >= 0.5) {
        $selectedOptions.removeClass('filtered');
        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          legend[value].filtered = false;
        });
      } else {
        $selectedOptions.addClass('filtered');
        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          legend[value].filtered = true;
        });
      }

      ArcheoEvents.broadcast('filter-region-change', null, {
        regionTypeId: regionTypeId
      });
    };
  };

  let $selectRegionValues = $('#select-filter-region-values');
  $selectRegionValues.on('dblclick update', filteringFunction($selectRegionValues));
}

function region_initializeSearchEvents() {
  let searchEventFunction = function ($selectValues) {
    return function (event) {
      let $search = $(event.target);
      let searchValue = $(event.target).val();
      let doUseRegex = ArcheoUtilities.isValid($search.attr('regex'));
      $selectValues.find('option').filter(async function (index) {
        let $this = $(this);
        let optionValue = $this.val();
        let isMatched;

        try {
          if (doUseRegex) isMatched = optionValue.match(new RegExp(`${searchValue}`));else isMatched = optionValue.match(new RegExp(`^${ArcheoUtilities.escapeRegex(searchValue)}`));
        } catch (error) {
          isMatched = false;
        }

        if (!isMatched) $this.addClass('hidden');else $this.removeClass('hidden');
      });
    };
  };

  let $selectRegionsValues = $('#select-filter-region-values');
  let $regionsSearch = $('#filter-region-search');
  $regionsSearch.on('input', searchEventFunction($selectRegionsValues));
}

function initializeRegionSelectEvents() {
  let $selectRegion = $('#select-filter-region');
  let $selectValues = $('#select-filter-region-values');

  const regionChangeEventFunction = async function (event) {
    var $select = $(event.target);
    let regionTypeId = $select.val().split('__')[1];

    if (ArcheoUtilities.isValidNonEmptyString(regionTypeId)) {
      if (event.type === 'changed') $('#region-filter-wrapper').removeClass('hidden');
      let promises = [];
      /* Load data if it's missing */

      let regionsDict = ArcheoCache.getTemporaryEntry('regions');
      let isThisRegionDataAlreadyLoaded = regionTypeId in regionsDict && !ArcheoUtilities.isEmpty(regionsDict[regionTypeId]);

      if (!isThisRegionDataAlreadyLoaded) {
        promises.push(promiseFetchRegionsBasicData(regionTypeId));
      }

      Promise.all(promises).then(successFlags => {
        let areAllSuccessful = true;
        successFlags.forEach(isSuccess => {
          areAllSuccessful = areAllSuccessful && isSuccess;
        });

        if (areAllSuccessful) {
          let regions = ArcheoSession.getRegionLegend(regionTypeId, true);
          /* Filter out grouped regions */

          regions = ArcheoUtilities.filterObject(regions, ([key]) => !ArcheoUtilities.isValid(regions[key].group));
          ArcheoUI.setSelect($selectValues, regions);
          $selectValues.attr('regionTypeId', regionTypeId);
          ArcheoSession.get().filters.regions.regionTypeId = regionTypeId;
        } else alert("For some reason the region data couldn't be fetched. Please contact the administration.");
      });
    } else {
      if (event.type === 'changed') $('#region-filter-wrapper').addClass('hidden');
    }
  };
  /* Change layer region */


  $selectRegion.on('changed.bs.select update', regionChangeEventFunction);
}

function region_filterTriggerEvents() {
  let $trigger = $('#region-filter_trigger');
  $trigger.on('click', function (event) {
    /* The button status will be changed only after click event, thus negation */
    var isToggled = !$(event.target).hasClass('active'); // negation applied on purpose

    ArcheoSession.get().filters.regions.isActive = isToggled;
    let cache = ArcheoCache.getTemporaryEntry('attributeFiltering');
    ArcheoEvents.broadcast('filter-attribute-change', null, {
      attributeId: cache.attributeId,
      attributeType: cache.attributeType
    });
  });
}

function region_resetButtonEvents() {
  let $resetButton = $('#region-filter-reset');
  $resetButton.on('click', () => region_utilities_resetFiltering());
}

function region_initializeSessionLoadEvents() {
  $('#region-filter_trigger').on('session-load', function () {
    let isActive = ArcheoSession.get().filters.regions.isActive;
    ArcheoUI.toggleCheckbox($('#region-filter_trigger'), isActive);
  });
  $('#select-filter-region').on('session-load', function () {
    $('#select-filter-region').selectpicker('val', '');
  });
}

function initializeRegionFilterEvents() {
  initializeRegionSelectEvents();
  region_initializeSearchEvents();
  region_initializeFilteringEvents();
  region_initializeUseRegexEvent();
  initializeRegionsSelectButtons();
  initializeRegionsFilterButtons();
  region_filterTriggerEvents();
  initializeManualSelectEvents();
  region_initializeSessionLoadEvents();
  region_resetButtonEvents();
}

/* harmony default export */ const region = (initializeRegionFilterEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/index.js









function initializeRightSidebarUIEvents() {
  time();
  clustering();
  attribute();
  distance_slider();
  color();
  new_layer();
  filters_attribute();
  region();
}

/* harmony default export */ const right_sidebar = (initializeRightSidebarUIEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets-select.js
function initializeDatasetSelectEvents() {
  $('#select-query-dataset').on('changed.bs.select update', function (event) {
    let $obj = $(event.target).find(':selected');
    let datasetName = $obj.text();
    let datasetId = $obj.val();
    let entity = $obj.attr('entity');
    let database = $obj.attr('database');
    ArcheoEvents.broadcast('selected-dataset-update', '#select-query-dataset', {
      datasetName: datasetName,
      datasetId: datasetId,
      entity: entity,
      database: database
    });
    let queryTemplate = {
      'database': database,
      'objects': entity.toLowerCase(),
      'filters': {},
      'lang': document.documentElement.lang
    };
    $('#query-call-textarea').val(JSON.stringify(queryTemplate, null, 1));
  });
  /* Trigger it once for default filters query */

  $('#select-query-dataset').trigger('update');
}

/* harmony default export */ const datasets_select = (initializeDatasetSelectEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/filters-button.js
function initializeQueryFiltersButtonEvents() {
  $('#query-filters-button').on('query-builder-update selected-dataset-update', function (event) {
    let $button = $(event.target);
    let rulesCount = $('#query-builder').find('.rule-value-container').not(':empty').length;
    $button.find('.items-count').text(rulesCount);
  });
  $('#query-filters-button').trigger('selected-entity-update');
}

/* harmony default export */ const filters_button = (initializeQueryFiltersButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets/update-layers.js
function updateLayersOnDatasetChange() {
  $('html').on('dataset-update dataset-remove dataset-add', '.layer', function (event, data) {
    if (event.target === event.currentTarget) {
      // This assures that the code executes only for .layer object and not its children
      var $layer = $(event.target);
      var layerId = $layer.attr('id');

      if (!ArcheoUtilities.isValid(data.layerId) || data.layerId === layerId) {
        var $obj = $layer.find('select.select-layer-dataset');
        let datasetIds = ArcheoSession.get().datasets._order || [];
        let datasetDict = {};
        let layersSelectedDatasetId = ArcheoSession.get().layers[layerId].datasetId;
        let doesLayerSelectedDatasetStillExist = false;
        datasetIds.forEach(datasetId => {
          let dataset = ArcheoSession.get().datasets[datasetId];

          if (ArcheoUtilities.isValid(dataset)) {
            datasetDict[datasetId] = {
              name: dataset.name //subtext: entityTitle // i could change it to years range and features count

            };

            if (datasetId === layersSelectedDatasetId) {
              datasetDict[datasetId].selected = true;
              doesLayerSelectedDatasetStillExist = true;
            }
          }
        });
        ArcheoUI.setSelectpicker($obj, datasetDict, true, true);
        if (!doesLayerSelectedDatasetStillExist) $obj.trigger('changed.bs.select');
      }
    }
  });
}

function initializeDatasetEvents() {
  updateLayersOnDatasetChange();
}

/* harmony default export */ const update_layers = (initializeDatasetEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/utilities.js
function loadAllData(datasetId, samplingRatio = 1.0, shuffle = false) {
  // dataSource
  var features = ArcheoCache.getDatasetFeatures(datasetId);
  if (shuffle === true) features.shuffle();
  /* Sample */

  features = ArcheoUtilities.sampleArray(features, samplingRatio);
  ArcheoMap.setDataSourceFeatures(datasetId, features);
  return features;
}

function updateSessionWithTimeData(data) {
  let timelineInfo = ArcheoSession.get().filters.timeline;
  timelineInfo.yearTo = data.yearTo || timelineInfo.yearTo;
  timelineInfo.yearFrom = data.yearFrom || timelineInfo.yearFrom;
  timelineInfo.minYear = data.minYear || timelineInfo.minYear;
  timelineInfo.maxYear = data.maxYear || timelineInfo.maxYear;
  return data;
}


;// CONCATENATED MODULE: ./views/pages/map/utilities.js






function registerMapUtilities() {
  window.MapUtilities = {};
  /* Imported functions */

  MapUtilities.initializeLayer = initializeLayer;
  MapUtilities.broadcastDatasetCreation = broadcastDatasetCreation;
  MapUtilities.broadcastLayerCreation = broadcastLayerCreation;
  MapUtilities.fetchNewDataset = fetchNewDataset;
  MapUtilities.loadAllData = loadAllData;

  MapUtilities.removeLayers = function (layersIds) {
    if (!ArcheoUtilities.isArray(layersIds)) layersIds = [layersIds];
    layersIds.forEach(layerId => {
      /* Remove layer from map */
      ArcheoMap.removeLayer(layerId);
      /* Remove layer from cache */

      ArcheoCache.removeLayer(layerId);
      /* Remove layer from legend */

      ArcheoLegend.removeLayer(layerId);
      /* Remove layer from interface */

      $(`#${layerId}`).remove();
      /* Remove layer from session */

      ArcheoSession.removeLayers(layerId);
    });
  };

  MapUtilities.removeDatasets = function (datasetIds) {
    if (!ArcheoUtilities.isArray(datasetIds)) datasetIds = [datasetIds];
    datasetIds.forEach(datasetId => {
      /* Remove dataset from interface */
      $(`#${datasetId}`).remove();
      /* Remove dataset from session */

      ArcheoSession.removeDatasets(datasetId); //ArcheoEvents.broadcast("dataset-update", '#dataset-template', {datasetId: datasetId});

      ArcheoEvents.broadcast("dataset-remove", null, {
        datasetId: datasetId
      });
      /* Remove dataset from cache */

      ArcheoCache.removeDataset(datasetId);
    });
  };

  MapUtilities.loadDatasets = function (datasetsIds) {
    return new Promise(function (resolution, rejection) {
      // Create datasets
      let promises = [];

      if (datasetsIds.length > 0) {
        datasetsIds.forEach(function (datasetId) {
          promises.push(new Promise(async function (resolution, rejection) {
            MapUtilities.fetchNewDataset(datasetId).then(() => {
              MapUtilities.broadcastDatasetCreation(datasetId);
              resolution(true);
            }).catch(() => {
              resolution(false);
            });
          }));
        });
      }

      Promise.all(promises).then(results => {
        resolution();
      });
    });
  };

  MapUtilities.loadLayers = function (layersIds) {
    return new Promise((resolution, rejection) => {
      // Create datasets
      let layersPromises = [];

      if (layersIds.length > 0) {
        layersIds.forEach(async function (layerId, index) {
          /* Fill lacking layer style data with default layer template. This prevents session version incompatibility with website version */
          let currentLayerStyle = ArcheoSession.get().layers[layerId].style;
          let filledLayerStyle = ArcheoUtilities.deepExtend(ArcheoSession.getDefaultLayerStyle(), currentLayerStyle);
          ArcheoSession.get().layers[layerId].style = filledLayerStyle;
          MapUtilities.broadcastLayerCreation(layerId);
          layersPromises.push(initializeLayer(layerId));
        });
      }

      Promise.all(layersPromises).then(() => {
        resolution(true);
      });
    });
  };

  MapUtilities.getAttributesDict = function () {
    let allAttributes = {};
    let attributesKeys = Object.keys(attributes_namespaceObject);

    for (var i = 0; i < attributesKeys.length; ++i) {
      var objectId = attributesKeys[i];
      allAttributes = ArcheoUtilities.deepExtend(allAttributes, attributes_namespaceObject[objectId]);
    }

    return allAttributes;
  };
}

/* harmony default export */ const utilities = (registerMapUtilities);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets/new-dataset/initialize-dataset.js


function getMapFeatures(queryString) {
  return new Promise((resolution, rejection) => {
    ArcheoRequests.queryAPI(queryString, (data, errorMessage) => {
      if (ArcheoUtilities.isValid(data)) {
        /* Reset query error text */
        $('#query-call-error-text').text('');
        let features = ArcheoMap.createFeatures(data, ArcheoSession.get().map.dataProjection, ArcheoSession.get().map.mapProjection);
        resolution(features);
      } else {
        rejection(errorMessage);
      }
    }); //, {lang: 'en'});
  });
}

function initializeDownloadButton(newDatasetElement, datasetId) {
  /* Visibility button */
  let downloadButt = newDatasetElement.find('#file_download');
  downloadButt.attr('id', `${datasetId}_file_download`);
  downloadButt.next().attr('for', `${datasetId}_file_download`);
  downloadButt.on('click', function (event) {
    var datasetName = ArcheoSession.get().datasets[datasetId].name;
    var objectsIds = [];
    let datasetsFeaturesToDownload = ArcheoCache.getTemporaryEntry('datasetsFeaturesToDownload');
    var features = ArcheoCache.getDataset(datasetId);
    features = ArcheoMap.readFeaturesAsGeoJSON(features);
    features.forEach(feature => {
      objectsIds.push(feature.get('properties').id);
    });
    datasetsFeaturesToDownload[datasetId] = objectsIds;
    $('#downloadTitle').text(`Download dataset ${datasetName} features`);
    $('#download-modal').modal('show');
  });
}

function setNameTextBoxEvents(elementsDict, datasetId, datasetInfo) {
  /* Change layer name */
  elementsDict.nameTextbox.on('change', function (event) {
    var $textbox = $(event.target);
    var newDatasetName = $textbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(newDatasetName)) {
      ArcheoSession.get().datasets[datasetId].name = newDatasetName;
      elementsDict.headerText.html(newDatasetName);
      ArcheoEvents.broadcast("dataset-update", '#dataset-template');
      $textbox.trigger('blur');
    } else {
      let oldLayerName = datasetInfo.name;
      $textbox.val(oldLayerName);
    }
  });
}

function initializeNameTextbox(newDatasetElement, datasetId, datasetInfo) {
  let $header = newDatasetElement.find('.accordion-header .header-text');
  $header.html(datasetInfo.name);
  let $name = newDatasetElement.find('#dataset-name-textbox');
  $name.attr('id', `${datasetId}_dataset-name-textbox`);
  $name.val(datasetInfo.name);
  let elements = {
    'newDatasetElement': newDatasetElement,
    'nameTextbox': $name,
    'headerText': $header
  };
  setNameTextBoxEvents(elements, datasetId, datasetInfo);
}

function initializeMetadata(newDatasetElement, datasetId, datasetInfo) {
  let $dating = newDatasetElement.find('#dataset-dating');
  $dating.attr('id', `${datasetId}_dataset-dating`);
  if (ArcheoUtilities.isValid(datasetInfo.dating)) $dating.html(ArcheoUtilities.getFormattedYear(datasetInfo.dating[0]) + ' &mdash; ' + ArcheoUtilities.getFormattedYear(datasetInfo.dating[1]));else $dating.html('Present data');
  let $size = newDatasetElement.find('#dataset-size');
  $size.attr('id', `${datasetId}_dataset-size`);

  if (datasetInfo.samplingRatio < 1) {
    let sampledFeaturesCount = Math.ceil(datasetInfo.size * datasetInfo.samplingRatio);
    $size.html(`${sampledFeaturesCount} of ${datasetInfo.size}`);
  } else $size.html(datasetInfo.size); // Math.ceil(array.length * ratio)


  let $objectType = newDatasetElement.find('#dataset-object-type');
  $objectType.attr('id', `${datasetId}_dataset-object-type`);
  $objectType.html(datasetInfo.entityName);
  let $database = newDatasetElement.find('#dataset-database');
  $database.attr('id', `${datasetId}_dataset-database`);
  $database.html(datasetInfo.databaseName);
}

function setQueryTextboxEvents(elementsDict, datasetId, datasetInfo) {
  /* Change layer name */
  elementsDict.copyButt.on('click', function (event) {
    ArcheoUI.copyToClipboard(elementsDict.queryTextbox, 'JSON');
    let $label = elementsDict.copyButt.find('.label');
    $label.text('Copied');
    setTimeout(function () {
      $label.text('Copy');
    }, 1000);
  });
}

function initializeQueryTextbox(newDatasetElement, datasetId, datasetInfo) {
  let $query = newDatasetElement.find('#dataset-query-textarea');
  $query.attr('id', `${datasetId}_dataset-query-textarea`);
  $query.val(JSON.stringify(JSON.parse(datasetInfo.query), null, 1));
  let $copyButt = newDatasetElement.find('#dataset-copy-query');
  $copyButt.attr('id', `${datasetId}_dataset-copy-query`);
  let elements = {
    'newDatasetElement': newDatasetElement,
    'queryTextbox': $query,
    'copyButt': $copyButt
  };
  setQueryTextboxEvents(elements, datasetId, datasetInfo);
}

function initializeSamplingEvents(elements, datasetId, datasetInfo) {
  /* Sampling slider events */
  var eventFunction = async function (data) {
    ArcheoSession.get().datasets[datasetId].samplingRatio = data.from / 100;
  };

  let updateDict = {};
  updateDict.onFinish = eventFunction;
  updateDict.onUpdate = eventFunction;
  elements.samplingSizeSlider.update(updateDict);
  /* Sampling button events */

  elements.sampleButton.on('click', function () {
    let samplingRatio = ArcheoSession.get().datasets[datasetId].samplingRatio;
    let sampledFeatures = MapUtilities.loadAllData(datasetId, samplingRatio);
    ArcheoEvents.broadcast('dataset-sampled', null, {
      datasetId: datasetId
    });
    let featuresCount = ArcheoSession.get().datasets[datasetId].size;
    let sampledFeaturesCount = sampledFeatures.length;

    if (samplingRatio < 1.0) {
      /* Update sampling message */
      elements.samplingMessageText.text(`Sampled ${sampledFeaturesCount} of ${featuresCount} features`);
      /* Update features count info */

      $(`#${datasetId}_dataset-size`).text(`${sampledFeaturesCount} of ${featuresCount}`);
    } else {
      elements.samplingMessageText.text('');
      $(`#${datasetId}_dataset-size`).text(featuresCount);
    }
  });
  /* Shuffling button events */

  elements.shuffleButton.on('click', function () {
    let samplingRatio = ArcheoSession.get().datasets[datasetId].samplingRatio;
    ArcheoEvents.broadcast('dataset-shuffled', null, {
      datasetId: datasetId
    });
    MapUtilities.loadAllData(datasetId, samplingRatio, true);
  });
}

function initializeSampling(newDatasetElement, datasetId, datasetInfo) {
  let datasetConfig = ArcheoSession.get().datasets[datasetId];
  /* Labels size ratio */

  var samplingSizeSliderId = datasetId + '_dataset-sample-size-slider';
  var $samplingSizeSlider = newDatasetElement.find('#dataset-sample-size-slider');
  $samplingSizeSlider.attr('name', samplingSizeSliderId);
  $samplingSizeSlider.attr('id', samplingSizeSliderId);
  var samplingSizeSliderObj = ArcheoUI.initializeSlider($samplingSizeSlider, {
    min: 0,
    max: 100,
    from: datasetConfig.samplingRatio * 100,
    step: 0.1,
    type: 'single',
    postfix: '%',
    extra_classes: 'dataset-sample-size-slider'
  });
  /* Sample button */

  var $sampleButton = newDatasetElement.find('.sample-button');
  var $samplingMessageText = newDatasetElement.find('.sampling-message-text');
  /* Shuffle button */

  var $shuffleButton = newDatasetElement.find('.shuffle-button');
  let elements = {
    'newDatasetElement': newDatasetElement,
    'sampleButton': $sampleButton,
    'shuffleButton': $shuffleButton,
    'samplingMessageText': $samplingMessageText,
    'samplingSizeSlider': samplingSizeSliderObj
  };
  initializeSamplingEvents(elements, datasetId, datasetInfo);
}

function initialize_dataset_initializeTooltips(newDatasetElement, datasetId) {
  newDatasetElement.find('.archeo-tooltip').each(function () {
    let tooltipId = $(this).attr('tooltip-id');
    let text = window.dictionary.tooltips[tooltipId];
    tippy(this, {
      content: text,
      interactive: true,
      appendTo: () => document.body
    });
  });
}

function createDatasetElement(datasetId) {
  return new Promise((resolution, rejection) => {
    let newDatasetElement = $(`#dataset-template`).clone();
    /* Assign new dataset id */

    newDatasetElement.attr('id', datasetId);
    newDatasetElement.find('.accordion-header').attr('data-target', `#${datasetId}-accordion`);
    newDatasetElement.find('.collapse').attr('id', `${datasetId}-accordion`);
    /* Initialize elements */

    initializeDownloadButton(newDatasetElement, datasetId);
    let datasetInfo = ArcheoSession.get().datasets[datasetId];
    initializeNameTextbox(newDatasetElement, datasetId, datasetInfo);
    initializeMetadata(newDatasetElement, datasetId, datasetInfo);
    initializeQueryTextbox(newDatasetElement, datasetId, datasetInfo);
    initializeSampling(newDatasetElement, datasetId, datasetInfo);
    initialize_dataset_initializeTooltips(newDatasetElement, datasetId);
    newDatasetElement.appendTo('#datasets-container');
    newDatasetElement.css('display', 'block');
    resolution(true);
  });
}

function fetchNewDataset(datasetId) {
  return new Promise((resolution, rejection) => {
    let queryString = ArcheoSession.get().datasets[datasetId].query;
    getMapFeatures(queryString).then(features => {
      if (ArcheoUtilities.isValid(features)) {
        if (features.length > 0) {
          let dating = ArcheoUtilities.getDatasetDating(features);
          /* Save to the cache loaded features */

          let geojsonFeatures = ArcheoMap.parseFeaturesToGeoJSON(features);
          ArcheoCache.addDataset(datasetId, geojsonFeatures);
          ArcheoSession.get().datasets[datasetId].dating = dating;
          ArcheoSession.get().datasets[datasetId].size = features.length;
          ArcheoSession.get().datasets[datasetId].isPresent = !ArcheoUtilities.isValid(dating);
          resolution(true);
        } else {
          rejection({
            text: "Dataset has not been loaded as no data match given query.",
            details: null,
            status: "warning"
          });
        }
      } else {
        rejection({
          text: "Dataset has not been loaded due to database connection error.",
          details: null,
          status: "error"
        });
      }
    }).catch(errorMessage => {
      rejection({
        text: "Dataset has not been loaded due to database connection error. Check browser console for details.",
        details: errorMessage,
        "status": "error"
      });
    });
  });
}

function broadcastDatasetCreation(datasetId) {
  createDatasetElement(datasetId).then(result => {
    if (result === true) {
      ArcheoEvents.broadcast("dataset-add", null, {
        datasetId: datasetId
      });
    }
  });
  /*ArcheoEvents.broadcast("dataset-update", '#layer-template', {
  	datasetId: datasetId
  });*/
}


;// CONCATENATED MODULE: ./views/pages/map/data/entityDictionary.json
const entityDictionary_namespaceObject = JSON.parse('{"AADR_v54.1.p1":{"remains":"RemainsAADR","person":"PersonAADR"},"EMPOP_v4/R13":{"person":"PersonEMPOP"}}');
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets/new-dataset/new-dataset.js



function terminateQueryOnError(errorMessage) {
  $('#query-call-error-text').text(errorMessage);
  ArcheoUtilities.setButtonLoaded('#query');
}

function terminateQueryOnWarning(errorMessage) {
  $('#query-call-warning-text').text(errorMessage);
  ArcheoUtilities.setButtonLoaded('#query');
}

function initializeQueryButtonEvents() {
  $('#query').on('click', async function () {
    $('#query').one('dataset-add', () => {
      ArcheoUtilities.setButtonLoaded('#query');
    });
    /* Get query object */

    let queryString = $('#query-call-textarea').val();
    let queryObject;

    try {
      queryObject = JSON.parse(queryString);
    } catch (e) {
      terminateQueryOnError('Provided query is not a valid JSON string.');
      return;
    }
    /* Fetch dataset */


    ArcheoUtilities.setButtonLoading('#query').then(async function () {
      $('#query-call-error-text').text('');
      $('#query-call-warning-text').text('');
      var entityName = queryObject.objects;
      var databaseName = queryObject.database;
      var objectId;

      if (databaseName in entityDictionary_namespaceObject) {
        if (entityName in entityDictionary_namespaceObject[databaseName]) {
          objectId = entityDictionary_namespaceObject[databaseName][entityName];
        } else {
          terminateQueryOnError('Query entity name is invalid.');
          return;
        }
      } else {
        terminateQueryOnError('Query database name is invalid.');
        return;
      }

      let datasetId = ArcheoSession.addDataset(objectId, databaseName, entityName, queryString);
      fetchNewDataset(datasetId).then(() => {
        broadcastDatasetCreation(datasetId);
      }).catch(errorMessage => {
        if (errorMessage.status === "error") terminateQueryOnError(errorMessage.text);else if (errorMessage.status === "warning") terminateQueryOnWarning(errorMessage.text);
        if (ArcheoUtilities.isValid(errorMessage.details)) console.error(`Database message details:\n${errorMessage.details}`);
        ArcheoSession.removeDatasets(datasetId);
      });
    });
  });
}

/* harmony default export */ const new_dataset = (initializeQueryButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/utilities.js
function isSessionAlreadyImported(newSession) {
  let importedSessionsDict = ArcheoCache.getTemporaryEntry('importedSessions');
  let sessionsKeys = importedSessionsDict._order;

  for (var i = 0; i < sessionsKeys.length; ++i) {
    let sessionId = sessionsKeys[i];
    let session = importedSessionsDict[sessionId];
    if (newSession._meta.name === session._meta.name) return true;
  }

  return false;
}

function initializeSessionModal(action, sessionId, data = {}) {
  let $modal = $("#session-modal");
  $modal.attr('action', action);
  $modal.attr('sessionId', sessionId);
  Object.keys(data).forEach(key => {
    $modal.attr(key, data[key]);
  });
  $modal.modal('show');
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/new-session/initialize-session.js


function setSessionAccordion(newSessionElement, sessionInfo, sessionId) {
  /* Assign meta */
  newSessionElement.find('.session-header > .header-text').html(sessionInfo.name);
  /* Assign correct id to all accordions */

  newSessionElement.find(`[data-target="#session-template-accordion"]`).attr('data-target', `#${sessionId}-accordion`);
  newSessionElement.find('#session-template-accordion').attr('id', `${sessionId}-accordion`);
}

function initialize_session_setNameTextBoxEvents(elementsDict, sessionId, sessionInfo) {
  elementsDict.nameTextbox.on('change', function (event) {
    var $textbox = $(event.target);
    var newSessionName = $textbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(newSessionName)) {
      //ArcheoSession.get().datasets[ sessionId ].name = newSessionName;
      sessionInfo.name = newSessionName;
      elementsDict.headerText.html(newSessionName);
      $textbox.trigger('blur');
      sessionInfo.editDate = ArcheoUtilities.getCurrentDateString();
      ArcheoEvents.broadcast('update-session', null, {
        sessionId: sessionId,
        sessionInfo: sessionInfo
      });
    } else {
      let oldLayerName = sessionInfo.name;
      $textbox.val(oldLayerName);
    }
  });
}

function initialize_session_initializeNameTextbox(newSessionElement, sessionId, sessionInfo) {
  let $name = newSessionElement.find('#session-name-textbox');
  $name.attr('id', `${sessionId}_session-name-textbox`);
  $name.val(sessionInfo.name);
  let $header = newSessionElement.find('.session-header > .header-text');
  let elements = {
    'newSessionElement': newSessionElement,
    'nameTextbox': $name,
    'headerText': $header
  };
  initialize_session_setNameTextBoxEvents(elements, sessionId, sessionInfo);
}

function setAuthorTextBoxEvents(elementsDict, sessionId, sessionInfo) {
  elementsDict.nameTextbox.on('change', function (event) {
    var $textbox = $(event.target);
    var authorName = $textbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(authorName)) {
      //ArcheoSession.get().datasets[ sessionId ].name = newSessionName;
      sessionInfo.author = authorName;
      $textbox.trigger('blur');
      sessionInfo.editDate = ArcheoUtilities.getCurrentDateString();
      ArcheoEvents.broadcast('update-session', null, {
        sessionId: sessionId,
        sessionInfo: sessionInfo
      });
    } else {
      let oldAuthorName = sessionInfo.author;
      $textbox.val(oldAuthorName);
    }
  });
}

function initializeAuthorTextbox(newSessionElement, sessionId, sessionInfo) {
  let $name = newSessionElement.find('#session-author-textbox');
  $name.attr('id', `${sessionId}_session-author-textbox`);
  $name.val(sessionInfo.author);
  let elements = {
    'newSessionElement': newSessionElement,
    'nameTextbox': $name
  };
  setAuthorTextBoxEvents(elements, sessionId, sessionInfo);
}

function initialize_session_initializeMetadata(newSessionElement, sessionId, sessionInfo) {
  let $date = newSessionElement.find('.session-date'); ///$date.attr('id', `${sessionId}_session-date`);

  $date.html(ArcheoUtilities.getFormatedDate(sessionInfo.creationDate));
  let $dateEdit = newSessionElement.find('.session-edit-date'); //$dateEdit.attr('id', `${sessionId}_session-date`);

  $dateEdit.html(ArcheoUtilities.getFormatedDate(sessionInfo.editDate));
}

function setDescriptionTextboxEvents(elementsDict, sessionId, sessionInfo) {
  elementsDict.description.on('change', function (event) {
    var newDescription = elementsDict.description.val();

    if (ArcheoUtilities.isValidNonEmptyString(newDescription)) {
      //ArcheoSession.get().datasets[ sessionId ].name = newSessionName;
      sessionInfo.description = newDescription;
      elementsDict.description.trigger('blur');
      sessionInfo.editDate = ArcheoUtilities.getCurrentDateString();
      ArcheoEvents.broadcast('update-session', null, {
        sessionId: sessionId,
        sessionInfo: sessionInfo
      });
    } else {
      let oldDescription = sessionInfo.description;
      elementsDict.description.val(oldDescription);
    }
  });
}

function initializeDescriptionTextbox(newSessionElement, sessionId, sessionInfo) {
  let $description = newSessionElement.find('#session-description');
  $description.attr('id', `${sessionId}_session-description`);
  $description.val(sessionInfo.description); //let $editButt = newSessionElement.find('#session-description-edit-butt');
  //$editButt.attr('id', `${sessionId}_session-description-edit-butt`);

  let elements = {
    'newSessionElement': newSessionElement,
    'description': $description //'editButt': $editButt

  };
  setDescriptionTextboxEvents(elements, sessionId, sessionInfo);
}

function setSwitchButtEvents(elements, sessionId, sessionInfo) {
  elements.switchButt.on('click', function (event) {
    ArcheoUtilities.setContentLoading('#loading-session-wrapper').then(() => {
      $("#loading-session-wrapper").on('session-load', () => {
        ArcheoUtilities.setContentLoaded('#loading-session-wrapper');
      });
      $('#sessions-container button.session-activate').removeClass('active');
      elements.switchButt.addClass('active');
      ArcheoSession.load(sessionId);
    });
    return false;
  });
}

function initializeSwitchButton(newSessionElement, sessionId, sessionInfo) {
  let $switchButt = newSessionElement.find('button#session-activate');
  $switchButt.attr('id', `${sessionId}_session-activate`);
  let elements = {
    'newSessionElement': newSessionElement,
    'switchButt': $switchButt
  };
  setSwitchButtEvents(elements, sessionId, sessionInfo);
}

function setSaveStateButtEvents(elements, sessionId, sessionInfo) {
  elements.saveButt.on('click', function (event) {
    $("#session-modal").modal('show');
    let updatedSession = ArcheoCache.updateSession(sessionId);
    let sessionInfo = updatedSession._meta;
    initializeSessionModal('update-session', sessionId);
  });
}

function initializeSaveStateButton(newSessionElement, sessionId, sessionInfo) {
  let $saveButt = newSessionElement.find('#session-save');
  $saveButt.attr('id', `${sessionId}_session-save`);
  let $message = newSessionElement.find('.save-state-message-text');
  let elements = {
    'newSessionElement': newSessionElement,
    'message': $message,
    'saveButt': $saveButt
  };
  setSaveStateButtEvents(elements, sessionId, sessionInfo);
}

function setDownloadButtEvents(elements, sessionId, sessionInfo) {
  elements.downloadButt.on('click', function (event) {
    let fileName = elements.nameTextbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(fileName)) {
      elements.errorMessage.html('');
      initializeSessionModal('export-session', sessionId, {
        fileName: fileName
      });
    } else elements.errorMessage.html('No filename has been provided');
  });
}

function initialize_session_initializeDownloadButton(newSessionElement, sessionId, sessionInfo) {
  let $nameTextbox = newSessionElement.find('#session-download');
  $nameTextbox.attr('id', `${sessionId}_session-download`);
  let $downloadButt = newSessionElement.find('#session-download-button');
  $downloadButt.attr('id', `${sessionId}_session-download-button`);
  let $errorMessage = newSessionElement.find('.save-session-error-text');
  let elements = {
    'newSessionElement': newSessionElement,
    'errorMessage': $errorMessage,
    'nameTextbox': $nameTextbox,
    'downloadButt': $downloadButt
  };
  setDownloadButtEvents(elements, sessionId, sessionInfo);
}

function createSessionElement(sessionId, sessionDict) {
  // session dict?
  return new Promise((resolution, rejection) => {
    let sessionInfo = sessionDict._meta;
    let newSessionElement = $(`#session-template`).clone();
    /* Initialize elements */

    initialize_session_initializeNameTextbox(newSessionElement, sessionId, sessionInfo);
    initializeAuthorTextbox(newSessionElement, sessionId, sessionInfo);
    initialize_session_initializeMetadata(newSessionElement, sessionId, sessionInfo);
    initializeDescriptionTextbox(newSessionElement, sessionId, sessionInfo);
    initializeSwitchButton(newSessionElement, sessionId, sessionInfo);
    initializeSaveStateButton(newSessionElement, sessionId, sessionInfo);
    initialize_session_initializeDownloadButton(newSessionElement, sessionId, sessionInfo);
    setSessionAccordion(newSessionElement, sessionInfo, sessionId);
    /* Assign new dataset id */

    newSessionElement.attr('id', sessionId);
    newSessionElement.find('.accordion-header').attr('data-target', `#${sessionId}-accordion`);
    newSessionElement.find('.collapse').attr('id', `${sessionId}-accordion`);
    newSessionElement.appendTo('#sessions-container');
    newSessionElement.css('display', 'block');
    resolution(newSessionElement);
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/load-presets.js



function sessionPresetsEvents() {
  $('#session-presets').on('changed.bs.select', async function (event) {
    //ArcheoUtilities.setContentLoading('#session-presets-wrapper').then(() => {
    let $select = $(event.target);
    let presetId = $select.val();
    $('#session-preset-warning-text').html('');
    $('#session-preset-error-text').html('');

    if (ArcheoUtilities.isValidNonEmptyString(presetId)) {
      ArcheoRequests.requestStatic(`/sessions/${window.getLang()}/${presetId}.json`, async function (fetchedSession) {
        if (isSessionAlreadyImported(fetchedSession)) {
          $('#session-preset-warning-text').html('Session of such name has been already imported.'); //ArcheoUtilities.setContentLoaded('#session-presets-wrapper');
        } else {
          let isThisFirstLoadedSession = ArcheoCache.getSessionsDict()._order.length === 0;
          let sessionId = ArcheoCache.addSession(fetchedSession);

          if (sessionId !== false) {
            createSessionElement(sessionId, fetchedSession).then($session => {
              if (isThisFirstLoadedSession) $session.find('.session-activate').trigger('click'); //ArcheoUtilities.setContentLoaded('#session-presets-wrapper');
            });
          } else $('#session-preset-error-text').html("Couldn't import the session, because the file is corrupted. Please contact the administrator");
        }
      }, async function (jqXHR, textStatus, errorThrown) {
        $('#session-preset-error-text').html("Couldn't import the session, because the file is missing. Please contact the administrator");
        console.error(`Request error, status: ${textStatus}, msg: ${errorThrown}, jqXHR: ${JSON.stringify(jqXHR)}`); //ArcheoUtilities.setContentLoaded('#session-presets-wrapper');
      });
    } //});

  });
} // 


/* harmony default export */ const load_presets = (sessionPresetsEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/management.js


function sessionManagementEvents() {
  $('#load-session').on('click', function (event) {
    //$("#session-modal").modal('show');
    $('#load-session-input').trigger('click');
  });
  $('#load-session-input').on('change', function (event) {
    let input = event.target;
    let file = input.files[0];

    if (file) {
      var reader = new FileReader();
      reader.readAsText(file, "UTF-8");

      reader.onload = function (evt) {
        let importedSession = JSON.parse(evt.target.result);
        let sessionId = ArcheoCache.addSession(importedSession);

        if (sessionId !== false) {
          initializeSessionModal('import-session', sessionId);
          $('#load-session-error-text').html("");
        } else $('#load-session-error-text').html("Couldn't import the session. Propably the imported file is corrupted. You may check the file with any online JSON validator.");
      };

      reader.onerror = function (evt) {
        alert("Unfortunately, you can't import the file, because your browser does not support FileAPI. Please update your browser to the newest version.");
      };
    }
  });
  $('#new-session-button').on('click', function (event) {
    let sessionName = $('#new-session').val();

    if (ArcheoUtilities.isValidNonEmptyString(sessionName)) {
      $('#new-session-error-text').html('');
      let currentSession = ArcheoSession.get();
      let newSession = ArcheoUtilities.deepCloneObject(currentSession);
      newSession._meta.name = sessionName;
      newSession._meta.creationDate = ArcheoUtilities.getCurrentDateString();
      newSession._meta.editDate = newSession._meta.creationDate;
      let sessionId = ArcheoCache.addSession(newSession);

      if (sessionId !== false) {
        initializeSessionModal('new-session', sessionId);
      } else $('#new-session-error-text').html("Couldn't import the session. Please contact the administrator");
    } else $('#new-session-error-text').html('No session name has been provided');
  });
}

/* harmony default export */ const management = (sessionManagementEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/update-sessions.js


function updateSessionEvents() {
  $('html').on('update-session', '.session', function (event, data) {
    var $session = $(event.target);
    var sessionId = $session.attr('id');

    if (sessionId === data.sessionId) {
      initialize_session_initializeMetadata($session, data.sessionId, data.sessionInfo);
    }
  });
}

/* harmony default export */ const update_sessions = (updateSessionEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/session-modal.js


function sessionModalEvents() {
  let $modal = $("#session-modal");
  $('#session-modal-button-confirm').on('click', function (event) {
    let actionType = $modal.attr('action');
    let sessionId = $modal.attr('sessionId');
    let fileName = $modal.attr('fileName');
    /* Get  session */

    let session = ArcheoCache.getSession(sessionId);
    /* Modify the session */

    let dataKeys = [];
    $.each($modal.find('input[type="checkbox"]:not(:checked)'), function (index, el) {
      let dataName = $(el).attr('data-name');
      dataKeys.push(dataName);

      if (["datasets", "layers", "map"].has(dataName)) {
        delete session[dataName];
      } else if (dataName === 'colors__attributes') {
        ArcheoUtilities.traverseObj(session.legend.attributes, function (obj, key) {
          if (key === 'color') obj[key] = null; //delete obj[key];// = null;
        });
      } else if (dataName === 'colors__regions') {
        ArcheoUtilities.traverseObj(session.legend.regions, function (obj, key) {
          if (key === 'color') obj[key] = null; //delete obj[key];// = null;
        });
      } else if (dataName === 'filters__time') {
        delete session.filters.timeline;
      } else if (dataName === 'filters__attributes') {
        delete session.filters.attributes;
        ArcheoUtilities.traverseObj(session.legend.attributes, function (obj, key) {
          if (key === 'filtered') obj[key] = false;
        });
      } else if (dataName === 'filters__regions') {
        delete session.filters.regions;
        ArcheoUtilities.traverseObj(session.legend.regions, function (obj, key) {
          if (key === 'filtered') obj[key] = false;
        });
      } else if (dataName === 'clustering__features') {
        delete session.clustering.features;
      } else if (dataName === 'clustering__attributes') {
        delete session.clustering.attributes;
        ArcheoUtilities.traverseObj(session.legend.attributes, function (obj, key) {
          if (key === 'group') obj[key] = null;else if (key === '_groups') obj[key] = [];
        });
      }
    });
    /* Completely remove legend entry, if possible, to reduce session file size */

    if (dataKeys.has('colors__attributes') && dataKeys.has('colors__regions') && dataKeys.has('filters__attributes') && dataKeys.has('filters__regions') && dataKeys.has('clustering__attributes')) {
      delete session.legend;
    } else if (dataKeys.has('colors__attributes') && dataKeys.has('filters__attributes') && dataKeys.has('clustering__attributes')) {
      delete session.legend.attributes;
    } else if (dataKeys.has('colors__regions') && dataKeys.has('filters__regions')) {
      delete session.legend.regions;
    }
    /* Perform proper action */


    if (actionType === 'new-session') {
      createSessionElement(sessionId, session);
    } else if (actionType === 'import-session') {
      createSessionElement(sessionId, session);
    } else if (actionType === 'export-session') {
      if (!fileName.endsWith('.json')) fileName += '.json';
      ArcheoUtilities.saveJSON(session, fileName);
    } else if (actionType === 'update-session') {
      /* Update message */
      $(`#${sessionId}.session .save-state-message-text`).text(`Updated state at ${ArcheoUtilities.getFormatedTime(session._meta.editDate)}`);
      ArcheoEvents.broadcast('update-session', null, {
        sessionId: sessionId,
        sessionInfo: session._meta
      });
    }
    /* Close modal */


    $modal.modal('hide');
  });
  $('#session-modal-select-all').on('click', function (event) {
    $modal.find('input[type="checkbox"]').prop('checked', true);
  });
  $('#session-modal-deselect-all').on('click', function (event) {
    $modal.find('input[type="checkbox"]').prop('checked', false);
  });
}

/* harmony default export */ const session_modal = (sessionModalEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/sessions/index.js





function initializeSessionsEvents() {
  load_presets();
  management();
  update_sessions();
  session_modal();
}

/* harmony default export */ const sessions = (initializeSessionsEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/user-data/utilities.js
function initializeUserAttributeLegend(attributeId, features) {
  let legend = ArcheoSession.getAttributeLegend(attributeId);
  /* Add special entries for filtering purposes */

  if (!('MISSING' in legend)) legend['MISSING'] = {
    filtered: false,
    name: 'MISSING',
    special: true
  };
  if (!('OTHER' in legend)) legend['OTHER'] = {
    filtered: false,
    name: 'OTHER',
    special: true
  };
  ArcheoCache.createAttributeEntry(attributeId, 'MISSING');
  ArcheoCache.createAttributeEntry(attributeId, 'OTHER');
  features.forEach(featureInfo => {
    let attributeInfo = featureInfo.get('properties')[attributeId];
    console.log("!!!!!!!! initializeUserAttributeLegend attributeInfo");
    console.log(attributeInfo);

    if (ArcheoUtilities.isValid(attributeInfo)) {
      /* Update legend */
      let value = attributeInfo.value || attributeInfo; // Register attribute value in legend

      if (!(value in legend)) legend[value] = {
        name: value,
        filtered: false,
        color: ArcheoUtilities.randomRGBColorGenerator().toRgbString(),
        group: null
      }; //if(value == "undefined" || value == undefined) {
      //    alert(`UNDEFINED attributeId ${attributeId} attributeInfo ${attributeInfo}`);
      //}

      console.log("ArcheoCache.createAttributeEntry(attributeId, value)");
      console.log(`attributeId ${attributeId} value ${value}`);
      /* Add attribute to cache registry */

      ArcheoCache.createAttributeEntry(attributeId, value);
    }
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/user-data/input-options.js


const visualizationRestrictedAttributes = {
  "sample_id": true,
  "latitude": true,
  "longitude": true,
  "projection": true,
  "dating_from": true,
  "dating_to": true,
  "place_name": true,
  "regions_cultural": true,
  "divisions_political": true,
  "divisions_geographical": true,
  "regions_geographical": true,
  "divisions_cultural": true,
  "regions_political": true,
  "dataset_name": true
};

function input_options_setNameTextBoxEvents(elementsDict, datasetId, datasetInfo) {
  /* Change layer name */
  elementsDict.nameTextbox.on('change', function (event) {
    var $textbox = $(event.target);
    var newDatasetName = $textbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(newDatasetName)) {
      ArcheoSession.get().datasets[datasetId].name = newDatasetName;
      elementsDict.headerText.html(newDatasetName);
      ArcheoEvents.broadcast("dataset-update", '#user-dataset-template');
      $textbox.trigger('blur');
    } else {
      let oldLayerName = datasetInfo.name;
      $textbox.val(oldLayerName);
    }
  });
}

function input_options_initializeNameTextbox(newDatasetElement, datasetId, datasetInfo) {
  let $header = newDatasetElement.find('.accordion-header .header-text');
  $header.html(datasetInfo.name);
  let $name = newDatasetElement.find('#user-dataset-name-textbox');
  $name.attr('id', `${datasetId}_dataset-name-textbox`);
  $name.val(datasetInfo.name);
  let elements = {
    'newDatasetElement': newDatasetElement,
    'nameTextbox': $name,
    'headerText': $header
  };
  input_options_setNameTextBoxEvents(elements, datasetId, datasetInfo);
}

function input_options_initializeMetadata(newDatasetElement, datasetId, datasetInfo) {
  let $dating = newDatasetElement.find('#user-dataset-dating');
  $dating.attr('id', `${datasetId}_dataset-dating`);
  if (ArcheoUtilities.isValid(datasetInfo.dating)) $dating.html(ArcheoUtilities.getFormattedYear(datasetInfo.dating[0]) + ' &mdash; ' + ArcheoUtilities.getFormattedYear(datasetInfo.dating[1]));else $dating.html('Present data');
  let $size = newDatasetElement.find('#user-dataset-size');
  $size.attr('id', `${datasetId}_dataset-size`);

  if (datasetInfo.samplingRatio < 1) {
    let sampledFeaturesCount = Math.ceil(datasetInfo.size * datasetInfo.samplingRatio);
    $size.html(`${sampledFeaturesCount} of ${datasetInfo.size}`);
  } else $size.html(datasetInfo.size);
}

function input_options_initializeSampling(newDatasetElement, datasetId, datasetInfo) {
  let datasetConfig = ArcheoSession.get().datasets[datasetId];
  /* Labels size ratio */

  var samplingSizeSliderId = datasetId + '_user-dataset-sample-size-slider';
  var $samplingSizeSlider = newDatasetElement.find('#user-dataset-sample-size-slider');
  $samplingSizeSlider.attr('name', samplingSizeSliderId);
  $samplingSizeSlider.attr('id', samplingSizeSliderId);
  var samplingSizeSliderObj = ArcheoUI.initializeSlider($samplingSizeSlider, {
    min: 0,
    max: 100,
    from: datasetConfig.samplingRatio * 100,
    step: 0.1,
    type: 'single',
    postfix: '%',
    extra_classes: 'user-dataset-sample-size-slider'
  });
  /* Sample button */

  var $sampleButton = newDatasetElement.find('.sample-button');
  var $samplingMessageText = newDatasetElement.find('.sampling-message-text');
  /* Shuffle button */

  var $shuffleButton = newDatasetElement.find('.shuffle-button');
  let elements = {
    'newDatasetElement': newDatasetElement,
    'sampleButton': $sampleButton,
    'shuffleButton': $shuffleButton,
    'samplingMessageText': $samplingMessageText,
    'samplingSizeSlider': samplingSizeSliderObj
  };
  initializeSamplingEvents(elements, datasetId, datasetInfo);
}

function createUserDatasetElement(datasetId) {
  return new Promise((resolution, rejection) => {
    let newDatasetElement = $(`#user-dataset-template`).clone();
    /* Assign new dataset id */

    newDatasetElement.attr('id', datasetId);
    newDatasetElement.find('.accordion-header').attr('data-target', `#${datasetId}-accordion`);
    newDatasetElement.find('.collapse').attr('id', `${datasetId}-accordion`);
    /* Initialize elements */

    let datasetInfo = ArcheoSession.get().datasets[datasetId];
    input_options_initializeNameTextbox(newDatasetElement, datasetId, datasetInfo);
    input_options_initializeMetadata(newDatasetElement, datasetId, datasetInfo);
    input_options_initializeSampling(newDatasetElement, datasetId, datasetInfo);
    initialize_dataset_initializeTooltips(newDatasetElement, datasetId);
    newDatasetElement.appendTo('#datasets-container');
    newDatasetElement.css('display', 'block');
    resolution(true);
  });
}

function userInputEvents() {
  $('#load-user-data').on('click', function (event) {
    $('#user-data-load-input').trigger('click');
  });
  $('#user-data-load-input').on('change', function (event) {
    ArcheoUtilities.setButtonLoading('#load-user-data');
    let input = event.target;
    let file = input.files[0];
    let features = [];
    let data = [];
    let extension = file.name.split(".").getLast().toLowerCase();
    let fileName = file.name.split(".").getFirst();

    if (file) {
      var reader = new FileReader();
      reader.readAsText(file, "UTF-8");

      reader.onload = function (evt) {
        if (extension == "json") {
          data = JSON.parse(evt.target.result);
        } else if (extension == "csv") {
          //let rows = evt.target.result.split("\n");
          data = ArcheoUtilities.csvToJSON(evt.target.result);
        }

        features = ArcheoMap.createUserFeatures(data, ArcheoSession.get().map.mapProjection);

        if (ArcheoUtilities.isValid(features) && features.length > 0) {
          let datasetId = ArcheoSession.addCustomDataset(fileName);
          let dating = ArcheoUtilities.getDatasetDating(features);
          /* Save to the cache loaded features */

          let geojsonFeatures = ArcheoMap.parseFeaturesToGeoJSON(features);
          ArcheoCache.addDataset(datasetId, geojsonFeatures);
          ArcheoSession.get().datasets[datasetId].dating = dating;
          ArcheoSession.get().datasets[datasetId].size = features.length;
          ArcheoSession.get().datasets[datasetId].isPresent = !ArcheoUtilities.isValid(dating);
          let attributesDict = {};
          console.log(`BEFORE!!!`);
          console.log(`data!!!`);
          console.log(data);
          Object.keys(data[0]).forEach(attributeName => {
            let attributeId = attributeName.split('-')[0];
            console.log(`POP!!! attributeName ${attributeName} attributeId ${attributeId}`);

            if (!(attributeName in visualizationRestrictedAttributes)) {
              attributesDict[attributeId] = {
                "name": attributeName.split('-')[0].split('_').join(' ').capitalize(),
                "entity": attributeId,
                "type": attributeName.split('-')[1] || undefined,
                "visible": true
              };
              initializeUserAttributeLegend(attributeName, features);
            }
          });
          ArcheoSession.get().datasets[datasetId].attributesDict = attributesDict;
          ArcheoLegend.initializeAttributionsSections("#legend-content", {
            "custom": attributesDict
          });
          broadcastUserDatasetCreation(datasetId);
          /* Expand clustering and filtering options to the custom attributes */

          let allAttributes = MapUtilities.getAttributesDict();
          let newSelectAttributesDict = { ...attributesDict,
            ...allAttributes
          };
          ArcheoUI.setSelectpicker($('#select-cluster-attribute'), newSelectAttributesDict, true);
          ArcheoUI.setSelectpicker($('#select-filter-attribute'), newSelectAttributesDict, true);
        } //rejection({text: "Dataset has not been loaded due to database connection error.", details: null, status: "error"});
        //let sessionId = ArcheoCache.addSession(importedSession);
        //if(sessionId !== false) {
        //    initializeSessionModal('import-session', sessionId);
        //
        //    $('#user-data-load-error-text').html("");
        //} else
        //    $('#user-data-load-error-text').html("Couldn't import the dataset. Propably the imported file is corrupted. Please make sure, that you are using valid file format and attribute names.");


        ArcheoUtilities.setButtonLoaded('#load-user-data');
      };

      reader.onerror = function (evt) {
        alert("Unfortunately, you can't import the file, because your browser does not support FileAPI. Please update your browser to the newest version.");
      };
    }
  });
}

function broadcastUserDatasetCreation(datasetId) {
  createUserDatasetElement(datasetId).then(result => {
    if (result === true) {
      ArcheoEvents.broadcast("dataset-add", null, {
        datasetId: datasetId
      });
    }
  });
}

/* harmony default export */ const input_options = (userInputEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/user-data/index.js


function initializeUserInputEvents() {
  input_options();
}

/* harmony default export */ const user_data = (initializeUserInputEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/index.js







function initializeLeftSidebarUIEvents() {
  /* Datasets */
  update_layers();
  /* Other */

  datasets_select();
  filters_button();
  new_dataset();
  sessions();
  user_data();
}

/* harmony default export */ const left_sidebar = (initializeLeftSidebarUIEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/query-builder-submit.js
function submitQueryBuilderFiltersEvent() {
  $('#submit-rules').on('click', function () {
    let $builder = $('#query-builder');
    let rulesObj = $builder.queryBuilder('getGraphQL');

    if (ArcheoUtilities.isValid(rulesObj) && $builder.queryBuilder('validate') === true) {
      let filtersJSON = JSON.stringify(rulesObj, null, 1);
      $('#query-call-textarea').val(filtersJSON);
      $('#query-builder-modal').modal('hide');
      ArcheoEvents.broadcast('query-builder-update', '#submit-rules');
    }
  });
}

/* harmony default export */ const query_builder_submit = (submitQueryBuilderFiltersEvent);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/sidebars-handles.js
function initializeSidebardsHandlesEvents() {
  $(".sidebar-trigger").click(function () {
    let $sidebarWrapper = $(this).parent();

    if ($sidebarWrapper.hasClass('left')) {
      $('#content-wrapper').toggleClass("active-left");
    } else if ($sidebarWrapper.hasClass('right')) {
      $('#content-wrapper').toggleClass("active-right");
    }
    /* Trigger event for legend positioning fix */


    $sidebarWrapper.one("transitionend webkitTransitionEnd oTransitionEnd", function () {
      ArcheoEvents.broadcast('panel-activated');
    });
    $sidebarWrapper.toggleClass("active");
    $(this).find(".sidebar-arrow").toggleClass("active");
  });
}

/* harmony default export */ const sidebars_handles = (initializeSidebardsHandlesEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/legend.js
function layerColorChangeOnClickEvents() {
  $('#legend').on('click', '.legend-layer-symbol', null, function (event) {
    let $symbol = $(event.target);
    let layerId = $symbol.parents('.layer-legend').attr('layer-id');
    let layerType = ArcheoSession.get().layers[layerId].type;
    ArcheoCache.setTemporaryEntry('$symbol', {
      layerId: layerId,
      layerType: layerType
    });
    let layerConfig = ArcheoSession.get().layers[layerId];
    let symbolPosition = $symbol.offset();

    if (layerType === 'heatmap') {
      let $gradient = $('#legend-layer-gradient');
      let gradientObj = $gradient.prop('grapick'); // Powoduje problem, usuwa znacznik fixed
      //// gradientObj.setValue( $symbol.css('background') );

      ArcheoUI.setGradientValue(gradientObj, layerConfig.style.gradient);
      /* Show gradient input */
      //$('#legend-layer-gradient-wrapper').removeClass('d-none');

      $("#gradient-modal").dialog("option", "position", {
        my: "left top",
        at: "left top",
        of: $symbol
      });
      $('#gradient-modal').dialog("open");
    } else {
      $('#legend-layer-color-picker').spectrum("set", $symbol.css('background-color'));
      $('#legend-layer-color-picker').spectrum('show');
      let container = $('#legend-layer-color-picker').spectrum('container');
      container.css('top', symbolPosition.top);
      container.css('left', symbolPosition.left);
      /*showRegionPickerControls('.legend-layer-color-picker');
      */
    }

    return false;
  });
}

function layerGradientOnChange() {
  let $gradient = $('#legend-layer-gradient');
  let gradientObj = $gradient.prop('grapick');

  var changeFunction = function (handler) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let layerId = $symbol.layerId;
      let layerType = $symbol.layerType;
      var gradientColor = gradientObj.getColorValue();
      /* Validate whether any gradient has been set */

      if (ArcheoUtilities.isValidNonEmptyString(gradientColor)) {
        ArcheoEvents.broadcast('layer-gradient-change', '#legend-layer-gradient', {
          layerId: layerId,
          value: ArcheoUtilities.gradientToArray(gradientColor) //css: gradientObj.getValue()

        });
      }
    }
  };

  gradientObj.on(`change`, changeFunction);
  gradientObj.on(`handler:color:change`, changeFunction);
  gradientObj.on(`handler:drag:end`, changeFunction);
  gradientObj.on(`handler:remove`, changeFunction);
  gradientObj.on(`handler:add`, changeFunction);
}

function attributeColorChangeOnClickEvents() {
  $('#legend').on('click', '.legend-symbol.attribute', null, function (event) {
    let $symbol = $(event.target);
    let attributeValue = $symbol.siblings('.legend-text').text();
    let attributeName = $symbol.parents('.attribute-section-wrapper').attr('attribute-id');
    ArcheoCache.setTemporaryEntry('$symbol', {
      attributeValue: attributeValue,
      attributeName: attributeName
    });
    let symbolPosition = $symbol.offset();
    $('#legend-attribute-color-picker').spectrum("set", $symbol.css('background-color'));
    $('#legend-attribute-color-picker').spectrum('show');
    let container = $('#legend-attribute-color-picker').spectrum('container');
    container.css('top', symbolPosition.top);
    container.css('left', symbolPosition.left);
    return false;
  });
}

function regionColorChangeOnClickEvents() {
  let $backgroundButt = $('#region-background-color-butt');
  let $patternButt = $('#region-pattern-color-butt');
  let $patternSelect = $('#legend-select-pattern-type');
  let $scaleSlider = $('#legend-pattern-scale').data("ionRangeSlider");
  let $spacingSlider = $('#legend-pattern-spacing').data("ionRangeSlider");
  let $anglepicker = $('#pattern-anglepicker');
  $backgroundButt.on('click', function () {
    let color = $backgroundButt.find('.color').css('background-color');
    $('#legend-region-background-color-picker').spectrum("set", color);
    $('#legend-region-background-color-picker').spectrum('show');
    return false;
  });
  $patternButt.on('click', function (event) {
    let color = $patternButt.find('.color').css('background-color');
    $('#legend-region-pattern-color-picker').spectrum("set", color);
    $('#legend-region-pattern-color-picker').spectrum('show');
    return false;
  });
  $patternSelect.on('change', function (event) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let regionName = $symbol.regionName;
      let regionType = $symbol.regionType;
      /* Modify legend entry */

      ArcheoSession.get().legend.regions[regionType][regionName].pattern.type = $patternSelect.val();
      /* Update all data appearance */

      ArcheoMap.triggerLayerStyleFunction();
    }

    return false;
  });

  var eventFunction = async function (data) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let regionName = $symbol.regionName;
      let regionType = $symbol.regionType;
      /* Modify legend entry */

      ArcheoSession.get().legend.regions[regionType][regionName].pattern.scale = data.from;
      /* Update all data appearance */

      ArcheoMap.triggerLayerStyleFunction();
    }

    return false;
  };

  $scaleSlider.update({
    onFinish: eventFunction
  });

  var eventFunction = async function (data) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let regionName = $symbol.regionName;
      let regionType = $symbol.regionType;
      /* Modify legend entry */

      ArcheoSession.get().legend.regions[regionType][regionName].pattern.spacing = data.from;
      /* Update all data appearance */

      ArcheoMap.triggerLayerStyleFunction();
    }

    return false;
  };

  $spacingSlider.update({
    onFinish: eventFunction
  });

  var eventFunction = async function (event, data) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let regionName = $symbol.regionName;
      let regionType = $symbol.regionType;
      /* Modify legend entry */

      ArcheoSession.get().legend.regions[regionType][regionName].pattern.angle = data.value;
      /* Update all data appearance */

      ArcheoMap.triggerLayerStyleFunction();
    }

    return false;
  };

  $anglepicker.anglePicker({
    change: eventFunction
  });
  $('#legend').on('click', '.legend-symbol.region', null, function (event) {
    let $symbol = $(event.target);
    let regionName = $symbol.siblings('.legend-text').text();
    let regionType = $symbol.parents('.region-legend').attr('region-type');
    ArcheoCache.setTemporaryEntry('$symbol', {
      regionName: regionName,
      regionType: regionType
    });
    let regionStyle = ArcheoSession.get().legend.regions[regionType][regionName];
    /* Set buttons colors */

    let backgroundColor = regionStyle.color.background;
    $backgroundButt.find('.color').css('background-color', backgroundColor);
    let patternColor = regionStyle.color.pattern;
    $patternButt.find('.color').css('background-color', patternColor);
    /* Set other controls */

    $patternSelect.val(regionStyle.pattern.type);
    $scaleSlider.update({
      from: regionStyle.pattern.scale
    });
    $spacingSlider.update({
      from: regionStyle.pattern.spacing
    });
    $("#pattern-modal").dialog("option", "position", {
      my: "left top",
      at: "left top",
      of: $symbol
    });
    $("#pattern-modal").dialog("open");
    $('#pattern-anglepicker').anglePicker("setValue", parseInt(regionStyle.pattern.angle));
    return false;
  });
}

function initializeMapLegendEvents() {
  layerColorChangeOnClickEvents();
  attributeColorChangeOnClickEvents();
  regionColorChangeOnClickEvents();
  layerGradientOnChange();
}

/* harmony default export */ const ui_legend = (initializeMapLegendEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/download-button.js
const queriesData = {
  "RemainsAADR": {
    "selectionSet": ["download"]
  },
  "PersonAADR": {
    "selectionSet": ["download"]
  },
  "PersonEMPOP": {
    "selectionSet": ["download"]
  },
  "default": {
    "variablesDeclarations": {
      "$lang": "String"
    }
  }
};
const csvFileColumns = ['sample_id', 'sex', 'population_name', 'dating_from', 'dating_to', 'haplogroup_y', 'haplogroup_mt', 'place_name', 'is_archaeological_site', 'latitude', 'longitude'];

function queryDownload(entityName, featuresIds, datasetName) {
  return new Promise((resolution, rejection) => {
    let entityQueriesData = ArcheoRequests.getEntityQueryData(queriesData, entityName);
    let filters = {
      id_in: featuresIds
    };
    console.log("entityQueriesData 000");
    console.log(entityQueriesData);
    console.log("entityName 000");
    console.log(entityName);
    console.log("queriesData 000");
    console.log(queriesData);
    let query = ArcheoRequests.createGraphqlQuery(entityName, entityQueriesData['selectionSet'], filters //entityQueriesData['variablesDeclarations'] //{'$lang': 'String'}
    );
    console.log('query');
    console.log(query); //queryDownload(query, fileType, successCallback,

    ArcheoRequests.queryGraphQL(query, response => {
      let filePart = response.data[entityName];
      resolution({
        filePart: filePart,
        datasetName: datasetName
      });
    });
  });
}

function initializeDownloadButtonEvents() {
  $('#download-button').on('click', function (event) {
    $('#download-button .label').text("Downloading...");
    var fileType = $('#download-filetype :checked').attr('value');
    let datasetsFeaturesToDownload = ArcheoCache.getTemporaryEntry('datasetsFeaturesToDownload');
    let datasetsIds = Object.keys(datasetsFeaturesToDownload);
    let promises = [];
    datasetsIds.forEach(datasetId => {
      let entityName = ArcheoSession.get().datasets[datasetId].objectId;
      let datasetName = ArcheoSession.get().datasets[datasetId].name;
      let featuresIds = datasetsFeaturesToDownload[datasetId];
      promises.push(queryDownload(entityName, featuresIds, datasetName));
    });
    Promise.all(promises).then(datas => {
      var fileContent = [];

      if (fileType === 'JSON') {
        datas.forEach(data => {
          let filePart = data.filePart;
          let datasetName = data.datasetName;
          filePart.forEach(feature => {
            if (ArcheoUtilities.isValid(feature.download) && !ArcheoUtilities.isEmpty(feature.download)) fileContent.push({ ...feature.download,
              dataset_name: datasetName
            });
          });
        });
        ArcheoUtilities.saveJSON(fileContent, "data.json");
      } else if (fileType === 'CSV') {
        fileContent = ['dataset_name\t' + csvFileColumns.join('\t')];
        datas.forEach(data => {
          let filePart = data.filePart;
          let datasetName = data.datasetName;
          filePart.forEach(feature => {
            var line = [datasetName];
            csvFileColumns.forEach(col => {
              line.push(feature.download[col]);
            });
            fileContent.push(line.join('\t'));
          });
        });
        ArcheoUtilities.saveJSON(fileContent, "data.csv");
      }

      $('#download-button .label').text("Download");
      $("#download-modal").modal("hide");
    }); //$('#query-builder-modal').modal('hide');
  });
}

/* harmony default export */ const download_button = (initializeDownloadButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/index.js







function initializeUIEvents() {
  left_sidebar();
  right_sidebar();
  query_builder_submit();
  sidebars_handles();
  ui_legend();
  download_button();
}

/* harmony default export */ const ui = (initializeUIEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/dataset.js


function dataSourcesTimeFilteringEvent() {
  $('#map').on('time-filter-update', function (event, data) {
    updateSessionWithTimeData(data); //ArcheoLegend.clearLegend();

    ArcheoMap.triggerClusterFilters(null, true);
    ArcheoMap.triggerLayerStyleFunction();
  });
}

$('#map').on('time-present-filter-update', function (event, data) {
  updateSessionWithTimeData(data); //ArcheoLegend.clearLegend();

  ArcheoMap.triggerClusterFilters();
  ArcheoMap.triggerLayerStyleFunction();
});

function addDataSourceEvent() {
  $('#map').on('dataset-add', function (event, data) {
    /* Create map source object */
    var datasetConfig = ArcheoSession.get().datasets[data.datasetId];
    var isPresent = datasetConfig.isPresent;
    var samplingRatio = datasetConfig.samplingRatio;
    ArcheoMap.addSource(data.datasetId);
    loadAllData(data.datasetId, samplingRatio);
  });
}

function dataset_initializeDatasetEvents() {
  dataSourcesTimeFilteringEvent();
  addDataSourceEvent();
}

/* harmony default export */ const dataset = (dataset_initializeDatasetEvents);
;// CONCATENATED MODULE: ./views/pages/map/data/attributesTable.js

let sex = {
  "name": "Sex",
  "visible": false
};
let haplogroupY = {
  "name": "Haplogroup Y",
  "type": "tree",
  "visible": false
};
let haplogroupMt = {
  "name": "Haplogroup Mt",
  "type": "tree",
  "visible": false
};
let admixture = {
  "name": "Admixture",
  "type": "admixture",
  "visible": false,
  "isOptgroup": true
};
let pca = {
  "name": "PCA",
  "type": "plot",
  "visible": false,
  "isOptgroup": true
};
let umap = {
  "name": "UMAP",
  "type": "plot",
  "visible": false,
  "isOptgroup": true
};
var attributesTable = {
  "RemainsAADR": {
    _order: ['sex', 'haplogroup_y', 'haplogroup_mt', 'admixture', 'pca', 'umap'],
    sex: sex,
    haplogroup_y: haplogroupY,
    haplogroup_mt: haplogroupMt,
    admixture: admixture,
    pca: pca,
    umap: umap //...admixturesDict

    /*results: {
        name: "Analysis results",
        isOptgroup: true,
        options: {
            admixture: admixture
        }
    }*/

  },
  "PersonAADR": {
    _order: ['sex', 'haplogroup_y', 'haplogroup_mt'],
    sex: sex,
    haplogroup_y: haplogroupY,
    haplogroup_mt: haplogroupMt
  },
  "PersonEMPOP": {
    _order: ['haplogroup_mt'],
    haplogroup_mt: haplogroupMt
  }
};
const attributesWithTypes = ['admixture', 'pca', 'umap'];

function getAttributesTable() {
  let attributesTableClone = ArcheoUtilities.deepCloneObject(attributesTable);
  attributesWithTypes.forEach(attribute => {
    let attributeName = window.metadata.props_keys[attribute];
    Object.keys(attributesTable).forEach(databaseName => {
      if (attribute in attributesTableClone[databaseName]) {
        for (var i = 0; i < window.metadata[attributeName].id.length; ++i) {
          let typeId = window.metadata[attributeName].id[i];
          let typeName = window.metadata[attributeName].name[i];
          attributesTableClone[databaseName][typeId] = {
            "name": typeName,
            "type": attribute,
            "parent": attribute,
            "visible": false,
            "selected": false
          };

          attributesTableClone[databaseName]._order.push(typeId);
        }
      }
    });
  });
  return attributesTableClone;
}

/* harmony default export */ const data_attributesTable = (getAttributesTable);
;// CONCATENATED MODULE: ./views/mixins-pug/map-modal/utilities.js
function getTableData(features, tableAttributesDict) {
  let data = [];

  for (let i = 0; i < features.length; ++i) {
    let featureProperties = features[i].get('properties');
    let row = {
      id: featureProperties.id,
      place: 'site' in featureProperties ? featureProperties.site : featureProperties.place,
      dating: featureProperties.dating,
      state: true
    };

    tableAttributesDict._order.forEach(attributeId => {
      let attributeInfo = tableAttributesDict[attributeId];

      if (attributeInfo.isOptgroup !== true) {
        /* Prevent general category to be fetched */
        if (attributeInfo.type === 'admixture') {
          let legend = ArcheoSession.getAdmixtureLegend(attributeId);
          let names = legend._order;
          let colors = names.map(name => legend[name].color);
          row[attributeId] = {
            values: ArcheoUtilities.getFeaturesAttributeValue(featureProperties[attributeId]),
            names: names,
            colors: colors
          };
        } else row[attributeId] = ArcheoUtilities.getFeaturesAttributeValue(featureProperties[attributeId]);
      }
    });

    data.push(row);
  }

  return data;
}

function getAttributeHeaderHTML(attributeName) {
  return `<i class="material-icons table-filter-icon trigger">filter_list</i> <span class="attribute-name">${attributeName}</span> <i class="material-icons table-order-icon trigger"></i>`;
}

function getPlotlyTraceDict(features, attributeId) {
  let results = features.map(feature => {
    let props = feature.get('properties');
    return {
      id: props.id,
      label: props.population || 'MISSING',
      x: props[attributeId] ? props[attributeId].value[0] : null,
      y: props[attributeId] ? props[attributeId].value[1] : null
    };
  });
  results = results.filter(result => result.x !== null);
  return results;
}

function createDatasetTableToModal($modalContent, modalCount, datasetId, features, tableAttributesDict, tableParams = {}) {
  return new Promise((resolution, rejection) => {
    let newDatasetElement = $(`#features-dataset-template`).clone();
    /* Assign new dataset id */

    newDatasetElement.attr('id', `${datasetId}-features-${modalCount}`);
    newDatasetElement.attr('dataset-id', datasetId);
    newDatasetElement.find('.accordion-header').attr('data-target', `#${datasetId}-features-${modalCount}-accordion`);
    newDatasetElement.find('.collapse').attr('id', `${datasetId}-features-${modalCount}-accordion`);
    /* Initialize download button */

    let downloadButt = newDatasetElement.find('#file_download');
    downloadButt.attr('id', `${datasetId}-${modalCount}-features_file_download`);
    downloadButt.next().attr('for', `${datasetId}-${modalCount}-features_file_download`);
    downloadButt.on('click', function (event) {});
    let datasetInfo = ArcheoSession.get().datasets[datasetId];
    let databaseName = datasetInfo.databaseName;
    let entityName = datasetInfo.entityName;
    /* Initialize dataset name */

    let $header = newDatasetElement.find('.accordion-header .header-text');
    $header.html(datasetInfo.name);
    /* Initialize search */

    let $search = newDatasetElement.find('#features-dataset-search');
    $search.attr('id', `${datasetId}-${modalCount}-features-dataset-search`);
    /* Initialize table */

    let $table = newDatasetElement.find('.table');
    /* Prepare columns */

    let columns = [];
    let columnId = 0;

    tableAttributesDict._order.forEach(attributeId => {
      let attributeInfo = tableAttributesDict[attributeId];
      let config = {
        field: attributeId,
        title: getAttributeHeaderHTML(attributeInfo.name),
        searchable: true,
        sortable: true,
        switchable: true,
        visible: attributeInfo.visible
      };
      columnId = columns.length;

      if (attributeInfo.type === 'admixture') {
        config = { ...config,
          searchable: false,
          title: `<span class="attribute-name">${attributeInfo.name}</span> <i class="material-icons table-order-icon trigger"></i>`,
          formatter: (attributeData, row, rowIndex, field) => {
            if (attributeData.values === 'MISSING') return 'MISSING';else {
              let $piechart = $('<div/>', {
                class: "piechart",
                'row-index': rowIndex,
                field: field
              });
              return $piechart[0].outerHTML;
            }
          },
          sorter: (fieldA, fieldB, rowA, rowB) => {
            let fieldAIds = fieldA.values.argSortNumbers();
            let fieldBIds = fieldB.values.argSortNumbers();
            return fieldAIds.compNumbers(fieldBIds);
          }
        };
      }

      columns.push(config);
    });
    /* Prepare data */


    let data = getTableData(features, tableAttributesDict);
    $table.bootstrapTable({
      pagination: true,
      clickToSelect: true,
      pageList: [10, 25, 50, 100, 500],
      checkboxHeader: true,
      idField: "id",
      maintainMetaData: true,
      rowStyle: () => ({
        classes: 'table-row'
      }),
      columns: [{
        checkbox: true,
        field: 'state'
      }, {
        field: 'id',
        sortable: true,
        title: 'ID',
        searchable: true,
        switchable: false,
        formatter: value => {
          if (ArcheoUtilities.isValid(datasetInfo.isCustom)) return value;else return `<a href="/en/db/${encodeURIComponent(databaseName)}/entity/${encodeURIComponent(entityName)}/${encodeURIComponent(value)}">${value}</a>`;
        }
      }, {
        field: 'place',
        sortable: true,
        title: datasetInfo.isPresent == false ? 'Site' : 'Place',
        searchable: true,
        switchable: true,
        formatter: value => {
          return value.name;
        }
      }, {
        field: 'dating',
        sortable: true,
        searchable: false,
        switchable: true,
        title: getAttributeHeaderHTML('Dating'),
        // LANG
        formatter: dating => {
          if (ArcheoUtilities.isValid(dating)) {
            let yearStart = dating.year_start;
            let yearEnd = dating.year_end;
            return ArcheoUtilities.getFormattedYear(yearStart) + ' &mdash; ' + ArcheoUtilities.getFormattedYear(yearEnd);
          } else return "present"; // LANG						

        },
        sorter: (datingA, datingB) => {
          return parseInt(datingA.year_start) - parseInt(datingB.year_start) || parseInt(datingA.year_end) - parseInt(datingB.year_end);
        }
      }, ...columns],
      data: data
    });
    /* Move search element */

    let $toolbar = $table.parents('.bootstrap-table').find('.fixed-table-toolbar');
    $search.parent().parent().detach().appendTo($toolbar);
    /* Generate content for the columns toggle dropdown */
    //let toggleableAttributes = [ 'place', 'dating', ...Object.keys(tableAttributesDict)];

    let toggleableAttributes = tableAttributesDict._order;
    let $columnsDropdown = newDatasetElement.find('.column-toggle-dropdown .dropdown-menu');
    let $attributesTypes = {};

    for (var j = 0; j < toggleableAttributes.length; ++j) {
      let attributeId = toggleableAttributes[j];
      let attributeData = tableAttributesDict[attributeId];
      let isAttributeType = attributeData.isOptgroup;

      if (isAttributeType === true) {
        let $attributeType = $('#column-toggle-dropdown-attribute-type-template').clone();
        $attributeType.find('.attribute-type-wrapper').text(attributeData.name);
        $attributesTypes[attributeId] = $attributeType.find('.dropdown-menu');
        $attributeType.appendTo($columnsDropdown);
        $attributeType.removeClass('hidden');
        $attributeType.removeAttr('id');
      } else {
        let $attribute = $('#column-toggle-dropdown-attribute-template').clone();
        $attribute.find('label').text(attributeData.name);
        $attribute.attr('attribute-id', attributeId);
        $attribute.find('input[type=checkbox]').prop("checked", attributeData.visible);

        if (attributeData.parent) {
          $attribute.appendTo($attributesTypes[attributeData.parent]);
        } else {
          $attribute.appendTo($columnsDropdown);
        }

        $attribute.removeClass('hidden');
        $attribute.removeAttr('id');
      }
    }
    /* Handle loading missing data */


    function handleLoadMissingData(attributeId, checked) {
      return new Promise((resolution, rejection) => {
        if (checked === true) {
          let anyFeatureProperties = features[0].get('properties');
          let attributeValue = anyFeatureProperties[attributeId];
          let isAttributeAvailable = ArcheoUtilities.isValid(attributeValue);
          let isAttributeIncorportable = (attributeId in tableAttributesDict);

          if (isAttributeIncorportable) {
            /* Hide column if the data is absent */
            if (isAttributeAvailable === false) $table.bootstrapTable('hideColumn', attributeId);
            ArcheoRequests.incorporateAttributes({
              datasetId: datasetId,
              attributeId: attributeId,
              attributeType: tableAttributesDict[attributeId] ? tableAttributesDict[attributeId].type : ''
            }).then(() => {
              // Load data again //
              let data = getTableData(features, tableAttributesDict);
              $table.bootstrapTable('load', data);
              resolution(true);
            });
          } else resolution(true);
        }
      });
    }

    $columnsDropdown.on('change', 'input[type=checkbox]', function (e) {
      let $checkbox = $(e.target);
      let status = $checkbox.is(":checked");
      let $wrapper = $checkbox.parent();
      let attributeName = $checkbox.siblings('label').text();
      let attributeId = $wrapper.attr('attribute-id');
      let attributeTypeName = tableAttributesDict[attributeId].type;
      if (status === true) handleLoadMissingData(attributeId, true).then(() => {
        if (attributeTypeName == 'pca' || attributeTypeName == 'umap') {
          let plotId = `${attributeId}_${parseInt(Math.random() * 10000)}`;
          let $tableWrapper = $table.parent(); //let $samplesSection = $table.parents('.samples-section');

          let $plot = $('<div>', {
            id: plotId,
            class: `${attributeId} plot`,
            //text: attributeId,
            "attribute-id": attributeId
          }).appendTo($tableWrapper);
          ArcheoRequests.incorporateAttributes({
            datasetId: datasetId,
            attributeId: 'population',
            attributeType: ''
          }).then(() => {
            /* Create plotly plot with all features data */
            let allDatasetFeatures = ArcheoMap.getDatasetFeatures(datasetId);
            let results = getPlotlyTraceDict(allDatasetFeatures, attributeId);
            ArcheoUI.createPlotly(plotId, results, attributeName, {
              opacity: 0.4,
              showLegend: false
            });
            /* Create plotly trace with highlit cluster's features */

            results = getPlotlyTraceDict(features, attributeId);
            ArcheoUI.addPlotlyTrace(plotId, results, {});
          });
        } else $table.bootstrapTable('showColumn', attributeId);
      });else {
        if (attributeTypeName == 'pca' || attributeTypeName == 'umap') {
          $table.find('.plot').remove();
        } else $table.bootstrapTable('hideColumn', attributeId);
      }
    });
    $table.on('mouseenter mouseout', '.table-row', function (event) {
      let rowId = parseInt($(event.target).parent('.table-row').attr('data-index'));
      let featureData = $table.bootstrapTable('getData')[rowId];
      $table.find('.js-plotly-plot').each(function () {
        let plotId = $(this).attr('id');
        let attributeId = $(this).attr('attribute-id');

        if (ArcheoUtilities.isArray(featureData[attributeId]) && event.type === "mouseenter") {
          let featureTraceData = {
            id: featureData.id,
            x: featureData[attributeId][0],
            y: featureData[attributeId][1]
          };
          ArcheoUI.hoverPlotlyFeature(plotId, true, featureTraceData);
        } else {
          ArcheoUI.hoverPlotlyFeature(plotId, false);
        }
      });
    });
    /* Pass sort event on proper custom icon click */

    $table.on('click', '.table-order-icon', function (event) {
      let $el = $(event.target);

      if ($el.hasClass('table-order-icon')) {
        $el.parent().removeClass('both');
        return true;
      } else return false;
    });
    /* Handle filtering */

    $table.on('click', '.table-filter-icon', function (event) {
      let $el = $(event.target);

      if ($el.hasClass('active')) {
        $el.removeClass('active');
        $search.attr('placeholder', `Filter by attributes...`);
        $search.removeProp('attribute');
      } else {
        /* Clear styling for all filter icons */
        $table.find('.table-filter-icon').removeClass('active');
        $el.addClass('active');
        let $header = $el.parents('th[data-field]');
        let attributeId = $header.attr('data-field');
        let attributeName = $header.find('.attribute-name').text();
        $search.attr('placeholder', `Filter by ${attributeName}...`);
        $search.prop('attribute-id', attributeId);
      }

      return false;
    });
    /* Handle filter events */

    $search.on('input update', function (event) {
      let attributeId = $search.prop('attribute-id');
      let searchValue = $search.val();

      if (ArcheoUtilities.isValidNonEmptyString(searchValue)) {
        if (ArcheoUtilities.isValid(attributeId)) {
          $table.bootstrapTable('filterBy', {
            [attributeId]: searchValue
          }, {
            filterAlgorithm: 'and'
          });
        } else {
          $table.bootstrapTable('filterBy', {
            common: searchValue
          }, {
            filterAlgorithm: (row, filters) => {
              let isFound = false;

              for (let key in row) {
                if (key !== 'state') isFound = row[key].startsWith(filters.common) || isFound;
              }

              return isFound;
            }
          });
        }
      } else {
        $table.bootstrapTable('filterBy', {}, {
          filterAlgorithm: 'and'
        });
      }
    });
    /* Handle piecharts generation */

    $table.on('post-body.bs.table update', function (event, data) {
      $table.find('.piechart').each((index, el) => {
        let $canvas = $('<canvas/>', {
          width: 50,
          height: 50
        });
        $canvas[0].width = 50;
        $canvas[0].height = 50;
        $canvas.appendTo(el);
        let rowIndex = parseInt(el.getAttribute('row-index'));
        let field = el.getAttribute('field');
        let admixtureData = data[rowIndex][field];
        new Chart($canvas[0], {
          type: 'pie',
          data: {
            labels: admixtureData.names,
            datasets: [{
              //label: 'My First Dataset',
              data: admixtureData.values,
              backgroundColor: admixtureData.colors,
              hoverOffset: 0,
              borderWidth: 1,
              borderColor: '#000'
            }]
          },
          options: {
            responsive: false,
            plugins: {
              legend: {
                display: false
              }
            },
            animation: {
              duration: 0
            }
          }
        });
      });
    });
    $table.bootstrapTable('load', data);
    $modalContent.append(newDatasetElement);
    newDatasetElement.removeClass('hidden');
    /* Trigger certain attributes as in params */

    if ('visible' in tableParams) {
      tableParams.visible.forEach(attributeId => {
        $table.trigger('column-switch.bs.table', [attributeId, true]);
      });
    }

    resolution(newDatasetElement);
  });
}


;// CONCATENATED MODULE: ./views/mixins-pug/map-modal/script.js



async function addDataToModal(clusters, newModalElement, tableParams = {}) {
  //let $modalContent = newModalElement.find('.map-modal-content .mCSB_container');
  let $modalContent = newModalElement.find('.map-modal-content');
  let baseUrl = `/${window.lang}/entity`;
  let datasetsIds = [];
  let datasetFeatures = {};
  let datasetAttributes = {};
  let attributesTable = data_attributesTable();
  clusters.forEach((cluster, clusterIndex) => {
    let features = cluster.values_.features;
    let layerId = cluster.values_.layerId;
    let datasetId = ArcheoSession.get().layers[layerId].datasetId;
    let dataset = ArcheoSession.get().datasets[datasetId];
    let objectId = dataset.objectId;

    if (!datasetsIds.has(datasetId)) {
      datasetsIds.push(datasetId);
      datasetFeatures[datasetId] = {}; //[];

      datasetAttributes[datasetId] = {};
    }
    /* Get all possible columns */


    if (dataset.isCustom) {
      datasetAttributes[datasetId] = ArcheoUtilities.deepCloneObject(dataset.attributesDict);
      datasetAttributes[datasetId]._order = Object.keys(dataset.attributesDict);
    } else datasetAttributes[datasetId] = ArcheoUtilities.deepCloneObject(attributesTable[objectId]);
    /* Set visibility for attributes visualized at the moment on the map */


    let layerAttributeId = ArcheoSession.get().layers[layerId].attributeId;
    let layerAttributeType = ArcheoSession.get().layers[layerId].attributeType;
    if (layerAttributeId in datasetAttributes[datasetId]) datasetAttributes[datasetId][layerAttributeId].visible = true;

    for (var i = 0; i < features.length; ++i) {
      let feature = features[i];
      datasetFeatures[datasetId][feature.id_] = feature;
    }
  });
  let modalCount = ArcheoCache.getTemporaryEntry('features-modals-count');
  datasetsIds.forEach(datasetId => {
    createDatasetTableToModal($modalContent, modalCount, datasetId, Object.values(datasetFeatures[datasetId]), datasetAttributes[datasetId], tableParams).then(newDatasetElement => {
      if (datasetsIds.length == 1) newDatasetElement.find('.accordion-header').trigger('click');
    });
  });
  ArcheoCache.incrementTemporaryEntry('features-modals-count', 1);
}

function showFeaturesModal(clusters, newModalElement, interactionEvent = null, tableParams = {}) {
  addDataToModal(clusters, newModalElement, tableParams);
  /*if(ArcheoUtilities.isValid(event)) {
    newModalElement.dialog("option", "position", { my: "left top", at: "left top", of: event });
  }*/
  // content-wrapper

  if (newModalElement.dialog("isOpen") === false) {
    newModalElement.dialog("open");
    newModalElement.removeClass('hidden');
  }
}

function createMapModal($modalTemplate, clusters, interactionEvent = null, tableParams = {}) {
  /* Create new modal object */
  let newModalElement = $modalTemplate.clone();
  newModalElement.removeAttr('id');
  newModalElement.dialog({
    appendTo: "#map-wrapper",
    position: {
      my: "center top",
      at: "center top",
      of: $("#map")
    },
    autoOpen: false,
    width: parseInt(window.innerWidth * 0.5),
    height: parseInt(window.innerHeight * 0.7),
    show: {
      effect: "fade",
      duration: 500
    },
    hide: {
      effect: "fade",
      duration: 500
    }
  });
  showFeaturesModal(clusters, newModalElement, interactionEvent, tableParams);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/map/interaction.js


function redrawMapOnWindowSize(map, timeInterval = 300) {
  $(window).resize(function () {
    setTimeout(function () {
      map.updateSize();
    }, timeInterval);
  });
}

function updateSessionOnMove(map) {
  map.on('moveend', function (event) {
    let view = map.getView();
    let position = ArcheoMap.getCoordinatesProjectedToData(view.getCenter());
    let zoom = view.getZoom();
    ArcheoSession.get().map.position = position;
    ArcheoSession.get().map.zoom = zoom;
  });
}

function clearMapOnZoom(map) {
  /* Fix for persisting piechart labels on zoom level changes */
  map.getView().on('change:resolution', event => {
    ArcheoMap.clearPiechartLabels();
  });
}

function mapFeatureModal(map) {
  $('#map').on('map-modal', function (event, data) {
    let $modalTemplate = $(`#features-map-modal-template`);
    createMapModal($modalTemplate, data.clusters, data.interactionEvent);
  });
}

function initializeInteractionEvents() {
  var map = ArcheoMap.getMap();
  redrawMapOnWindowSize(map);
  updateSessionOnMove(map);
  clearMapOnZoom(map);
  mapFeatureModal(map);
}

/* harmony default export */ const interaction = (initializeInteractionEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/layer.js
/* Change layer appearance events */
function changeLayerTypeEvent() {
  $('#map').on('layer-type-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    let layerType = data.value; //let oldLayerType = data.value;
    // provide dataset if present

    ArcheoMap.changeLayer(layer, {
      layerId: layer.get('layerId'),
      layerType: layerType
    });
    /* Update objects filtering */

    ArcheoLegend.clearLegend();
  });
}

function changeLayerAttributeEvent() {
  $('#map').on('layer-attribute-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    ArcheoMap.setLayerConfig(layer, {
      attributeId: data.attributeId,
      attributeName: data.attributeName,
      attributeType: data.attributeType
    });
    ArcheoMap.refreshLayer(data.layerId);
  });
}

function changeLayerValueEvent() {
  $('#map').on('layer-value-change', function (event, data) {
    let layerStyle = ArcheoMap.getLayerStyleById(data.layerId);
    let legend = ArcheoSession.getAttributeLegend(data.attributeId);
    layerStyle.componentValues.data = {};
    layerStyle.componentValues.special = {
      "OTHER": false,
      "MISSING": false
    };
    let valuesOrders = [];
    let selectedValuesLabels = [];
    data.values.forEach((value, index) => {
      if (value === 'OTHER' || value === 'MISSING') layerStyle.componentValues.special[value] = true;else {
        /* Assuming that values are sorted */
        layerStyle.componentValues.data[value] = true;
        let valueOrder = legend[value].order;

        if (ArcheoUtilities.isValid(valueOrder)) {
          valuesOrders.push(valueOrder);
          selectedValuesLabels.push(value);
        }
      }
    });
    let selectedDataAttributesCount = Object.keys(layerStyle.componentValues.data).length;
    if (data.dataAttributesCount === selectedDataAttributesCount) layerStyle.componentValues.data = 'selectAll';
    /* Update objects filtering */

    ArcheoMap.refreshLayer(data.layerId);
  });
}

function addLayerEvent() {
  $('#map').on('layer-add', function (event, data) {
    let layerId = data.layerId;
    let layerTitle = ArcheoSession.get().layers[layerId].name;
    /* Create map layer object */

    ArcheoMap.addLayer(layerId, {
      declutter: true,
      title: layerTitle,
      ...data.settings
    });
    /* Assign proper zIndexes */
  });
}

function changeLayerDataSetEvent() {
  $('#map').on('layer-dataset-change', function (event, data) {
    let layerId = data.layerId;
    let datasetId = data.datasetId;
    ArcheoMap.setLayerDataSource(layerId, datasetId);
  });
}

function changeLayerSettingEvent() {
  $('#map').on('layer-setting-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    ArcheoSession.get().layers[data.layerId].settings[data.setting] = data.value;

    if (ArcheoUtilities.isValid(layer)) {
      layer.set(data.setting, data.value, false);
      ArcheoMap.triggerLayerStyleFunction(layer);
    }
  });
}

function changeLayerConfigEvent() {
  $('#map').on('layer-config-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);

    if (ArcheoUtilities.isValid(layer)) {
      ArcheoMap.setLayerStyle(layer, data.value);
      if (ArcheoMap.getLayerConfig(layer).type === 'heatmap' || data.refresh === true) ArcheoMap.triggerClusterFilters(layer);else ArcheoMap.triggerLayerStyleFunction(layer);

      if (data.refreshRegions === true) {
        ArcheoMap.triggerLayerStyleFunction(ArcheoMap.getRegionsLayer());
      }
    }
  });
}

function layer_changeLayerColorEvent() {
  $('#map').on('layer-color-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);

    if (ArcheoUtilities.isValid(layer)) {
      ArcheoMap.setLayerStyle(layer, {
        color: data.value
      });
      /* Update objects filtering */

      ArcheoMap.triggerLayerStyleFunction(layer);
      ArcheoMap.triggerLayerStyleFunction(ArcheoMap.getRegionsLayer());
    }
  });
}

function layer_changeLayerGradientEvent() {
  $('#map').on('layer-gradient-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);

    if (ArcheoUtilities.isValid(layer) && ArcheoUtilities.isValid(data.value)) {
      ArcheoMap.setLayerStyle(layer, {
        gradient: data.value
      });
      if (ArcheoSession.get().layers[data.layerId].type === 'heatmap') layer.setGradient(data.value);
      /* Update objects filtering */
      //ArcheoMap.triggerLayerStyleFunction(layer);
    }
  });
}

function sortMapLayersOnElementsSort() {
  /* On layers sort - change z-index setting */
  $('#layers-container').on('sortbeforestop layer-map-change', function (event, ui) {
    var newLayersOrder = $(event.target).sortable('toArray');
    let sessionLayersOrder = [];
    /* Update layers order on the map */

    newLayersOrder.forEach((layerId, index) => {
      if (ArcheoUtilities.isValidNonEmptyString(layerId)) {
        let zIndex = ArcheoMap.getLayerZIndex(index, ArcheoSession.get().layers[layerId].type);
        ArcheoEvents.broadcast('layer-setting-change', null, {
          layerId: layerId,
          setting: 'zIndex',
          value: zIndex
        });
        sessionLayersOrder.push(layerId);
      }
    });
    /* Update layers order in session */

    ArcheoSession.get().layers._order = sessionLayersOrder;
    /* Update layers order on the legend */

    ArcheoLegend.sortLayers(sessionLayersOrder);
  });
}

function layerInitializationEvent() {
  $('#map').on('layer-initialization', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    /* Update objects filtering */

    ArcheoMap.refreshLayer(data.layerId);
    ArcheoMap.triggerClusterFilters(layer);
  });
}

function initializeLayersEvents() {
  layerInitializationEvent();
  addLayerEvent();
  changeLayerTypeEvent();
  changeLayerAttributeEvent();
  changeLayerValueEvent();
  changeLayerSettingEvent();
  changeLayerConfigEvent();
  layer_changeLayerColorEvent();
  layer_changeLayerGradientEvent();
  changeLayerDataSetEvent();
  sortMapLayersOnElementsSort();
}

/* harmony default export */ const map_layer = (initializeLayersEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/clustering.js
function changeAttributeClusteringEvent() {
  $('#map').on('clustering-attribute-change', function (event, data) {
    ArcheoMap.triggerClusterFilters();
    ArcheoMap.triggerLayerStyleFunction();
  });
}

function changeClusterStrategyEvent() {
  $('#map').on('cluster-strategy-change', function (event, data) {
    let layersDic = ArcheoMap.getMapLayers();
    /* Only for those visible */

    Object.keys(layersDic).forEach(layerId => {
      let layer = layersDic[layerId];
      let clusterSource = layer.getSource();
      if (ArcheoUtilities.isValid(clusterSource)) clusterSource.refresh(); // remove ?
      // Fix for the animated clusters //
      //layer.oldcluster.clear();

      ArcheoMap.refreshLayer(layerId);
    });
  });
}

function clustering_changeClusterConfigEvent() {
  $('#map').on('cluster-config-change', function (event, data) {
    let layersDic = ArcheoMap.getMapLayers();
    ArcheoSession.get().clustering.features = { ...ArcheoSession.get().clustering.features,
      ...data.config
    };
    ArcheoMap.clearPiechartLabels();
    Object.keys(layersDic).forEach(layerId => {
      let layer = layersDic[layerId];
      /* Fix for the animated clusters */
      //layer.oldcluster.clear();

      ArcheoMap.triggerLayerStyleFunction(layer);
      ArcheoMap.triggerLayerStyleFunction(ArcheoMap.getRegionsLayer());
      if (data.refresh === true) ArcheoMap.triggerClusterFilters(layer);
    });
  });
}

function changeClusterSettingEvent() {
  $('#map').on('cluster-setting-change', function (event, data) {
    let layersDic = ArcheoMap.getMapLayers();

    if (ArcheoUtilities.isValid(data.layerId)) {
      layersDic = {
        [data.layerId]: layersDic[data.layerId]
      };
    }

    let settingName = data.setting;
    let value = data.value;
    if (ArcheoUtilities.isValid(value)) ArcheoSession.get().clustering.features[settingName] = value;else value = ArcheoSession.get().clustering.features[settingName];
    ArcheoMap.clearPiechartLabels();
    Object.keys(layersDic).forEach(layerId => {
      let layer = layersDic[layerId];
      let clusterSource = layer.getSource();

      if (ArcheoUtilities.isValid(clusterSource)) {
        //layer.oldcluster.clear();
        if (settingName == 'range') clusterSource.setDistance(value);else if (settingName == 'distance') clusterSource.setMinDistance(value);
      }

      ArcheoMap.triggerLayerStyleFunction(layer);
    });
  });
}

function changeClusterRegionShowEvent() {
  $('#map').on('cluster-region-show', function (event, data) {
    let regionsLayer = ArcheoMap.getRegionsLayer();
    let isRegionClusteringModeActive = ArcheoUtilities.isValid(ArcheoSession.get().clustering.features.method.region);
    regionsLayer.getSource().clear();

    if (data.config.showRegions) {
      let regionsDict = ArcheoMap.getMapRegions();
      let regionIds = Object.keys(regionsDict);
      regionIds.forEach(regionId => {
        let regionInfo = regionsDict[regionId];
        if (!ArcheoUtilities.isValid(regionInfo.polygon)) ArcheoMap.fetchAndAddRegionPolygon(regionId, regionsLayer);else regionsLayer.getSource().addFeature(regionInfo.polygon);
      });
    } else {
      regionsLayer.getSource().clear();
    }

    if (!isRegionClusteringModeActive) {
      /* Reload all layers to generate neccessary convex hulls for clusters */
      ArcheoMap.triggerClusterFilters();
    }
  });
}

function initializeClusteringEvents() {
  changeAttributeClusteringEvent();
  clustering_changeClusterConfigEvent();
  changeClusterStrategyEvent();
  changeClusterSettingEvent();
  changeClusterRegionShowEvent();
}

/* harmony default export */ const map_clustering = (initializeClusteringEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/attributes.js
function initializeAttributesEvents() {}

/* harmony default export */ const attributes = (initializeAttributesEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/filters.js
function changeAttributeFilterEvent() {
  $('#map').on('filter-attribute-change filter-region-change', function (event, data) {
    ArcheoMap.triggerClusterFilters();
    ArcheoMap.triggerLayerStyleFunction();
  });
}

function initializeFilterEvents() {
  changeAttributeFilterEvent();
}

/* harmony default export */ const filters = (initializeFilterEvents);
// EXTERNAL MODULE: ./node_modules/file-saver/dist/FileSaver.min.js
var FileSaver_min = __webpack_require__(4616);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/toolbox.js



function initializeImageSaveEvents() {
  let printControl = ArcheoMap.getMapControls().print;
  printControl.on(['print', 'error'], function (e) {
    let isPdf = $('#photo-modal #photo-image-type input:checked').val() === 'pdf'; //$('body').css('opacity', 1);
    // Print success

    if (e.image) {
      if (isPdf) {
        // Export pdf using the print info
        var pdf = new jsPDF({
          orientation: e.print.orientation,
          unit: e.print.unit,
          format: e.print.size
        });
        pdf.addImage(e.image, 'JPEG', e.print.position[0], e.print.position[0], e.print.imageWidth, e.print.imageHeight);
        pdf.save();
      } else {
        e.canvas.toBlob(function (blob) {
          (0,FileSaver_min.saveAs)(blob, 'map.' + e.imageType.replace('image/', ''));
        }, e.imageType);
      }
    } else {
      console.warn('No canvas to export');
    }
  });
}

function intializeChangeBaseMap() {
  $('#map-options-basemap .basemap-option').on('click update', event => {
    let $el = $(event.target);
    let session = ArcheoSession.get();
    $('#map-options-basemap .basemap-option').removeClass('active');
    $el.addClass('active');
    let basemapName = $el.attr('option-name');

    if (ArcheoUtilities.isValid(basemapName)) {
      ArcheoMap.setBasemap(basemapName).then(() => {
        if (basemapName !== "Light") {
          $('#map-options-basemap-appearance').attr('disabled', true);
          ArcheoMap.setBackgroundColor('transparent'); // Prevents colorful background from flashing
        } else {
          $('#map-options-basemap-appearance').removeAttr('disabled');
          /* Initialize basemap layers appearance when it is loaded */

          $('.basemap-layer-color').trigger('update');
          $('.basemap-layer-toggle').trigger('update');
        }

        $("#basemap-appearance-name").text(basemapName);
        session.map.options.basemap.name = basemapName;
      });
    }
  });
}

function initializeBasemapAppearanceSettings() {
  $("#map-options-basemap-appearance").on("click", function () {
    $("#basemap-modal").modal({
      'backdrop': false,
      'focus': true
    });
    $("#basemap-modal").modal('show');
  });
  $('.basemap-layers-visibility .basemap-layer-toggle').on('click update', function (event) {
    let $obj = $(event.target);
    let layerName = $obj.attr('toggle-visibility');
    let session = ArcheoSession.get();
    let status;
    if (event.type === 'click') status = !$obj.hasClass('active'); // negation applied intentionally
    else status = $obj.hasClass('active');

    if (event.type === 'update') {
      let sessionStatus = session.map.options.basemap.appearance.visible_layers[layerName];

      if (status !== sessionStatus) {
        $obj.trigger('click');
        return true;
      }
    }

    ArcheoMap.getBasemapLayer(layerName).setVisible(status);
  });
  $('.basemap-layer-color').on(`move.spectrum change.spectrum update`, function (e, color) {
    let session = ArcheoSession.get();
    let $el = $(e.target);
    let targetLayer = $el.attr('target-layer');
    let layer = ArcheoMap.getBasemapLayer(targetLayer);
    let rgbColor;

    if (e.type === "update") {
      rgbColor = session.map.options.basemap.appearance.colors[targetLayer];
      ArcheoUI.initializeColorInput($el, {
        appendTo: "#map-wrapper",
        color: rgbColor,
        palette: 'default'
      });
    } else {
      rgbColor = color.toRgbString();
      session.map.options.basemap.appearance.colors[targetLayer] = rgbColor;
    }

    if (targetLayer === 'map-background') ArcheoMap.setBackgroundColor(rgbColor);else {
      ArcheoMap.setVectorLayerObjectsColor(layer, rgbColor);
    }
  });
}

function initializeFullscreen() {
  var mapEl = document.getElementById("map-wrapper");
  var viewFullScreen = document.getElementById("map-options-fullscreen");

  if (viewFullScreen) {
    viewFullScreen.addEventListener("click", function () {
      $("#map-wrapper").addClass('fullscreen');

      if (mapEl.requestFullscreen) {
        mapEl.requestFullscreen();
      } else if (docElm.msRequestFullscreen) {
        mapEl.msRequestFullscreen();
      } else if (docElm.mozRequestFullScreen) {
        mapEl.mozRequestFullScreen();
      } else if (docElm.webkitRequestFullScreen) {
        mapEl.webkitRequestFullScreen();
      }
    });
  }

  let onFullScreenExit = function () {
    var state = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;
    if (ArcheoUtilities.isValid(state) == false) $("#map-wrapper").removeClass('fullscreen');
  };

  $(mapEl).on('webkitfullscreenchange mozfullscreenchange fullscreenchange', function (e) {
    onFullScreenExit();
  });
  $(document).on('webkitfullscreenchange mozfullscreenchange fullscreenchange', function (e) {
    onFullScreenExit();
  });
}

function initializeFeaturesSettings() {
  $('#map-options-features button.checkbox').on('click update', function (event) {
    let session = ArcheoSession.get();
    let visibleFeaturesDict = session.map.options.features.visible;
    let $el = $(event.target);
    let $target = $($el.attr("toggle-target"));
    let featureName = $el.attr("option-name");
    let isFeatureVisible = visibleFeaturesDict[featureName] === true;

    if (event.type === 'update') {
      if ($el.hasClass('active') !== isFeatureVisible) $el.toggleClass('active');
    } else $el.toggleClass('active');

    if ($el.hasClass('active')) {
      $target.removeClass('hidden');
      visibleFeaturesDict[featureName] = true;
    } else {
      $target.addClass('hidden');
      visibleFeaturesDict[featureName] = false;
    }

    return true;
  });
  $("#map-options-features-appearance").on("click", function () {
    $("#map-features-settings-modal").modal({
      'backdrop': false,
      'focus': true
    });
    $("#map-features-settings-modal").modal('show');
  });
}

function initializeFeaturesAppearanceSettings() {
  $(".map-features-textbox input").on("change update", function (event) {
    let session = ArcheoSession.get();
    let $el = $(event.target);
    let text = $el.val();
    let $targetEl = $($el.parent().attr("event-target"));
    let optionName = $el.parent().attr("option-name");

    if (event.type === 'update') {
      text = session.map.options.features.appearance[optionName];
      $el.val(text);
    } else if (event.type === 'change') {
      $el.trigger('blur');
    }

    $targetEl.text(text);
    session.map.options.features.appearance[optionName] = text;
  });
}

function initializeBasemapOnSessionLoad() {
  $('#map').on('session-load', function () {
    let session = ArcheoSession.get();
    let basemapName = session.map.options.basemap.name;
    let $basemaps = $(`#map-options-basemap .basemap-option[option-name=${basemapName}]`);
    $basemaps.trigger('update');
  });
}

function initializeFeaturesOnSessionLoad() {
  $('#map').on('session-load', function () {
    $('#map-options-features button.checkbox').trigger('update');
    $('.map-features-textbox input').trigger('update');
  });
}

function initializeToolboxEvents() {
  initializeImageSaveEvents();
  intializeChangeBaseMap();
  initializeBasemapAppearanceSettings(); //initializeBasemapAppearanceSettingsOnSessionLoad();

  initializeFullscreen();
  initializeFeaturesSettings();
  initializeFeaturesOnSessionLoad();
  initializeBasemapOnSessionLoad();
  initializeFeaturesAppearanceSettings();
}

/* harmony default export */ const toolbox = (initializeToolboxEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/photo-modal.js
function setDPI(canvas, dpi, doAlterMap = true) {
  // Set up CSS size.
  if (canvas.style.width === 'unset') {
    canvas.style.width = canvas.width + 'px';
    canvas.style.height = canvas.height + 'px';
  } // Get size information.


  var scaleFactor = dpi / 96;
  var width = parseFloat(canvas.style.width);
  var height = parseFloat(canvas.style.height); // Backup the canvas contents.
  //var oldScale = canvas.width / width;
  //var backupScale = scaleFactor / oldScale;

  var backup = canvas.cloneNode(false);
  backup.getContext('2d').drawImage(canvas, 0, 0); // Resize the canvas.

  var ctx = canvas.getContext('2d');
  let newWidth = Math.ceil(width * scaleFactor);
  let newHeight = Math.ceil(height * scaleFactor);
  ArcheoMap.setMapScaleFactor(scaleFactor);
  /* Fix for heatmap */

  let classes = $(canvas).prop("classList");
  let layerId = classes[1] === 'ol-layer' ? classes[0] : null;

  if (ArcheoUtilities.isValid(layerId)) {
    let layerConfig = ArcheoSession.get().layers[layerId];
    let layerType = layerConfig.type;
    let layer = ArcheoMap.getMapLayers()[layerId];
    /*if(layerType === 'heatmap') {
        //layer.setRadius(layerConfig.settings.blur * scaleFactor);
        //layer.setBlur(layerConfig.settings.radius * scaleFactor);
         let matrix;
        const transform = canvas.style.transform;
        if (transform) {
            // Get the transform parameters from the style's transform matrix
            matrix = transform
            .match(/^matrix\(([^\(]*)\)$/)[1]
            .split(',')
            .map(Number);
        } else {
            matrix = [
            parseFloat(canvas.style.width) / canvas.width,
            0,
            0,
            parseFloat(canvas.style.height) / canvas.height,
            0,
            0,
            ];
        }
          // Apply the transform to the export map context
        CanvasRenderingContext2D.prototype.setTransform.apply(
            $('.heatmap-image canvas')[0].getContext('2d'),
            matrix
        );
         $('.heatmap-image canvas')[0].getContext('2d').drawImage(canvas, 0, 0);
        //ctx.drawImage(canvas, 0, 0);
     }*/
  }

  if (doAlterMap) {
    let getCurrentResolution = ArcheoMap.getMap().getView().getResolution(); //ArcheoMap.getMap().setSize([newWidth, newHeight]);
    //ArcheoMap.getMap().getView().setResolution(getCurrentResolution / scaleFactor);
  } // Redraw the canvas image and scale future draws.
  //ctx.setTransform(backupScale, 0, 0, backupScale, 0, 0);
  //ctx.drawImage(backup, 0, 0);
  //ctx.setTransform(scaleFactor, 0, 0, scaleFactor, 0, 0);

}

function resetDPI(canvas, currentScaleFactor, doAlterMap = true) {
  if (doAlterMap) {
    let getCurrentResolution = ArcheoMap.getMap().getView().getResolution(); //ArcheoMap.getMap().setSize([newWidth, newHeight]);

    ArcheoMap.getMap().getView().setResolution(getCurrentResolution * currentScaleFactor);
  }
}

function initializePhotoModalEvents() {
  $('#map-options-screenshot').on('click', function () {
    $('#photo-modal').modal({
      'backdrop': false,
      'focus': true
    });
    $('#photo-modal').modal('show');
  });
  $('#photo-modal-button-confirm').on('click', function (event) {
    let imageType = $('#photo-modal #photo-image-type input:checked').val();
    imageType = imageType === 'pdf' ? 'jpeg' : imageType;
    let dpi = parseInt($('#photo-modal #photo-dpi').val());
    let promises = [];
    let canvases = $('#map').find('canvas');
    canvases.each((i, canvas) => {
      promises.add(new Promise((resolution, rejection) => {
        setTimeout(() => {
          //$('#map').one('rendercomplete', () => {resolution(true)});
          resolution(true); //setDPI(canvas, dpi, i === 0);
        }, 500);
      }));
    });
    Promise.all(promises).then(() => {
      var map = ArcheoMap.getMap();
      let printControl = ArcheoMap.getMapControls().print;
      map.once('rendercomplete', function () {
        printControl.print({
          imageType: `image/${imageType}`,
          quality: 1,
          immediate: false
        });
      });
      map.renderSync();
      /* Revert DPI change after saving the image */

      setTimeout(() => {
        /*let currentScaleFactor = ArcheoMap.getMapScaleFactor();
        ArcheoMap.getMap().updateSize();
         canvases.each((i, canvas) => {
            setTimeout(() => {
                resetDPI(canvas, currentScaleFactor, i === 0)
            }, 200);
        });
         ArcheoMap.setMapScaleFactor(1);*/
      }, 10000);
    });
  });
}

/* harmony default export */ const photo_modal = (initializePhotoModalEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/index.js









function initializeMapEvents() {
  dataset();
  interaction();
  map_layer();
  map_clustering();
  attributes();
  filters();
  toolbox();
  photo_modal();
  $('#map').on('session-load', function (event, data) {
    let mapInfo = ArcheoSession.get().map;
    ArcheoMap.setView({
      projection: mapInfo.mapProjection,
      center: mapInfo.position,
      zoom: mapInfo.zoom
    });
  });
  /* Reload style and clustering */

  $('#map').on('session-load', function (event, data) {
    ArcheoMap.triggerLayerStyleFunction();
    ArcheoMap.triggerClusterFilters();
  });
}

/* harmony default export */ const map = (initializeMapEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/guide.js
function initializeGuideEvents() {
  $("#guide-button").on('click', function (event) {
    window.guideObj.show();
    $("#guide-button").attr("disabled", "");
  });
}

/* harmony default export */ const guide = (initializeGuideEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/index.js




function initializePageEvents() {
  map();
  ui();
  guide();
}

/* harmony default export */ const events = (initializePageEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/map.js
function initializeInteractiveMap(lang) {
  let mapInfo = ArcheoSession.get().map;
  var mapConfig = {
    mapInitialCenter: mapInfo.position,
    dataProjection: mapInfo.dataProjection,
    mapProjection: mapInfo.mapProjection,
    mapInitialZoom: mapInfo.zoom,
    mapDOMObjectId: "map",
    // #map
    basemapName: 'Light',
    //'OSM', //'Light',
    controlsNames: 'all',
    interactionsNames: 'all'
  };
  ArcheoMap.initializeMap(mapConfig, lang);
}

/* harmony default export */ const elements_map = (initializeInteractiveMap);
;// CONCATENATED MODULE: ./views/mixins-pug/timeline/script.js
function initializeTimelineSlider(selector, params = null) {
  var $timeline = $(selector);
  if (params === null) params = {};
  $timeline.ionRangeSlider({
    type: "double",
    grid: true,
    drag_interval: true,
    min_interval: null,
    max_interval: null,
    hide_min_max: true,
    prettify: ArcheoUtilities.getFormattedYear,
    keyboard: true,
    skin: "flat",
    ...params
  });
  return $timeline.data("ionRangeSlider");
}


;// CONCATENATED MODULE: ./views/pages/map/js/elements/timeline.js


function initializeTimeline(selector = "#timeline") {
  let timelineInfo = ArcheoSession.get().filters.timeline;
  var $timelineRangeObj = initializeTimelineSlider(selector, {
    min: window.metadata.TimePeriod.minYear,
    max: window.metadata.TimePeriod.maxYear,
    min: timelineInfo.minYear,
    max: timelineInfo.maxYear,
    from: timelineInfo.yearFrom,
    to: timelineInfo.yearTo
  });

  let timeChangeEvent = async function (data) {
    ArcheoEvents.broadcast('time-filter-update', selector, {
      yearFrom: data.from,
      yearTo: data.to
    }, 100);
  };

  $timelineRangeObj.update({
    onChange: async function (data) {
      if (ArcheoSession.get().filters.timeline.eventOnFinish === false) {
        timeChangeEvent(data);
      }
    },
    onFinish: async function (data) {
      if (ArcheoSession.get().filters.timeline.eventOnFinish === true) timeChangeEvent(data);
    }
  });
}

function initializeTimelineRange(selector = "#timeline-range") {
  let timelineInfo = ArcheoSession.get().filters.timeline;
  var $timelineRangeObj = initializeTimelineSlider(selector, {
    from: timelineInfo.minYear,
    to: timelineInfo.maxYear,
    min: window.metadata.TimePeriod.minYear,
    max: window.metadata.TimePeriod.maxYear,
    hide_from_to: true,
    hide_min_max: true
  });

  let timeChangeEvent = async function (data) {
    let timelineInfo = ArcheoSession.get().filters.timeline;
    timelineInfo = ArcheoSession.get().filters.timeline;
    let minOffset = timelineInfo.minYear - data.from;
    let maxOffset = timelineInfo.maxYear - data.to;
    let fromValue = timelineInfo.yearFrom;
    let toValue = timelineInfo.yearTo;

    if (minOffset !== 0 && maxOffset !== 0) {
      fromValue -= maxOffset;
      toValue -= maxOffset;
    }

    ArcheoEvents.broadcast('time-filter-update', selector, {
      minYear: data.from,
      maxYear: data.to,
      yearFrom: fromValue,
      yearTo: toValue
    }, 100);
  };

  $timelineRangeObj.update({
    onChange: async function (data) {
      if (ArcheoSession.get().filters.timeline.eventOnFinish === false) timeChangeEvent(data);
    },
    onFinish: async function (data) {
      if (ArcheoSession.get().filters.timeline.eventOnFinish === true) timeChangeEvent(data);
    }
  }); //$(selector).trigger('time-filter-update');
}


;// CONCATENATED MODULE: ./views/pages/map/js/elements/sidebars.js
function initializeSidebars() {
  $(".sidebar").mCustomScrollbar({
    theme: "minimal",
    scrollInertia: 150,
    mouseWheel: {
      disableOver: ["select", "option", "textarea", "a", "li", "ul"],
      deltaFactor: 40 // px

    }
  });
}

/* harmony default export */ const sidebars = (initializeSidebars);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/present-switch.js
function initializePresentSwitch() {
  let timelineWrapper = $('#timeline-range').parent();
  let irsLineHeight = timelineWrapper.find('.irs-line').height();
  let irsHeight = timelineWrapper.find('.irs-line').parent().height();
  let switchWrapperSelector = $('#present-switch').parent().parent();
  switchWrapperSelector.css('height', timelineWrapper.height());
  let switchSelector = switchWrapperSelector.find('.toggle');
  let fixCenteringPosition = 2;
  /* Fix positioning */

  switchSelector.css('top', irsHeight - fixCenteringPosition);
  switchSelector.css('height', irsLineHeight);
}

/* harmony default export */ const present_switch = (initializePresentSwitch);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/time-filter.js
function initializeTimeFilter(lang) {
  var $timefilter = $("#time-filter");
  var timelineMinMax = [ArcheoSession.get().filters.timeline.minYear, ArcheoSession.get().filters.timeline.maxYear];
  var metaTimelineMinMax = [window.metadata.TimePeriod.minYear, window.metadata.TimePeriod.maxYear];
  /* Hook used UI elements to their events */

  ArcheoUI.initializeRangeSpinner($timefilter.find('#filter-from-to'), timelineMinMax, true, window.getLang());
  ArcheoUI.initializeRangeSpinner($timefilter.find('#filter-min-max'), metaTimelineMinMax, true, window.getLang()); //initializeTimeFilterEvents();
  //$timefilter.trigger('time-filter-update');
}

/* harmony default export */ const time_filter = (initializeTimeFilter);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/layers-container.js
function initializeLayersContainer() {
  $('#layers-container').sortable({
    placeholder: "sortable-placeholder",
    handle: ".handle",
    delay: 250,
    opacity: 0.7
  });
  $('#layer-trash').droppable({
    accept: "#layers-container > li",
    classes: {
      "ui-droppable-active": "ui-state-highlight"
    },
    drop: function (event, ui) {
      let $layer = ui.draggable;
      let layerId = $layer.prop('id');
      MapUtilities.removeLayers(layerId);
    }
  });
}

/* harmony default export */ const layers_container = (initializeLayersContainer);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/clustering.js
function initializeClusteringStrategy() {
  /* Spatial clustering mode select */
  var $clusteringModeSelect = $('#clustering-mode-select');
  $clusteringModeSelect.selectpicker();
  /* Spatial clustering range slider */

  ArcheoUI.initializeSlider($('#clustering-slider'), {
    min: 1,
    max: 5000000,
    step: 1,
    type: 'single',
    postfix: 'km'
  });
  /* Spatial cluster in-between distance slider */

  ArcheoUI.initializeSlider($('#distance-slider'), {
    min: 0.0,
    max: 1.0,
    step: 0.01,
    type: 'single',
    prettify: function (x) {
      if (x === 0) return 'centroid';else if (x === 1) return 'origin';
      return x;
    } //onChange: changeMinMaxLabels,
    //onUpdate: changeMinMaxLabels,
    //onFinish: changeMinMaxLabels

  }); //changeMinMaxLabels( $('#distance-slider').data("ionRangeSlider").result );
}

/* harmony default export */ const right_sidebar_clustering = (initializeClusteringStrategy);
;// CONCATENATED MODULE: ./views/pages/map/data/regions.json
const regions_namespaceObject = JSON.parse('{"region__cultures":{"name":"Archeological cultures","title":"Cultures","subtext":"archeological division"},"region__world":{"name":"World","title":"World","subtext":"geographical division"},"region__continents":{"name":"Continents","title":"Continents","subtext":"geographical division"},"region__wb_regions":{"name":"World Bank Regions","title":"WB Regions","subtext":"political division"},"region__un_regions":{"name":"United Nations Regions","title":"UN Regions","subtext":"political division"},"region__un_subregions":{"name":"United Nations Subregions","title":"UN Subregions","subtext":"political division"},"region__countries":{"name":"Countries","title":"Countries","subtext":"political division"}}');
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/region-filter.js


function initializeRegionSelect() {
  let $selectRegion = $('#select-filter-region');
  delete regions_namespaceObject.region__world;
  ArcheoUI.setSelectpicker($selectRegion, regions_namespaceObject, true, true);
}

function initializeRegionFilter() {
  initializeRegionSelect();
}

/* harmony default export */ const region_filter = (initializeRegionFilter);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/attribute-filter.js


function initializeAttributeSelect() {
  let $selectAttribute = $('#select-filter-attribute');
  let allAttributes = MapUtilities.getAttributesDict();
  ArcheoUI.setSelectpicker($selectAttribute, allAttributes, true);
  let $attributes = $selectAttribute.find('option:not([value=""])');
  let availableAttributes = [];
  $.each($attributes, function (index, el) {
    availableAttributes.push({
      id: $(el).attr('value'),
      type: $(el).attr('type'),
      name: $(el).text()
    });
  });
}

function initializeFilteringByTreeLevelSlider() {
  var $rangeSlider = $('#attribute-filtering-tree-level-slider');
  return ArcheoUI.initializeSlider($rangeSlider, {
    min: 0,
    max: 10,
    from: 1,
    to: 10,
    step: 1,
    type: 'double',
    drag_interval: true //postfix: ' level',

  });
}

function initializeAttributeFilter() {
  initializeAttributeSelect();
  initializeFilteringByTreeLevelSlider();
}

/* harmony default export */ const attribute_filter = (initializeAttributeFilter);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/attribute-clustering.js


function initializeClusteringAttributeSelect() {
  let $selectAttribute = $('#select-cluster-attribute');
  let allAttributes = MapUtilities.getAttributesDict();
  ArcheoUI.setSelectpicker($selectAttribute, allAttributes, true);
}

function initializeClusteringByTreeLevelSlider() {
  var $rangeSlider = $('#attribute-clustering-tree-level-slider');
  return ArcheoUI.initializeSlider($rangeSlider, {
    min: 0,
    max: 10,
    from: 10,
    step: 1,
    type: 'single' //postfix: ' level'

  });
}

function initializeClusteringByRootWordSpinner() {
  let $wordRootSpinner = $('#attribute-clustering-root-word-input');
  return $wordRootSpinner.spinner({
    culture: window.getLang(),
    min: 1,
    max: 100,
    numberFormat: "n",
    step: 1
  });
}

function initializeAttributeClustering() {
  initializeClusteringAttributeSelect();
  initializeClusteringByTreeLevelSlider();
  initializeClusteringByRootWordSpinner();
}

/* harmony default export */ const attribute_clustering = (initializeAttributeClustering);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/index.js







function initializeRightSidebarElements() {
  time_filter();
  layers_container();
  right_sidebar_clustering();
  attribute_filter();
  attribute_clustering();
  region_filter();
}

/* harmony default export */ const elements_right_sidebar = (initializeRightSidebarElements);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/left-sidebar/datasets-container.js
function initializeDatasetsContainer() {
  //initializeAppearanceDatasetEvents();
  $('#datasets-container').sortable({
    placeholder: "sortable-placeholder",
    handle: ".handle",
    delay: 250,
    opacity: 0.7
  });
  $('#dataset-trash').droppable({
    accept: "#datasets-container > li",
    classes: {
      "ui-droppable-active": "ui-state-highlight"
    },
    drop: function (event, ui) {
      let $dataset = ui.draggable;
      let datasetId = $dataset.prop('id');
      MapUtilities.removeDatasets(datasetId);
    }
  });
}

/* harmony default export */ const datasets_container = (initializeDatasetsContainer);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/left-sidebar/sessions-container.js
function initializeSessionsContainer() {
  //initializeAppearanceDatasetEvents();
  $('#sessions-container').sortable({
    placeholder: "sortable-placeholder",
    handle: ".handle",
    delay: 250,
    opacity: 0.7
  });
  $('#sessions-trash').droppable({
    accept: "#sessions-container > li",
    classes: {
      "ui-droppable-active": "ui-state-highlight"
    },
    drop: function (event, ui) {
      let $session = ui.draggable;
      let sessionId = $session.prop('id');
      /* Remove layer from cache */

      ArcheoCache.removeSession(sessionId);
      /* Remove layer from interface */

      $session.remove();
    }
  });
}

/* harmony default export */ const sessions_container = (initializeSessionsContainer);
// EXTERNAL MODULE: ./node_modules/jQuery-QueryBuilder/dist/js/query-builder.js
var query_builder = __webpack_require__(1923);
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/query-normalization.js
function createFilter(node) {
  var entity = (node.data.entity || node.field) + (node.data.suffix || '');
  var relationOperator = node.data.relation_operator;
  var property = node.data.attributes;
  var operator = property === 'relationship' ? 'exists' : node.operator;
  var value = node.value;
  if (ArcheoUtilities.isArray(value)) value = value.slice(0); // copies the object

  /* Fix for custom operators */

  operator = operator.split('__');
  operator = operator[operator.length - 1];
  node = {
    "entity": entity,
    "property": property,
    "operator": operator,
    "value": value
  };

  if (ArcheoUtilities.isValidNonEmptyString(relationOperator)) {
    node.relation_operator = relationOperator;
  }

  return node;
}

function traverseRules(node, translatedNode) {
  if ('rules' in node) {
    // It is group then
    var rulesList = [{}];
    translatedNode[node.condition] = rulesList;

    for (var i = 0; i < node.rules.length; ++i) {
      let newTranslatedNode = {};
      let newNode = node.rules[i];
      traverseRules(newNode, newTranslatedNode);
      rulesList.push(newTranslatedNode);
    }
    /* If no AND filters concatenation were performed */


    if (Object.keys(rulesList[0]).length === 0) rulesList.shift();
  } else {
    var filter = createFilter(node);
    Object.assign(translatedNode, filter);
  }
}

function getNormalizedQuery(rules) {
  if (!ArcheoUtilities.isValid(rules)) //throw Error(`Error during query translation. Expected \'object\' type, received \'${typeof rules}\'`);
    return {};else {
    var graphQLFilters = {};
    traverseRules(rules, graphQLFilters);
    return graphQLFilters;
  }
}

/* harmony default export */ const query_normalization = (getNormalizedQuery);
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/events.js



function initializeResultsInputEvent($builderEl, lang) {
  $builderEl.on('afterCreateRuleInput.queryBuilder', function (e, rule) {
    let $preoperatorContainer = rule.$el.find('.rule-preoperator-container');
    let $resultContainer = rule.$el.find('.rule-value-container');

    if (rule.filter.id.startsWith('result_') && !rule.filter.id.endsWith('relationship')) {
      let $componentSelect = $resultContainer.find('select.component-name');
      let $typeSelect = $resultContainer.find('select.result-type');
      $typeSelect.empty();

      if (rule.filter.id === 'result_admixture_component') {
        window.metadata.Admixture.id.forEach((el, i) => {
          let $option = $('<option/>', {
            value: `${'result_' + el.toLowerCase()}`
          });
          $option.text(window.metadata.Admixture.name[i]);
          $typeSelect.append($option);
        });
        $typeSelect.on('changed.bs.select', event => {
          let admixtureTypeId = $typeSelect.val();
          $componentSelect.empty();

          if (ArcheoUtilities.isValidNonEmptyString(admixtureTypeId)) {
            let componentsCount = parseInt(admixtureTypeId.split('_').getLast().split('k')[1]);

            for (let i = 1; i <= componentsCount; ++i) {
              let $option = $('<option/>', {
                value: 'c' + i
              });
              $option.text('component #' + i);
              $componentSelect.append($option);
            }

            $componentSelect.selectpicker('refresh');
          }
        });
      } else if (rule.filter.id === 'result_pca_component') {
        window.metadata.PCA.id.forEach((el, i) => {
          let $option = $('<option/>', {
            value: `${'result_' + el.toLowerCase()}`
          });
          $option.text(window.metadata.PCA.name[i]);
          $typeSelect.append($option);
        });
      } else if (rule.filter.id === 'result_umap_component') {
        window.metadata.UMAP.id.forEach((el, i) => {
          let $option = $('<option/>', {
            value: `${'result_' + el.toLowerCase()}`
          });
          $option.text(window.metadata.UMAP.name[i]);
          $typeSelect.append($option);
        });
      }
      /* Initialize components select */


      $typeSelect.selectpicker('refresh');
      $componentSelect.selectpicker('refresh');
      $typeSelect.trigger('changed.bs.select');
    }
  });
}

function disableTitleTooltipsForSelects($builderEl, lang) {
  $builderEl.on('afterUpdateRuleFilter.queryBuilder', function (e, rule) {
    let $dropdownButt = rule.$el.find('.dropdown-toggle');
    $dropdownButt.tooltip();
    $dropdownButt.tooltip('disable');
  });
}

function events_initializeTooltips($builderEl, lang) {
  $builderEl.on('afterUpdateRuleFilter.queryBuilder', function (e, rule) {
    let tooltipEl = rule.$el.find('.archeo-tooltip').get(0);
    let $tooltip = $(rule.$el.find('.archeo-tooltip'));

    if (ArcheoUtilities.isValid(rule.filter)) {
      if (!tooltipEl._tippy) {
        tippy(tooltipEl, {
          placement: 'top-end',
          content: rule.filter.tooltip,
          interactive: true
        });
      } else {
        tooltipEl._tippy.setContent(rule.filter.tooltip);
      }

      $tooltip.removeClass('hidden');
    } else {
      $tooltip.addClass('hidden');
    }
  });
}

function createInitializeSearchableEvent($builderEl, lang) {
  $builderEl.on('afterCreateRuleInput.queryBuilder', function (e, rule) {
    // never display error for my custom filter
    let inputEl = rule.$el.find('.rule-value-container input.searcher');
    let filterEl = rule.$el.find('.rule-filter-container > .dropdown > select option:selected');
    let entityName = filterEl.attr('entity-name');
    let valueAttribute = filterEl.attr('value-attribute');
    let queryAttribute = filterEl.attr('label-attribute');
    let detailsAttribute = filterEl.attr('details-attribute');
    let isSearchable = ArcheoUtilities.exists(filterEl.attr('searchable')); //dropdownObj.selectpicker('render');

    if (isSearchable) {
      ArcheoSearcher.initialize(inputEl, entityName, valueAttribute, queryAttribute, detailsAttribute, lang, function (event, ui) {
        inputEl.attr('searched-label', ui.item.label);
        inputEl.attr('searched-value', ui.item.value);
      }, function (event, ui) {
        let queryAttributeValue = inputEl.attr('searched-label');
        let label = ArcheoUtilities.isStringUndefined(queryAttributeValue) ? '' : queryAttributeValue;
        inputEl.val(label);
      });
    }
    /* Render custom selects */


    rule.$el.find('.rule-value-container select').selectpicker('render');
  });
}

function createRulesTranslationEvent($builderEl, lang) {
  $builderEl.queryBuilder.extend({
    getGraphQL: function () {
      var rules = this.getRules();
      let $datasetSelect = $('#select-query-dataset :selected');
      let queryTemplate = {
        'database': $datasetSelect.attr('database'),
        'objects': $datasetSelect.attr('entity').toLowerCase(),
        'filters': query_normalization(rules),
        'lang': document.documentElement.lang
      };
      return queryTemplate; //return rules;
    }
  });
} // 


function hookEventsForUIElements($builderEl, lang) {
  $builderEl.on('afterCreateRuleInput.queryBuilder', function (e, rule) {
    if (rule.filter.plugin == 'selectpicker') {
      rule.$el.find('.rule-value-container').find('.bootstrap-select').removeClass('form-control');
    }

    if (rule.filter.queryAttribute === 'time_period' || rule.filter.queryAttribute === "date") {
      if (rule.operator.type === 'between' || rule.operator.type === 'inrange') {
        let session = ArcheoSession.get();
        let timelineMinMax = [session.filters.timeline.minYear, session.filters.timeline.maxYear];
        ArcheoUI.initializeRangeSpinner(rule.$el, timelineMinMax, true, lang);
      } else {
        ArcheoUI.initializeYearInput(rule.$el, true, true, lang);
      }
    } else if (rule.filter.queryAttribute === 'age') {
      if (rule.operator.type === 'between' || rule.operator.type === 'inrange') {
        let minMax = [0, 125];
        ArcheoUI.initializeRangeSpinner(rule.$el, minMax, true, lang);
      } else {
        ArcheoUI.initializeYearInput(rule.$el, true, true, lang);
      }
      /*rule.$el.spinner({
      	culture: window.getLang(),
      	min: 0,
      	max: 125,
      	numberFormat: "n",
      	step: 1
      });*/

    } else if (rule.filter.queryAttribute === 'component') {
      let minMax = rule.filter.tags.has("proportion") ? [0, 1] : [-100, 100];
      ArcheoUI.initializeRangeSpinner(rule.$el, minMax, true, lang);
    }
  });
}

function removeUnnecessaryDividers($builderEl, lang) {
  $builderEl.on('afterInit.queryBuilder', function (e) {
    /* Change 'add' buttons appearance */
    var $buttonAdd = $builderEl.find('.btn-success');
    $buttonAdd.removeClass(['btn-success', 'btn-xs']);
    $buttonAdd.addClass(['custom-button', 'palette-tertiary-light', 'no-focus', 'positive', 'mb-0']);
    var filters = $(e.target)[0].queryBuilder.settings.filters.filter(function (el, i, a) {
      return el.depth > 0;
    });
    var optgroups = filters.map(function (filter) {
      return filter.optgroup;
    });
    var optgroupsDic = $(e.target)[0].queryBuilder.settings.optgroups;
    $(e.target).on('shown.bs.select', '.bootstrap-select > select', function () {
      optgroups.forEach(function (optgroup) {
        let label = optgroupsDic[optgroup][lang];
        $(`.bootstrap-select .dropdown-header > span:contains('${label}')`).parent().prev('.dropdown-divider').css("display", "none");
      });
    });
  });
}

function initializeQueryBuilderEvents($builderEl, lang) {
  hookEventsForUIElements($builderEl, lang);
  createInitializeSearchableEvent($builderEl, lang);
  createRulesTranslationEvent($builderEl, lang);
  removeUnnecessaryDividers($builderEl, lang);
  initializeResultsInputEvent($builderEl, lang);
  events_initializeTooltips($builderEl, lang);
  disableTitleTooltipsForSelects($builderEl, lang);
}


;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/customOperators.js
/* harmony default export */ const customOperators = ([{
  type: 'inrange',
  nb_inputs: 1,
  multiple: false,
  optgroup: 'date_interval',
  apply_to: ['number']
}, {
  type: 'between',
  nb_inputs: 1,
  multiple: false,
  optgroup: 'date_interval',
  apply_to: ['number']
}, {
  type: 'part_of',
  nb_inputs: 1,
  multiple: false,
  apply_to: ['string']
}, {
  type: 'not_part_of',
  nb_inputs: 1,
  multiple: false,
  apply_to: ['number']
}, {
  type: 'distance__less',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'distance__less_or_equal',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'distance__greater',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'distance__greater_or_equal',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'timepoint__less',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__less_or_equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__greater',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__greater_or_equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__not_equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'boolean_does',
  nb_inputs: 1,
  apply_to: ['boolean']
}]);
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/customTemplates.js
/* harmony default export */ function customTemplates() {
  return {
    /*filterSelect: '\
    	{{ var optgroup = null; }} \
    	<select class="selectpicker" name="{{= it.rule.id }}_filter"> \
    	{{? it.settings.display_empty_filter }} \
    		<option value="-1">{{= it.settings.select_placeholder }}</option> \
    	{{?}} \
    	{{~ it.filters: filter }} \
    		{{? optgroup !== filter.optgroup }} \
    		{{? optgroup !== null }}</optgroup>{{?}} \
    		{{? (optgroup = filter.optgroup) !== null }} \
    			<optgroup label=" \
    			{{? filter.root === true }} \
    			<span> \
    			{{??}} \
    			<span style=\'padding-left: {{= (filter.depth+1) * 2 }}em\'> \
    			{{?}} \
    			{{? filter.root === true }} \
    			<i class=\'material-icons\'></i> \
    			{{??}} \
    				{{= filter.relation_previous }}&nbsp; \
    				{{? filter.relation_direction === "right" }} \
    					<span><b>&#8212;</b>{{= filter.relation }}</span>\
    					<i class=\'material-icons\'>east</i> \
    				{{??}} \
    					<i class=\'material-icons\'>west</i><span>{{= filter.relation }} \
    					<b>&#8212;</b></span>\
    				{{?}} \
    			{{?}} \
    			<span class=\'badge badge-success\'>entity</span>&nbsp;{{= it.translate(it.settings.optgroups[optgroup]) }}</span>"> \
    		{{?}} \
    		{{?}} \
    		<option {{~ filter.tags: tag }} {{= tag}} {{~}} entity-name={{= filter.field}} value-attribute={{= filter.valueAttribute}} label-attribute={{= filter.queryAttribute}} details-attribute={{= filter.detailsAttribute}} title="<span class=\'right-separator\'>{{= it.translate(it.settings.optgroups[optgroup]) }}</span>{{= it.translate(filter.label) }}&nbsp;" data-tokens="{{= it.translate(it.settings.optgroups[optgroup]) }}" value="{{= filter.id }}" {{? filter.icon}}data-icon="{{= filter.icon}}"{{?}} data-content="<span style=\'padding-left: {{= (filter.depth+1) * 2 }}em\'>&#8226;&nbsp;&nbsp;{{= it.translate(filter.label) }}</span>">{{= it.translate(filter.label) }}</option> \
    	{{~}} \
    	{{? optgroup !== null }}</optgroup>{{?}} \
    	</select>',*/
    filterSelect: `
			{{ var optgroup = null; }}
			<select class="selectpicker" name="{{= it.rule.id }}_filter">
			{{? it.settings.display_empty_filter }}
				<option value="-1">{{= it.settings.select_placeholder }}</option>
			{{?}}
			{{~ it.filters: filter }}
				{{? optgroup !== filter.optgroup }}
				{{? optgroup !== null }}</optgroup>{{?}}
				{{? (optgroup = filter.optgroup) !== null }}
					<optgroup label="
					{{? filter.root === true }}
					<span>
					{{??}}
					<span style=\'padding-left: {{= (filter.depth+1) * 2 }}em\'>
					{{?}}
					{{? filter.root === true }}
					<i class=\'material-icons\'></i>
					{{??}}
						{{= filter.relation_previous }}&nbsp;
						{{? filter.relation_direction === "right" }}
							<span><b>&#8212;</b>{{= filter.relation }}</span>
							<i class=\'material-icons\'>east</i>
						{{??}}
							<i class=\'material-icons\'>west</i><span>{{= filter.relation }}
							<b>&#8212;</b></span>
						{{?}}
					{{?}}
					<span class=\'badge badge-success\'>entity</span>&nbsp;{{= it.translate(it.settings.optgroups[optgroup]) }}</span>">
				{{?}}
				{{?}}
				<option {{~ filter.tags: tag }} {{= tag}} {{~}} entity-name={{= filter.field}} value-attribute={{= filter.valueAttribute}} label-attribute={{= filter.queryAttribute}} details-attribute={{= filter.detailsAttribute}} title="<span class=\'right-separator\'>{{= it.translate(it.settings.optgroups[optgroup]) }}</span>{{= it.translate(filter.label) }}&nbsp;" data-tokens="{{= it.translate(it.settings.optgroups[optgroup]) }}" value="{{= filter.id }}" {{? filter.icon}}data-icon="{{= filter.icon}}"{{?}} data-content="<span style=\'padding-left: {{= (filter.depth+1) * 2 }}em\'>&#8226;&nbsp;&nbsp;{{= it.translate(filter.label) }}</span>">{{= it.translate(filter.label) }}</option>
			{{~}}
			{{? optgroup !== null }}</optgroup>{{?}}
			</select>`,
    group: '\
			<div id="{{= it.group_id }}" class="rules-group-container"> \
			<div class="rules-group-header"> \
				<div class="btn-group pull-right group-actions"> \
				<button type="button" class="btn-xs btn custom-button mb-0 palette-tertiary-light no-focus positive mr-2" data-add="rule"> \
					<i class="{{= it.icons.add_rule }}"></i> {{= it.translate("add_rule") }} \
				</button> \
				{{? it.settings.allow_groups===-1 || it.settings.allow_groups>=it.level }} \
					<button type="button" class="btn-xs btn custom-button mb-0 palette-tertiary-light no-focus positive mr-2" data-add="group"> \
					<i class="{{= it.icons.add_group }}"></i> {{= it.translate("add_group") }} \
					</button> \
				{{?}} \
				{{? it.level>1 }} \
					<button type="button" class="btn-xs btn custom-button mb-0 palette-tertiary-light no-focus negative mr-2" data-delete="group"> \
					<i class="{{= it.icons.remove_group }}"></i> {{= it.translate("delete_group") }} \
					</button> \
				{{?}} \
				</div> \
				<div class="btn-group group-conditions"> \
				{{~ it.conditions: condition }} \
					<label class="btn-xs btn custom-button mb-0 palette-tertiary-light"> \
					<input type="radio" name="{{= it.group_id }}_cond" value="{{= condition }}"> {{= it.translate("conditions", condition) }} \
					</label> \
				{{~}} \
				</div> \
				{{? it.settings.display_errors }} \
				<div class="error-container"><i class="{{= it.icons.error }}"></i></div> \
				{{?}} \
			</div> \
			<div class=rules-group-body> \
				<div class=rules-list></div> \
			</div> \
			</div>',
    rule: `
			<div id="{{= it.rule_id }}" class="rule-container"> 
			
			<div class="rule-header">
				<div class="btn-group pull-right rule-actions">
				<button type="button" class="btn-xs btn custom-button mb-0 palette-tertiary-light no-focus negative mr-2" data-delete="rule">
					<i class="{{= it.icons.remove_rule }}"></i> {{= it.translate("delete_rule") }}
				</button>
				</div>
			</div>
			{{? it.settings.display_errors }}
				<div class="error-container"><i class="{{= it.icons.error }}"></i></div>
			{{?}}

			<button type="button" id="{{= it.rule_id }}_tooltip" class="hidden archeo-tooltip">
				<i class="tooltip-icon material-icons py-1 px-2">help</i>
			</button>
			<div class="rule-filter-container"></div>
			<div class="rule-preoperator-container d-inline-block"></div>
			<div class="rule-operator-container"></div>
			<div class="rule-value-container"></div> 
			</div>`
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/filterFunctions.js
function getRelationFilterValue(ruleContainer) {
  return ruleContainer.find('select.relation-filter').val() || '';
}

/* harmony default export */ const filterFunctions = ({
  // Suitable for: date, age
  from_to: {
    valueGetter: function (rule) {
      var attributeName = rule.filter.valueAttribute;
      var values = [];
      let ruleContainer = rule.$el.find('.rule-value-container');

      if (rule.operator.type == 'between' || rule.operator.type == 'inrange') {
        values = [ruleContainer.find('.input-years-from input.attribute-value').getDateNumberValue(), ruleContainer.find('.input-years-to input.attribute-value').getDateNumberValue()];
      } else {
        values = ruleContainer.find('input.attribute-value').getDateNumberValue();
      }

      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');

      if (rule.operator.type == 'between' || rule.operator.type == 'inrange') {
        let $fromInput = ruleContainer.find('.input-years-from input.attribute-value');
        $fromInput.val(value[0]);
        $fromInput.change();
        let $toInput = ruleContainer.find('.input-years-to input.attribute-value');
        $toInput.val(value[1]);
        $toInput.change();
      } else {
        let $input = ruleContainer.find('input.attribute-value');
        $input.val(value);
        $input.change();
        rule.$el.find('.rule-value-container > :first').change();
      }
    },
    default_operator: 'between'
  },
  coordinates: {
    valueGetter: function (rule) {
      let attributeName = rule.filter.valueAttribute;
      let distance = parseFloat(rule.$el.find('.rule-value-container .distance.attribute-value').val());
      let distanceInMeters = distance * 1000;
      let ruleContainer = rule.$el.find('.rule-value-container');
      let values = {
        point: {
          latitude: parseFloat(ruleContainer.find('.latitude.attribute-value').val()),
          longitude: parseFloat(ruleContainer.find('.longitude.attribute-value').val())
        },
        distance: distanceInMeters
      };
      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');
      ruleContainer.find('.latitude.attribute-value').val(value.point.latitude).trigger('change');
      ruleContainer.find('.longitude.attribute-value').val(value.point.longitude).trigger('change');
      ruleContainer.find('.distance.attribute-value').val(value.distance).trigger('change');
    },
    default_operator: 'less',
    default_value: {
      point: {
        latitude: '',
        longitude: ''
      },
      distance: ''
    }
  },

  /*
  attribute-value
  component-name
  result-type
  */
  component: {
    valueGetter: function (rule) {
      let ruleContainer = rule.$el.find('.rule-value-container');
      let attributeName = ruleContainer.find('select.component-name').val();
      let resultType = ruleContainer.find('select.result-type').val();
      let values = parseFloat(ruleContainer.find('input.attribute-value').val());
      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        entity: resultType,
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');
      ruleContainer.find('.attribute-value').val(value).trigger('change');
    },
    default_operator: 'less',
    validation: {
      callback: (value, rule) => {
        for (var i = 0; i < value.length; ++i) if (!ArcheoUtilities.isValidNonEmptyString(value[i])) return `Please input correct value of the type \"${rule.filter.type}\"`;

        return true;
      }
    }
  },
  default: {
    valueGetter: function (rule) {
      let attributeName = rule.filter.valueAttribute;
      let operation = rule.operator.type;
      let values = [];
      let ruleContainer = rule.$el.find('.rule-value-container');
      let inputElement = ruleContainer.find('input.attribute-value,select.attribute-value');

      if (operation == 'in' || operation == 'not_in') {
        let inputValue = inputElement.val();
        let separator = rule.filter.value_separator;
        values = inputValue.split(separator);
      } else {
        values = inputElement.val();
      }

      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');
      ruleContainer.find('input.attribute-value,select.attribute-value').val(value).trigger('change');
    },
    default_operator: 'equal',
    //default_value: '',
    validation: {
      callback: (value, rule) => {
        for (var i = 0; i < value.length; ++i) if (!ArcheoUtilities.isValidNonEmptyString(value[i])) return `Please input correct value of the type \"${rule.filter.type}\"`;

        return true;
      }
    }
  }
});
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/operatorsSets.json
const operatorsSets_namespaceObject = JSON.parse('{"fL":["equal","not_equal","contains","not_contains","begins_with","not_begins_with","in","not_in"],"Ys":["equal","not_equal"],"G_":["equal","not_equal","part_of","not_part_of"],"t4":["between","inrange","timepoint__less","timepoint__less_or_equal","timepoint__greater","timepoint__greater_or_equal","timepoint__equal","timepoint__not_equal"],"Rx":["between","less","less_or_equal","greater","greater_or_equal","equal","not_equal"],"xm":["distance__less","distance__less_or_equal","distance__greater","distance__greater_or_equal"]}');
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getAttributesTemplates.js


/* harmony default export */ function getAttributesTemplates(langDict, validators, customInputs) {
  var defaultSetting = {
    tags: [],
    valueAttribute: '""',
    queryAttribute: '""',
    detailsAttribute: '""',
    value_separator: ',',
    depth: 0,
    relation: '',
    relation_direction: 'right',
    relation_previous: '',
    root: false
  };
  return {
    number_date: { // wczytać z serwera zakresy
      ...defaultSetting,
      label: langDict.attributes.date,
      operators: operatorsSets_namespaceObject.t4,
      type: 'integer',
      valueAttribute: 'time_period',
      queryAttribute: 'time_period',
      input: customInputs.from_to,
      ...filterFunctions.from_to,
      validation: {
        callback: validators.min_max_number(window.metadata.TimePeriod.minYear, window.metadata.TimePeriod.maxYear)
      },
      tags: ['isYear']
    },
    period_length: { // wczytać z serwera zakresy
      ...defaultSetting,
      label: langDict.attributes.period_length,
      operators: operatorsSets_namespaceObject.t4,
      type: 'integer',
      valueAttribute: 'length',
      queryAttribute: 'length',
      input: customInputs.from_to,
      ...filterFunctions.from_to,
      validation: {
        callback: validators.min_max_number(0, Math.abs(window.metadata.TimePeriod.maxYear - window.metadata.TimePeriod.minYear))
      },
      tags: []
    },
    age: { ...defaultSetting,
      label: langDict.attributes.age,
      type: 'integer',
      valueAttribute: 'age',
      queryAttribute: 'age',
      input: customInputs.from_to,
      operators: operatorsSets_namespaceObject.t4,
      ...filterFunctions.from_to,
      validation: {
        callback: validators.min_max_number(0, 125)
      }
    },
    component: { ...defaultSetting,
      label: langDict.attributes.component,
      type: 'double',
      valueAttribute: 'component',
      queryAttribute: 'component',
      input: customInputs.component,
      operators: operatorsSets_namespaceObject.Rx,
      ...filterFunctions.component,
      validation: {
        callback: validators.min_max_number(-100, 100)
      }
    },
    tree_name: { ...defaultSetting,
      label: langDict.attributes.name,
      type: 'string',
      input: 'text',
      valueAttribute: 'name',
      //'treeIndex',
      queryAttribute: 'name',
      input: customInputs.default,
      operators: operatorsSets_namespaceObject.G_,
      ...filterFunctions["default"],
      validation: {
        callback: validators.tree()
      },
      tags: ['searchable']
    },
    text_name: { ...defaultSetting,
      label: langDict.attributes.name,
      type: 'string',
      valueAttribute: 'name',
      queryAttribute: 'name',
      input: customInputs.default,
      operators: operatorsSets_namespaceObject.fL,
      ...filterFunctions["default"],
      validation: {
        callback: validators.min_max_length(1, 1000)
      },
      tags: ['translatable']
    },
    relation_exists: { ...defaultSetting,
      label: langDict.others.relation_exists,
      type: 'boolean',
      input: 'select',
      values: langDict.values.relation_existence,
      valueAttribute: 'relationship',
      //queryAttribute: 'relationship',
      input: customInputs.relation_exists,
      operators: ["boolean_does"],
      ...filterFunctions["default"] //tags: ['translatable']

    },
    select_name: { ...defaultSetting,
      label: langDict.attributes.name,
      type: 'string',
      input: customInputs.select,
      valueAttribute: 'name',
      queryAttribute: 'name',
      operators: operatorsSets_namespaceObject.Ys,
      ...filterFunctions["default"],
      validation: {
        callback: validators.min_max_length(1, 1000)
      },
      tags: ['translatable'],
      plugin: 'selectpicker',
      plugin_config: {
        style: 'btn-inverse btn-xs'
      }
    },
    text_id: { ...defaultSetting,
      label: langDict.attributes.id,
      type: 'string',
      input: 'text',
      valueAttribute: 'id',
      queryAttribute: 'id',
      input: customInputs.default,
      operators: operatorsSets_namespaceObject.fL,
      ...filterFunctions["default"],
      validation: {
        callback: validators.min_max_length(1, 1000)
      }
    },

    /*
    tree_name: {
    	...defaultSetting,
    	label: langDict.attributes.name,
    	type: 'string',
    	input: 'text',
    	valueAttribute: 'name',//'treeIndex',
    	queryAttribute: 'name',
    	input: customInputs.default,
    	operators: operatorsSets.tree,
    	...filterFunctions.default,
    	validation: { callback: validators.tree() },
    	tags: ['searchable']
    },
    */
    point_coords: { ...defaultSetting,
      label: langDict.attributes.coordinates,
      type: 'double',
      valueAttribute: 'coordinates',
      //queryAttribute: 'coordinates',
      input: customInputs.point,
      operators: operatorsSets_namespaceObject.xm,
      ...filterFunctions.coordinates,
      validation: {
        callback: validators.coordinates()
      }
    }
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getValidators.js
/* harmony default export */ function getValidators(langDict) {
  return {
    'min_max_length': (min, max) => {
      return (value, rule) => {
        ArcheoUtilities.parseValues(value, rule.filter.type);
        if (value.length < min || value.length > max) return langDict.errors.min_max_length_exceeds.format(min, max);
        return true;
      };
    },
    'min_max_number': (min, max) => {
      return (value, rule) => {
        if (value.length == 2) if (value[0] > value[1]) return langDict.errors.min_max_number_order;

        for (var i = 0; i < value.length; ++i) if (value[i] < min || value[i] > max) return langDict.errors.min_max_number_exceeds.format(min, max);

        return true;
      };
    },
    'coordinates': () => {
      return (value, rule) => {
        ArcheoUtilities.parseValues(value, rule.filter.type);
        let maxDistanceInMeters = 1000000000;
        if (!ArcheoUtilities.isValid(value.point.latitude) || !ArcheoUtilities.isValid(value.point.longitude) || !ArcheoUtilities.isValid(value.distance)) return langDict.errors.coordinates_empty;else if (value.point.latitude < -90 || value.point.latitude > 90) {
          return langDict.errors.coordinates_lat;
        } else if (value.point.longitude < -180 || value.point.longitude > 180) {
          return langDict.errors.coordinates_long;
        } else if (value.distance < 0 || value.distance >= maxDistanceInMeters) {
          return langDict.errors.coordinates_dist;
        }
        return true;
      };
    },
    'tree': () => {
      return (value, rule) => {
        if (!ArcheoUtilities.isValidNonEmptyString(value)) return langDict.errors.tree_not_selected;
        return true;
      };
    }
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getCustomInputs.js
function getRelationFilter(rule, langDict) {
  if (rule.filter.tags.has("relations_filter")) return `
		<span>&nbsp;and&nbsp;</span>
		<select class="selectpicker relation-filter" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
			${langDict.values.relation_operator.map(item => "<option value=\"" + item.value + "\">" + item.label + "</option>")}
		</select>
		<span>of the related nodes must match.</span>
		`;else return '';
}

/* harmony default export */ function getCustomInputs(langDict) {
  let customInputs = {
    'default': (rule, name) => {
      // .format(rule.filter.label)
      return `
			<input class="attribute-value form-control-sm plain-text-input" type="text" autocomplete="off" placeholder="${langDict.placeholders.default}"/>
			${getRelationFilter(rule, langDict)}
			`;
    },
    'number': (rule, name) => {
      // .format(rule.filter.label)
      return `
			<input class="attribute-value" type="number" autocomplete="off"/>
			${getRelationFilter(rule, langDict)}
			`;
    },
    'component': (rule, name) => {
      let inputAttributes = rule.filter.tags.has("proportion") ? `min="0" max=1` : `min="-100" max=100`;
      return `
			<input class="attribute-value w-25 form-control plain-number-input" autocomplete="off" type="number" value="0" ${inputAttributes} step="0.01"/>
			<span>&nbsp;for&nbsp;</span>
			<select class="selectpicker component-name" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
				${[{
        "value": "c1",
        "label": "component #1"
      }, {
        "value": "c2",
        "label": "component #2"
      }].map(item => "<option value=\"" + item.value + "\">" + item.label + "</option>")}
			</select>
			<span>&nbsp;of the&nbsp;</span>
			<select class="selectpicker result-type" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
				${[{
        "value": "result_pca_world",
        "label": "PCA World"
      }].map(item => "<option value=\"" + item.value + "\">" + item.label + "</option>")}
			</select>
			<span>&nbsp;analysis type.</span>
			`;
    },

    /* With values from meta */
    'select': (rule, name) => {
      return `
			<select class="selectpicker attribute-value" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
				${rule.filter.values.map(item => "<option value=\"" + item + "\">" + item + "</option>")}
			</select>
			${getRelationFilter(rule, langDict)}
			`;
    },
    'relation_exists': (rule, name) => {
      return `
			<select class="selectpicker attribute-value" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
				${langDict.values.relation_existence.map(item => "<option value=\"" + item.value + "\">" + item.label + "</option>")}
			</select>
			`;
    },
    'search': (rule, name) => {
      return `
			<div style="display: inline-block">
				<div class="input-group icon-textbox-wrapper">
					<input class="form-control attribute-value searcher plain-text-input" value="" type="text" aria-label="search" placeholder="${langDict.placeholders.search}">
					<div class="input-group-append">
						<i class="material-icons">search</i>
					</div>
				</div>
			</div>
			${getRelationFilter(rule, langDict)}
			`;
    },
    'point': (rule, name) => {
      return `
				<input placeholder="Latitude" class="w-25 attribute-value form-control latitude plain-number-input" id="${name}_latitude" name="${name}_1" type="number" value="" min="-90" max="90" step="0.000001" />
				<input placeholder="Longitude" class="w-25 attribute-value form-control longitude plain-number-input" id="${name}_longitude" name="${name}_2" type="number" value="" min="-180" max=180 step="0.000001" />
				<input placeholder="Radius (km)" class="w-25 attribute-value form-control distance plain-number-input" id="${name}_distance" name="${name}_3" type="number" value="" min="0" max="1000000" step="1" />
				${getRelationFilter(rule, langDict)}
			`;
    },
    'from_to': (rule, name) => {
      let additionalClass = rule.filter.tags.has("contemporary") ? 'contemporary' : '';
      let isYear = rule.filter.tags.has("isYear") ? 'is_year=""' : '';

      if (rule.operator.type == 'between' || rule.operator.type == 'inrange') {
        return `
				<div id=${name}_range class="years-range-spinner d-flex">
					<span class="input-years-from w-75 ${additionalClass}">
						<input class="attribute-value form-control-sm plain-text-input w-100" type="text" value="0" autocomplete="off" ${isYear}/>
					</span>
					<hr class="range-line w-25"/>
					<span class="input-years-to w-75 ${additionalClass}">
						<input class="attribute-value form-control-sm plain-text-input w-100" type="text" value="0" autocomplete="off" ${isYear}/>
					</span>
				</div>
				${getRelationFilter(rule, langDict)}
				`;
      } else {
        return `
					<span class="input-years-to ${additionalClass}">
						<input class="attribute-value form-control-sm plain-text-input w-50" type="text" value="0" autocomplete="off" ${isYear}/>
					</span>
					${getRelationFilter(rule, langDict)}
				`;
      }
    }
  };
  return customInputs;
} //input.input-years-from
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getDatasetFilters.js




/* harmony default export */ function getDatasetFilters(langDict) {
  const validators = getValidators(langDict);
  const customInputs = getCustomInputs(langDict);
  const attributesTemplates = getAttributesTemplates(langDict, validators, customInputs);
  var currentYear = new Date().getFullYear();
  return {
    'RemainsAADR': [//'remains': [
    { ...attributesTemplates.text_id,
      optgroup: 'remains',
      field: 'remains',
      id: 'remains_id',
      root: true,
      depth: 0,
      tags: ['searchable'],
      input: customInputs.search,
      tooltip: langDict.tooltips.remains_id
    },
    /*
    	...attributesTemplates.tree_name,
    	optgroup: 'haplogroup_y',
    	field: 'haplogroup_y',
    	id: 'haplogroup_y_name',
    	detailsAttribute: 'synonym',
    	tags: ['searchable'],
    	input: customInputs.search,
    	depth: 1,
    	tooltip: langDict.tooltips.haplogroup_y_name
    */

    /* description */
    //],
    //'population' 
    { ...attributesTemplates.text_name,
      optgroup: 'past_population',
      field: 'past_population',
      id: 'past_population_name',
      depth: 1,
      relation: langDict.relations.part_of,
      relation_previous: langDict.optgroups.remains,
      tags: ['searchable'],
      input: customInputs.search,
      tooltip: langDict.tooltips.past_population_name
    }, //'genetical_sex': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_relationship',
      depth: 1,
      relation: langDict.relations.is,
      relation_previous: langDict.optgroups.remains,
      tooltip: langDict.tooltips.genetical_sex_relationship
    }, { ...attributesTemplates.select_name,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_name',
      values: window.metadata.Sex.name,
      tags: ['translatable'],
      depth: 1,
      tooltip: langDict.tooltips.genetical_sex_name
    }, //'hy': [ relation_exists
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_relationship',
      depth: 1,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.remains,
      tooltip: langDict.tooltips.haplogroup_y_relationship
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1,
      tooltip: langDict.tooltips.haplogroup_y_name
    }, //],
    //'hmt': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_relationship',
      depth: 1,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.remains,
      tooltip: langDict.tooltips.haplogroup_mt_relationship
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1,
      tooltip: langDict.tooltips.haplogroup_mt_name
    }, //],
    //'dating': [
    { ...attributesTemplates.number_date,
      optgroup: 'dating',
      field: 'dating',
      id: 'dating_time_period',
      depth: 1,
      relation: langDict.relations.from_time,
      relation_previous: langDict.optgroups.remains,
      tooltip: langDict.tooltips.dating_time_period
    }, { ...attributesTemplates.period_length,
      optgroup: 'dating',
      field: 'dating',
      id: 'dating_time_period_length',
      depth: 1,
      tooltip: langDict.tooltips.dating_time_period_length
    }, //'dating_type': [
    { ...attributesTemplates.select_name,
      label: langDict.attributes.type,
      optgroup: 'dating_type',
      field: 'dating_type',
      id: 'dating_type_name',
      values: window.metadata.DatingType.name,
      tags: ['translatable'],
      depth: 2,
      relation: langDict.relations.is,
      relation_previous: langDict.optgroups.dating,
      tooltip: langDict.tooltips.dating_type_name
    }, //'dating_culture': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'dating_culture',
      field: 'dating_culture',
      id: 'dating_culture_relationship',
      depth: 2,
      relation: langDict.relations.from_time,
      relation_previous: langDict.optgroups.dating,
      tooltip: langDict.tooltips.dating_culture_relationship
    }, { ...attributesTemplates.text_name,
      label: langDict.attributes.name,
      optgroup: 'dating_culture',
      field: 'dating_culture',
      id: 'dating_culture_name',
      tags: ['searchable', 'translatable', 'relations_filter'],
      input: customInputs.search,
      depth: 2,
      tooltip: langDict.tooltips.dating_culture_name
    }, //],
    //'phase': [
    { // multiple rels?
      ...attributesTemplates.select_name,
      label: langDict.attributes.function,
      optgroup: 'use_phase',
      field: 'use_phase_function',
      id: 'use_phase_function_name',
      values: window.metadata.UsePhaseFunction.name,
      tags: ['translatable'],
      relation: langDict.relations.from,
      relation_previous: langDict.optgroups.remains,
      depth: 1,
      tooltip: langDict.tooltips.use_phase_function_name
    },
    /*{
    	...attributesTemplates.number_date,
    	optgroup: 'use_phase',
    	field: 'use_phase',
    	id: 'usephase_year',
    	depth: 1,
    	tooltip: langDict.tooltips.usephase_year
    },
    {
    	...attributesTemplates.period_length,
    	optgroup: 'use_phase',
    	field: 'use_phase',
    	id: 'use_phase_period_length',
    	depth: 1,
    	tooltip: langDict.tooltips.use_phase_period_length
    },*/

    /*
    //'use_phase_from_culture': [
    {
    	...attributesTemplates.relation_exists,
    	optgroup: 'use_phase_from_culture',
    	field: 'use_phase_from_culture',
    	id: 'use_phase_culture_relationship',
    	depth: 2,
    	relation: langDict.relations.from_time,
    	relation_previous: langDict.optgroups.use_phase,
    	tooltip: langDict.tooltips.use_phase_culture_relationship
    },
    {
    	...attributesTemplates.text_name,
    	label: langDict.attributes.name,
    	optgroup: 'use_phase_from_culture',
    	field: 'use_phase_from_culture',
    	id: 'use_phase_from_culture_name',
    	tags: ['searchable', 'translatable', 'relations_filter'],
    	input: customInputs.search,
    	depth: 2,
    	tooltip: langDict.tooltips.use_phase_from_culture_name
    },
    //'use_phase_part_of_culture': [
    {
    	...attributesTemplates.relation_exists,
    	optgroup: 'use_phase_part_of_culture',
    	field: 'use_phase_part_of_culture',
    	id: 'use_phase_part_of_culture_relationship',
    	depth: 2,
    	relation: langDict.relations.part_of,
    	relation_previous: langDict.optgroups.use_phase,
    	tooltip: langDict.tooltips.use_phase_part_of_culture_relationship
    },
    {
    	...attributesTemplates.text_name,
    	label: langDict.attributes.name,
    	optgroup: 'use_phase_part_of_culture',
    	field: 'use_phase_part_of_culture',
    	id: 'use_phase_part_of_culture_name',
    	tags: ['searchable', 'translatable', 'relations_filter'],
    	input: customInputs.search,
    	depth: 2,
    	tooltip: langDict.tooltips.use_phase_part_of_culture_name
    },
    //'period': [
    {
    	...attributesTemplates.relation_exists,
    	optgroup: 'use_phase_part_of_period',
    	field: 'use_phase_part_of_period',
    	id: 'use_phase_part_of_period_relationship',
    	depth: 2,
    	relation: langDict.relations.part_of,
    	relation_previous: langDict.optgroups.use_phase,
    	tooltip: langDict.tooltips.archaeological_period_relationship
    },
    {
    	...attributesTemplates.tree_name,
    	optgroup: 'use_phase_part_of_period',
    	field: 'use_phase_part_of_period',
    	id: 'use_phase_part_of_period_name',
    	tags: ['searchable', 'translatable', 'relations_filter'],
    	input: customInputs.search,
    	depth: 2,
    	tooltip: langDict.tooltips.archaeological_period_name
    },*/
    //'site': [
    { ...attributesTemplates.text_name,
      optgroup: 'archaeological_site',
      field: 'archaeological_site',
      id: 'archaeological_site_name',
      tags: ['translatable', 'searchable'],
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.remains,
      depth: 1,
      tooltip: langDict.tooltips.archaeological_site_name,
      input: customInputs.search
    }, { ...attributesTemplates.point_coords,
      optgroup: 'archaeological_site',
      field: 'archaeological_site',
      id: 'archaeological_site_coordinates',
      depth: 1,
      tooltip: langDict.tooltips.archaeological_site_coordinates
    }, //'politregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'political_region',
      field: 'political_region',
      id: 'political_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.archaeological_site,
      tooltip: langDict.tooltips.political_region_name
    }, //'geographicalregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'geographical_region',
      field: 'geographical_region',
      id: 'geographical_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.archaeological_site,
      tooltip: langDict.tooltips.geographical_region_name
    }, //'culturalregion': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'cultural_region',
      field: 'cultural_region',
      id: 'cultural_region_relationship',
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.archaeological_site,
      tooltip: langDict.tooltips.cultural_region_relationship
    }, { ...attributesTemplates.text_name,
      optgroup: 'cultural_region',
      field: 'cultural_region',
      id: 'cultural_region_name',
      tags: ['searchable', 'translatable', 'relations_filter'],
      input: customInputs.search,
      depth: 2,
      tooltip: langDict.tooltips.cultural_region_name
    }, //],
    //'sample': [
    { ...attributesTemplates.text_id,
      optgroup: 'sample',
      field: 'sample',
      id: 'sample_id',
      relation: langDict.relations.of,
      relation_direction: 'left',
      relation_previous: langDict.optgroups.remains,
      depth: 1,
      tooltip: langDict.tooltips.sample_id,
      tags: ['searchable'],
      input: customInputs.search
    }, //'result_type': Admixture [
    //'admixturetype': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'result_admixture',
      field: 'result_admixture',
      id: 'result_admixture_relationship',
      tags: ['proportion'],
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_admixture_type_relationship
    }, { ...attributesTemplates.component,
      optgroup: 'result_admixture',
      field: 'result_admixture',
      id: 'result_admixture_component',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_admixture_component
    }, //'pcatype': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'result_pca',
      field: 'result_pca',
      id: 'result_pca_relationship',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_pca_type_relationship
    }, { ...attributesTemplates.component,
      optgroup: 'result_pca',
      field: 'result_pca',
      id: 'result_pca_component',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_pca_component
    }, //'umaptype': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'result_umap',
      field: 'result_umap',
      id: 'result_umap_relationship',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_umap_type_relationship
    }, { ...attributesTemplates.component,
      optgroup: 'result_umap',
      field: 'result_umap',
      id: 'result_umap_component',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_umap_component
    }, //'source': [
    { ...attributesTemplates.text_name,
      label: langDict.attributes.source_name,
      optgroup: 'source',
      field: 'source',
      id: 'source_name',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.published_in,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.source_name
    }, { ...attributesTemplates.number_date,
      valueAttribute: 'date',
      queryAttribute: 'date',
      label: langDict.attributes.source_date,
      operators: operatorsSets_namespaceObject.Rx,
      validation: {
        callback: validators.min_max_number(2000, currentYear)
      },
      optgroup: 'source',
      field: 'source',
      tags: ['contemporary'],
      id: 'source_date',
      depth: 2,
      tooltip: langDict.tooltips.source_date
    }, // Author
    { ...attributesTemplates.text_name,
      label: langDict.attributes.name,
      optgroup: 'source_author',
      field: 'source_author',
      id: 'source_author_name',
      tags: ['searchable', 'relations_filter'],
      input: customInputs.search,
      depth: 3,
      relation: langDict.relations.of,
      relation_direction: 'left',
      relation_previous: langDict.optgroups.source,
      tooltip: langDict.tooltips.source_author_name
    }],
    'PersonAADR': [//'person': [
    { ...attributesTemplates.text_id,
      optgroup: 'person',
      field: 'person',
      id: 'person_id',
      root: true,
      depth: 0,
      tooltip: langDict.tooltips.person_id,
      tags: ['searchable'],
      input: customInputs.search
    },
    /* description */
    //],
    //'population' 
    { ...attributesTemplates.text_name,
      optgroup: 'present_population',
      field: 'present_population',
      id: 'present_population_name',
      depth: 1,
      relation: langDict.relations.part_of,
      relation_previous: langDict.optgroups.person,
      tags: ['searchable'],
      input: customInputs.search,
      tooltip: langDict.tooltips.present_population_name
    }, //'genetical_sex': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_relationship',
      depth: 1,
      relation: langDict.relations.is,
      relation_previous: langDict.optgroups.person,
      tooltip: langDict.tooltips.genetical_sex_relationship
    }, { ...attributesTemplates.select_name,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_name',
      values: window.metadata.Sex.name,
      tags: ['translatable'],
      depth: 1,
      tooltip: langDict.tooltips.genetical_sex_name
    }, //'hy': [ relation_exists
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_relationship',
      depth: 1,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.person,
      tooltip: langDict.tooltips.haplogroup_y_relationship
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1,
      tooltip: langDict.tooltips.haplogroup_y_name
    }, //],
    //'hmt': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_relationship',
      depth: 1,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.person,
      tooltip: langDict.tooltips.haplogroup_mt_relationship
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1,
      tooltip: langDict.tooltips.haplogroup_mt_name
    }, //'place': [
    { ...attributesTemplates.text_name,
      optgroup: 'place',
      field: 'place',
      id: 'place_name',
      tags: ['translatable', 'searchable'],
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.person,
      depth: 1,
      tooltip: langDict.tooltips.place_name,
      input: customInputs.search
    }, { ...attributesTemplates.point_coords,
      optgroup: 'place',
      field: 'place',
      id: 'place_coordinates',
      depth: 1,
      tooltip: langDict.tooltips.place_coordinates
    }, //'politregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'political_region',
      field: 'political_region',
      id: 'political_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.place,
      tooltip: langDict.tooltips.political_region_name
    }, //'geographicalregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'geographical_region',
      field: 'geographical_region',
      id: 'geographical_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.place,
      tooltip: langDict.tooltips.geographical_region_name
    }, //'culturalregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'cultural_region',
      field: 'cultural_region',
      id: 'cultural_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.place,
      tooltip: langDict.tooltips.cultural_region_name
    }, //],
    //'sample': [
    { ...attributesTemplates.text_id,
      optgroup: 'sample',
      field: 'sample',
      id: 'sample_id',
      relation: langDict.relations.of,
      relation_direction: 'left',
      relation_previous: langDict.optgroups.person,
      depth: 1,
      tooltip: langDict.tooltips.sample_id,
      tags: ['searchable'],
      input: customInputs.search
    }, //'result_type': Admixture [
    //'admixturetype': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'result_admixture',
      field: 'result_admixture',
      id: 'result_admixture_relationship',
      tags: ['proportion'],
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_admixture_type_relationship
    }, { ...attributesTemplates.component,
      optgroup: 'result_admixture',
      field: 'result_admixture',
      id: 'result_admixture_component',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_admixture_component
    }, //'pcatype': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'result_pca',
      field: 'result_pca',
      id: 'result_pca_relationship',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_pca_type_relationship
    }, { ...attributesTemplates.component,
      optgroup: 'result_pca',
      field: 'result_pca',
      id: 'result_pca_component',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_pca_component
    }, //'umaptype': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'result_umap',
      field: 'result_umap',
      id: 'result_umap_relationship',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_umap_type_relationship
    }, { ...attributesTemplates.component,
      optgroup: 'result_umap',
      field: 'result_umap',
      id: 'result_umap_component',
      depth: 2,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.result_umap_component
    }, //'source': [
    { ...attributesTemplates.text_name,
      label: langDict.attributes.source_name,
      optgroup: 'source',
      field: 'source',
      id: 'source_name',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.published_in,
      relation_previous: langDict.optgroups.sample,
      tooltip: langDict.tooltips.source_name
    }, { ...attributesTemplates.number_date,
      label: langDict.attributes.source_date,
      operators: operatorsSets_namespaceObject.Rx,
      validation: {
        callback: validators.min_max_number(2000, currentYear)
      },
      optgroup: 'source',
      field: 'source',
      tags: ['contemporary'],
      id: 'source_time_period',
      depth: 2,
      tooltip: langDict.tooltips.source_time_period
    }, // Author
    { ...attributesTemplates.text_name,
      label: langDict.attributes.name,
      optgroup: 'source_author',
      field: 'source_author',
      id: 'source_author_name',
      tags: ['searchable', 'relations_filter'],
      input: customInputs.search,
      depth: 3,
      relation: langDict.relations.of,
      relation_direction: 'left',
      relation_previous: langDict.optgroups.source,
      tooltip: langDict.tooltips.source_author_name
    }],

    /*'PersonGMP': [
    	//'person': [
    	{
    		...attributesTemplates.text_id,
    		optgroup: 'person',
    		field: 'person',
    		id: 'person_id',
    		root: true,
    		depth: 0
    	},
    	{
    		...attributesTemplates.age,
    		optgroup: 'person',
    		field: 'person',
    		id: 'person_age',
    		root: true
    	},
    	//],
    	//'genetical_sex': [
    	{
    		...attributesTemplates.relation_exists,
    		optgroup: 'genetical_sex',
    		field: 'genetical_sex',
    		id: 'genetical_sex_relationship',
    		depth: 1
    	},
    	{
    		...attributesTemplates.select_name,
    		optgroup: 'genetical_sex',
    		field: 'genetical_sex',
    		id: 'genetical_sex_name',
    		values: window.metadata.Sex.name,
    		tags: ['translatable'],
    		depth: 1
    	},
    	//'hy': [ relation_exists
    	{
    		...attributesTemplates.relation_exists,
    		optgroup: 'haplogroup_y',
    		field: 'haplogroup_y',
    		id: 'haplogroup_y_relationship',
    		depth: 1
    	},
    	{
    		...attributesTemplates.tree_name,
    		optgroup: 'haplogroup_y',
    		field: 'haplogroup_y',
    		id: 'haplogroup_y_name',
    		detailsAttribute: 'synonym',
    		tags: ['searchable'],
    		input: customInputs.search,
    		depth: 1
    	},
    	//],
    	//'hmt': [
    	{
    		...attributesTemplates.relation_exists,
    		optgroup: 'haplogroup_mt',
    		field: 'haplogroup_mt',
    		id: 'haplogroup_mt_relationship',
    		depth: 1
    	},
    	{
    		...attributesTemplates.tree_name,
    		optgroup: 'haplogroup_mt',
    		field: 'haplogroup_mt',
    		id: 'haplogroup_mt_name',
    		detailsAttribute: 'synonym',
    		tags: ['searchable'],
    		input: customInputs.search,
    		depth: 1
    	},
    	//'site': [
    	{
    		...attributesTemplates.text_name,
    		optgroup: 'place',
    		field: 'place',
    		id: 'place_name',
    		tags: ['translatable']
    	},
    	{
    		...attributesTemplates.point_coords,
    		optgroup: 'place',
    		field: 'place',
    		id: 'place_coordinates'
    	},
    	//'politregion': [
    	{
    		...attributesTemplates.text_name,
    		optgroup: 'political_region',
    		field: 'political_region',
    		id: 'political_region_name',
    		tags: ['searchable', 'translatable'],
    		input: customInputs.search,
    		depth: 1
    	},
    	//'geographicalregion': [
    	{
    		...attributesTemplates.text_name,
    		optgroup: 'geographical_region',
    		field: 'geographical_region',
    		id: 'geographical_region_name',
    		tags: ['searchable', 'translatable'],
    		input: customInputs.search,
    		depth: 1
    	},
    	//'culturalregion': [
    	{
    		...attributesTemplates.text_name,
    		optgroup: 'cultural_region',
    		field: 'cultural_region',
    		id: 'cultural_region_name',
    		tags: ['searchable', 'translatable'],
    		input: customInputs.search,
    		depth: 1
    	},
    	//],
    	//'sample': [
    	{
    		...attributesTemplates.text_id,
    		optgroup: 'sample',
    		field: 'sample',
    		id: 'sample_id'
    	}
    ],*/
    'PersonEMPOP': [//'person': [
    { ...attributesTemplates.text_id,
      optgroup: 'person',
      field: 'person',
      id: 'person_id',
      root: true,
      depth: 0,
      tooltip: langDict.tooltips.person_id
    }, // hmt //
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_relationship',
      depth: 1,
      relation: langDict.relations.has,
      relation_previous: langDict.optgroups.person,
      tooltip: langDict.tooltips.haplogroup_mt_relationship
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1,
      tooltip: langDict.tooltips.haplogroup_mt_name
    }, //'place': [
    { ...attributesTemplates.point_coords,
      optgroup: 'place',
      field: 'place',
      id: 'place_coordinates',
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.person,
      depth: 1,
      tooltip: langDict.tooltips.place_coordinates
    }, //'politregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'political_region',
      field: 'political_region',
      id: 'political_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.place,
      tooltip: langDict.tooltips.political_region_name
    }, //'geographicalregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'geographical_region',
      field: 'geographical_region',
      id: 'geographical_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.place,
      tooltip: langDict.tooltips.geographical_region_name
    }, //'culturalregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'cultural_region',
      field: 'cultural_region',
      id: 'cultural_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 2,
      relation: langDict.relations.in,
      relation_previous: langDict.optgroups.place,
      tooltip: langDict.tooltips.cultural_region_name
    } //],
    //'sample': [

    /*{
    	...attributesTemplates.text_id,
    	optgroup: 'sample',
    	field: 'sample',
    	id: 'sample_id',
    	relation: langDict.relations.of,
    	relation_direction: 'left',
    	relation_previous: langDict.optgroups.person,
    	depth: 1
    }*/
    ]
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/getLang.js
/* harmony default export */ function data_getLang() {
  var dict = {
    "en": {
      "tooltips": {
        "remains_id": "Identifier of remains of the ancient person",
        "past_population_name": "Name of the population to which the ancient person belonged",
        "genetical_sex_relationship": "A flag indicating whether a genetical sex of the ancient person has been determined",
        "genetical_sex_name": "Name of the sex of the ancient person",
        "haplogroup_y_relationship": "A flag indicating whether a Y chromosome haplogroup of the ancient person has been determined",
        "haplogroup_y_name": "Name of the Y chromosome haplogroup of the ancient person",
        "haplogroup_mt_relationship": "A flag indicating whether a mitochondrial chromosome haplogroup of the ancient person has been determined",
        "haplogroup_mt_name": "Name of the mitochondrial chromosome haplogroup of the ancient person",
        "dating_time_period": "Dating of the ancient person's remains",
        "dating_time_period_length": "Dating span length of the ancient person's remains",
        "dating_type_name": "Method used to determine the remains' dating",
        "dating_culture_relationship": "A flag indicating whether the remains' dating overlaps with any archeological culture duration period",
        "dating_culture_name": "Name of an archeological culture, which duration period overlaps with the remains' dating",
        "use_phase_function_name": "Name of a function of the settlement phase, where and when the ancient person lived",
        "usephase_year": "Dating of the settlement phase, where and when the ancient person lived",
        "use_phase_period_length": "Dating span length of the settlement phase, where and when the ancient person lived",
        "use_phase_culture_relationship": "A flag indicating whether the dating of the settlement phase, where and when the ancient person lived, overlaps with any archeological culture duration period",
        "use_phase_from_culture_name": "Name of an archeological culture, which duration period overlaps with the settlement phase, where and when the ancient person lived",
        "use_phase_part_of_culture_relationship": "A flag indicating whether the settlement phase, where and when the ancient person lived, is archeologically determined to be a part of any known culture",
        "use_phase_part_of_culture_name": "Name of an archeological culture, which lasted during the settlement phase period, where and when the ancient person lived",
        "use_phase_part_of_period_relationship": "A flag indicating whether the settlement phase, where and when the ancient person lived, is archeologically determined to be a part of any archeological period",
        "use_phase_part_of_period_name": "Name of an archeological period, which lasted during the settlement phase period, where and when the ancient person lived",
        "archaeological_site_name": "Name of an archeological site where ancient person was burried or died",
        "archaeological_site_coordinates": "Spatial coordinates of an archeological site where ancient person was burried or died",
        "political_region_name": "Name of a contemporary political region, which overlaps or does not overlap with archeological site's position",
        "geographical_region_name": "Name of a contemporary political region, which overlaps or does not overlap with archeological site's position",
        "cultural_region_relationship": "A flag indicating whether the position of the archeological site overlaps with any known archeological culture region",
        "cultural_region_name": "Name of a region of an archeological culture, which overlaps or does not overlap with archeological site's position",
        "sample_id": "Identifier of a sample taken from the ancient person remains",
        "result_admixture_relationship": "",
        "result_admixture_component": "",
        "result_umap_relationship": "",
        "result_umap_component": "",
        "result_pca_relationship": "",
        "result_pca_component": "",
        "source_name": "Name of a source in which information about the sample was officaly published",
        "source_date": "Publication date of a source in which information about the sample was officaly published",
        "source_author_name": "Name of a co-author of the data source or publication",
        "person_id": "Identifier of the contemporary person",
        "present_population_name": "Name of the population to which the contemporary person belong",
        "place_name": "Name of a sampling place where contemporary person live"
      },
      "optgroups": {
        "person": "Person",
        "remains": "Remains",
        "genetical_sex": "Genetical sex",
        "use_phase_part_of_period": "Archeological period",
        "archaeological_site": "Archeological site",
        "place": "Place of sampling",
        "use_phase": "Settlement phase",
        "sample": "Sample",
        "haplogroup_mt": "Haplogroup Mt",
        "haplogroup_y": "Haplogroup Y",
        "political_region": "Political region",
        "geographical_region": "Geographical region",
        "cultural_region": "Archeological culture region",
        "dating": "Dating",
        "dating_type": "Dating type",
        "source": "Source",
        "source_author": "Author",
        "dating_culture": "Archeological culture",
        "use_phase_from_culture": "Archeological culture",
        "use_phase_part_of_culture": "Archeological culture",
        "result_admixture": "Admixture results",
        "result_admixture_type": "Admixture analysis type",
        "result_pca": "PCA results",
        "result_pca_type": "PCA analysis type",
        "result_umap": "UMAP results",
        "result_umap_type": "UMAP analysis type",
        "present_population": "Population",
        "past_population": "Population"
      },
      "operators": {
        "inrange": "is in range of",
        "part_of": "is part of",
        "not_part_of": "is not part of",
        "distance__less": "distance to point is less than",
        "distance__less_or_equal": "distance to point is less or equal to",
        "distance__greater": "distance to point is greater than",
        "distance__greater_or_equal": "distance to point is greater or equal to",
        "timepoint__less": "is less than",
        "timepoint__less_or_equal": "is less or equal than",
        "timepoint__greater": "is greater than",
        "timepoint__greater_or_equal": "is greater or equal than",
        "timepoint__equal": "is equal to",
        "timepoint__not_equal": "is not equal to",
        "boolean_does": "does"
      },
      "operator_optgroups": {
        "date_interval": "Time period",
        "date_timepoint": "Time point"
      },
      "values": {
        "boolean": ["true", "false"],
        "relation_operator": [{
          "value": "some",
          "label": "some"
        }, {
          "value": "none",
          "label": "none"
        }, {
          "value": "every",
          "label": "every"
        }],
        "relation_existence": [{
          "value": true,
          "label": "exist"
        }, {
          "value": false,
          "label": "not exist"
        }]
      },
      "errors": {
        "min_max_length_exceeds": "Length of inputed value exceeds permitable length of {0} to {1} characters.",
        "min_max_number_order": "Second value should be greater than the first one",
        "min_max_number_exceeds": "Inputted value exceeds permitable value range of {0} to {1}.",
        "coordinates_empty": "All values must be provided",
        "coordinates_lat": "Latitude should have value between -90 and 90",
        "coordinates_long": "Longitude should have value between -180 and 180",
        "coordinates_dist": "Distance must be defined in range 0-1000000",
        "tree_not_selected": "You must select an item from the search results"
      },
      "attributes": {
        "date": "Time period",
        "period_length": "Period length",
        "name": "Name",
        "id": "ID",
        "age": "Age",
        "type": "Type",
        "coordinates": "Coordinates",
        "function": "Function",
        "level": "Level",
        "source_name": "Title",
        "source_author": "Author",
        "source_date": "Publication date",
        "component": "Component"
      },
      "placeholders": {
        "select": "&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;--- choose a filter ---&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;",
        "search": "Search for an attribute...",
        "default": "Type in attribute value..."
      },
      "others": {
        "relation_exists": "does <span class='badge badge-secondary'>relationship</span> exist?"
      },
      "relations": {
        "from": "FROM",
        "from_time": "FROM TIME",
        "has": "HAS",
        "in": "IN",
        "is": "IS",
        "of": "OF",
        "part_of": "PART OF",
        "published_in": "PUBLISHED IN"
      }
    },
    "pl": {
      "optgroups": {
        "person": "Osoba",
        "remains": "Szczątki",
        "genetical_sex": "Płeć genetyczna",
        "use_phase_part_of_period": "Epoka archeologiczna",
        "archaeological_site": "Stanowisko archeologiczne",
        "place": "Miejsce próbkowania",
        "use_phase": "Faza użytkowania",
        "sample": "Próbka",
        "haplogroup_mt": "Haplogrupa Mt",
        "haplogroup_y": "Haplogrupa Y",
        "political_region": "Region polityczny",
        "geographical_region": "Region geograficzny",
        "cultural_region": "Region kultury archeologicznej",
        "dating": "Datowanie",
        "source": "Źródło",
        "source_author": "Autor",
        "dating_type": "Metoda datowania",
        "dating_culture": "Kultura archeologiczna",
        "use_phase_from_culture": "Kultura archeologiczna",
        "use_phase_part_of_culture": "Kultura archeologiczna",
        "result_admixture": "Wyniki analizy admiksji",
        "present_population": "Populacja",
        "past_population": "Populacja"
      },
      "operator_optgroups": {
        "date_interval": "Przedział czasu",
        "date_timepoint": "Punkt czasowy"
      },
      "operators": {
        "inrange": "jest w zasięgu",
        "part_of": "należy do",
        "not_part_of": "nie należy do",
        "distance__less": "distance to point is less than",
        "distance__less_or_equal": "distance to point is less or equal to",
        "distance__greater": "distance from point is greater than",
        "distance__greater_or_equal": "distance from point is greater or equal to",
        "boolean_does": ""
      },
      "values": {
        "boolean": ["prawda", "fałsz"],
        "some": "co najmniej jeden",
        "none": "żaden",
        "every": "każdy",
        "exist": "istnieje",
        "not_exist": "nie istnieje"
      },
      "errors": {
        "min_max_length_exceeds": "Length of inputted value exceeds permitable length of {0} to {1} characters.",
        "min_max_number_order": "Second value should be greater than the first one",
        "min_max_number_exceeds": "Inputted value exceeds permitable value range of {0} to {1}.",
        "coordinates_lat": "Latitude should have value between -90 and 90",
        "coordinates_long": "Longitude should have value between -180 and 180",
        "coordinates_dist": "Distance must be defined in range 0-1000000",
        "tree_not_selected": "You must select an item from the search results"
      },
      "placeholders": {
        "select": "--- nie wybrano ---",
        "search": "Szukaj atrybutu {0}...",
        "default": "Podaj wartość atrybutu {0}..."
      },
      "attributes": {
        "dating": "Przedział czasu",
        "period_length": "Szerokość przedziału",
        "name": "Nazwa",
        "id": "ID",
        "age": "Wiek",
        "division": "Jednostka administracyjna",
        "type": "Rodzaj",
        "coordinates": "Współrzędne",
        "function": "Funkcja",
        "level": "Poziom",
        "source_name": "Tytuł",
        "source_author": "Autor",
        "source_date": "Data publikacji",
        "component": "Składowa"
      },
      "others": {
        "relation_exists": "<span class='badge badge-secondary'>relacja</span>"
      },
      "relations": {
        "from": "JEST Z",
        "from_time": "POCHODZI Z",
        "has": "MA",
        "in": "W",
        "is": "JEST",
        "of": "Z",
        "part_of": "JEST CZĘŚCIĄ",
        "published_in": "OPUBLIKOWANY W"
      }
    }
  };
  /* For all languages ... */

  for (var lang in dict) {
    var suffix = "<span class='badge badge-primary'>attribute</span>&nbsp;";
    var prefix = "";
    /* Apply attributes badges */

    ArcheoUtilities.traverseObj(dict[lang].attributes, (obj, key, val) => {
      obj[key] = typeof val === 'string' ? suffix + val + prefix : val;
    });
    suffix = "<span class='badge badge-success'>entity</span>&nbsp;";
    prefix = "";
    /* Apply optgroups badges */

    /*ArcheoUtilities.traverseObj(
    	dict[lang].optgroups, 
    	(obj, key, val) => { obj[key] = typeof(val) === 'string' ? suffix + val + prefix : val; }
    	);*/
  }

  return dict;
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/script.js
//import queryBuilder from 'jQuery-QueryBuilder/dist/js/query-builder';
// ol/Map
 //import 'jQuery-QueryBuilder/src/main';
//import 'jQuery-QueryBuilder/src';

 //registerBuilderModule($); // Initialize it global jQuery







function createQueryBuilder(builderEl, lang, datasetInfo) {
  /*
  datasetName: datasetName,
  datasetId: datasetId,
  entity: entity
  */
  const langDict = data_getLang()[lang];
  const datasetFilters = getDatasetFilters(langDict);
  builderEl.queryBuilder({
    plugins: {
      //'bt-tooltip-errors',
      //'bt-tooltip-errors': { delay: 10 },
      'bt-selectpicker': {
        liveSearch: true,
        liveSearchNormalize: true,
        style: 'btn-inverse btn-xs'
      } //'not-group',
      //'unique-filter',
      //'filter-description',
      //'sortable'

    },
    operators: [...customOperators, 'equal', 'not_equal', 'contains', 'not_contains', 'less', 'less_or_equal', 'in', 'not_in', 'greater', 'greater_or_equal', 'begins_with', 'not_begins_with'],
    filters: datasetFilters[datasetInfo.datasetId],
    optgroups: { ...langDict.operator_optgroups,
      ...langDict.optgroups
    },
    //rules: rules,
    lang_code: lang,
    default_condition: 'AND',
    display_errors: true,
    allow_empty: false,
    allow_groups: 4,
    select_placeholder: langDict.placeholders.select,
    lang: langDict,
    templates: customTemplates()
  });
  builderEl.attr('entity', datasetInfo.entity);
  initializeQueryBuilderEvents(builderEl, lang);
}


/*
$('#btn-reset').on('click', function() {
    queryBuilder('reset');
});

$('#btn-set').on('click', function() {
    queryBuilder('setRules', rules_widgets);
});

$('#btn-get').on('click', function() {
    var result = queryBuilder('getRules');
    if (!$.isEmptyObject(result)) {
    }
});
*/
;// CONCATENATED MODULE: ./views/pages/map/js/elements/left-sidebar/query-builder.js


function initializeQueryBuilder() {
  $('#query-builder').on('selected-dataset-update', function (event, datasetInfo) {
    let $builderEl = $(event.target);
    if (ArcheoUtilities.isValid($builderEl.queryBuilder)) $builderEl.queryBuilder('destroy');
    createQueryBuilder($builderEl, lang, datasetInfo);
  });
}

/* harmony default export */ const left_sidebar_query_builder = (initializeQueryBuilder);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/left-sidebar/index.js




function initializeLeftSidebarElements() {
  sessions_container();
  left_sidebar_query_builder();
  datasets_container();
}

/* harmony default export */ const elements_left_sidebar = (initializeLeftSidebarElements);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/modal.js
function initializeFeaturesModals() {
  $("#gradient-modal").dialog({
    appendTo: "#map-wrapper",
    autoOpen: false,
    show: {
      effect: "fade",
      duration: 500
    },
    hide: {
      effect: "fade",
      duration: 500
    },
    position: {
      my: "left top",
      at: "left top",
      of: $('#legend-layers')
    },
    draggable: false,
    resizable: false
  });
  $("#pattern-modal").dialog({
    appendTo: "#map-wrapper",
    autoOpen: false,
    show: {
      effect: "fade",
      duration: 500
    },
    hide: {
      effect: "fade",
      duration: 500
    },
    position: {
      my: "left top",
      at: "left top",
      of: $('#legend-regions')
    },
    draggable: false,
    resizable: false
  });
  /*$(".map-modal-content").mCustomScrollbar({
      theme: "minimal-dark",
      scrollbarPosition: "outside",
      scrollInertia: 100
  });*/
}

function intitializeOptionsModals() {
  let $photoDPI = $('#photo-modal #photo-dpi');
  $photoDPI.spinner({
    culture: window.getLang(),
    min: 96,
    max: 1000,
    numberFormat: "n",
    step: 1
  });
  $photoDPI.spinner("value", 96);
}

function initializeModals() {
  initializeFeaturesModals();
  intitializeOptionsModals();
}

/* harmony default export */ const modal = (initializeModals);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/legend.js



function initializeLayerColorpicker() {
  var $picker = $('#legend-layer-color-picker');
  /* Initialize attribute color picker */

  ArcheoUI.initializeColorInput($picker, {
    palette: 'layer',
    appendTo: "#map-wrapper",
    containerClassName: 'legend-layer-color-picker'
  }, null, function (event, color) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let rgbColor = color.toRgbString();
      let layerId = $symbol.layerId;
      let layerType = $symbol.layerType;
      if (layerType !== 'heatmap') ArcheoEvents.broadcast('layer-color-change', null, {
        layerId: layerId,
        value: rgbColor
      });
      /* Modify legend entry */
      //ArcheoSession.get().legend.layers[ layerId ]...;

      /* Update all data appearance */
      //ArcheoMap.triggerLayerStyleFunction();
    }
  }, ['move', 'change']);
  $picker.on(`dragstop.spectrum change.spectrum`, function () {
    setTimeout(() => {
      ArcheoMap.triggerLayerStyleFunction();
    }, 50);
  });
  let $gradient = $('#legend-layer-gradient');
  let gradientObj = ArcheoUI.initializeGradientInput($gradient, "#map-wrapper");
  $gradient.prop('grapick', gradientObj); //$('#legend-layer-gradient-wrapper').prependTo('.legend-layer-color-picker');
}

function initializeAttributeColorpicker() {
  var $picker = $('#legend-attribute-color-picker');
  /* Initialize attribute color picker */

  ArcheoUI.initializeColorInput($picker, {
    palette: 'default',
    appendTo: "#map-wrapper"
  }, null, function (event, color) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');

    if (ArcheoUtilities.isValid($symbol)) {
      let rgbColor = color.toRgbString();
      let attributeValue = $symbol.attributeValue;
      let attributeName = $symbol.attributeName;
      /* Modify legend entry */

      let legend = ArcheoSession.get().legend.attributes;
      let legendEntry = legend[attributeValue] || legend[attributeName][attributeValue];
      legendEntry.color = rgbColor;
      /* Update all data appearance */

      ArcheoMap.triggerLayerStyleFunction();
    }
  });
  $picker.on(`dragstop.spectrum`, function () {
    setTimeout(() => {
      ArcheoMap.triggerLayerStyleFunction();
    }, 50);
  });
}

function initializeRegionColorpicker() {
  /* Initialize background color picker */
  var $backgroundPicker = $('#legend-region-background-color-picker');
  ArcheoUI.initializeColorInput($backgroundPicker, {
    appendTo: "#map-wrapper",
    palette: 'default',
    containerClassName: 'legend-region-background-color-picker'
  }, null, function (event, color) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');
    let rgbColor = color.toRgbString();

    if (ArcheoUtilities.isValid($symbol)) {
      let regionName = $symbol.regionName; // siblings('.legend-text').text();

      let regionType = $symbol.regionType; // parents('.region-legend').attr('region-type');

      /* Change legend entry property value */

      ArcheoSession.get().legend.regions[regionType][regionName].color.background = rgbColor;
      /* Set buttons colors */

      $('#region-background-color-butt').find('.color').css('background-color', rgbColor); // Update all data appearance //

      ArcheoMap.triggerLayerStyleFunction();
    }
  });
  $backgroundPicker.on(`dragstop.spectrum`, function () {
    setTimeout(() => {
      ArcheoMap.triggerLayerStyleFunction();
    }, 50);
  });
  /* Initialize pattern color picker */

  var $patternPicker = $('#legend-region-pattern-color-picker');
  ArcheoUI.initializeColorInput($patternPicker, {
    appendTo: "#map-wrapper",
    palette: 'default',
    containerClassName: 'legend-region-pattern-color-picker'
  }, null, function (event, color) {
    let $symbol = ArcheoCache.getTemporaryEntry('$symbol');
    let rgbColor = color.toRgbString();

    if (ArcheoUtilities.isValid($symbol)) {
      let regionName = $symbol.regionName; // siblings('.legend-text').text();

      let regionType = $symbol.regionType; // parents('.region-legend').attr('region-type');

      /* Change legend entry property value */

      ArcheoSession.get().legend.regions[regionType][regionName].color.pattern = rgbColor;
      /* Set buttons colors */

      $('#region-pattern-color-butt').find('.color').css('background-color', rgbColor); // Update all data appearance //

      ArcheoMap.triggerLayerStyleFunction();
    }
  });
  $patternPicker.on(`dragstop.spectrum`, function () {
    setTimeout(() => {
      ArcheoMap.triggerLayerStyleFunction();
    }, 50);
  });
  /* Move controls */
  //$('#legend-region-color-settings').prependTo('.region-color-picker').removeClass('d-none');

  let $patternSelect = $('#legend-select-pattern-type');
  $patternSelect.selectpicker();
  let $scaleSlider = $('#legend-pattern-scale');
  ArcheoUI.initializeSlider($scaleSlider, {
    min: 0.1,
    max: 4,
    from: 1,
    step: 0.1,
    type: 'single' //postfix: 'px',
    //drag_interval: true,
    //...params

  });
  let $spacingSlider = $('#legend-pattern-spacing');
  ArcheoUI.initializeSlider($spacingSlider, {
    min: 5,
    max: 50,
    from: 18,
    step: 1,
    type: 'single' //postfix: 'px',
    //drag_interval: true,
    //...params

  });
  let $anglepicker = $('#pattern-anglepicker');
  $anglepicker.anglePicker({
    flat: true,
    value: 0 // !
    ,
    enableCenter: true,
    centerSize: 20,
    size: 75,
    handleSize: 15,
    handleType: "default",
    snap: 1,
    showValue: true,
    start: -90,
    showValueAlwaysEnabled: true
  });
}

function initializeMapLegend() {
  ArcheoLegend.initialize(attributes_namespaceObject, attributesTypes_namespaceObject);
  initializeLayerColorpicker();
  initializeAttributeColorpicker();
  initializeRegionColorpicker();
}

/* harmony default export */ const elements_legend = (initializeMapLegend);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/guide.js
const guidePromptButton = {
  text: 'Don\'t show again',
  className: 'palette-primary ml-0',
  click: function (anno) {
    localStorage.setItem('mapGuideHide', "true");
    anno.hide();
  }
};
const nextButton = {
  text: 'Next',
  className: 'palette-primary-outline ml-auto',
  click: function (anno) {
    anno.switchToChainNext();
  }
};
const finishButton = {
  text: 'Finish',
  className: 'palette-primary highlit ml-auto big-border',
  click: function (anno) {
    anno.hide();
  }
};
const backButton = {
  text: 'Back',
  className: 'palette-primary-outline',
  click: function (anno, evt) {
    anno.switchToChainPrev();
  }
};
const middleButtonsTemplate = [backButton, nextButton];

function toggleAccordions($el = null, toggle = null) {
  let $accordions = $el;
  if ($el === null) $accordions = $('.accordion-header');
  $accordions.each(function () {
    let isCollapsed = $(this).hasClass('collapsed');
    if (toggle == true && isCollapsed) $(this).trigger("click");else if (toggle == false && !isCollapsed) $(this).trigger("click");else if (toggle == null) $(this).trigger("click");
  });
}

function toggleSidebar($sidebar, toggle = null) {
  let isSideBarActive = $sidebar.find(".sidebar-trigger > .toggle-arrow").hasClass("active");
  if (toggle == true && isSideBarActive) $sidebar.find(".sidebar-trigger").trigger('click');else if (toggle == false && !isSideBarActive) $sidebar.find(".sidebar-trigger").trigger('click');else if (toggle == null) $sidebar.find(".sidebar-trigger").trigger('click');
}

function resetView() {
  toggleSidebar($("#left-sidebar"), false);
  toggleSidebar($("#right-sidebar"), false);
  toggleAccordions(null, false);
}

function initializeGuide() {
  let guidePages = [{
    target: '#top-controls-wrapper',
    content: 'Welcome to our interactive map application guide.<br><br>Here you will be briefly introduced to the structure of the interface and main functionalities of the map application.',
    position: 'center',
    buttons: [guidePromptButton, nextButton],
    onShow: function (anno, $target, $annoElem) {
      resetView();
    }
  }, {
    target: '#top-controls-wrapper',
    content: 'The interactive map application is divided into several parts. It\'s main feature is the map itself.</br>It\'s fully interactable: apart from panning and zooming you can move around objects within it such as charts presenting attributes of the samples and pop-up modals showing more detailed information. <br>You can also double-click or shift-select and double-click the charts to view details about the presented samples.',
    //position: 'center',
    position: {
      bottom: '20%',
      left: '5%'
    },
    buttons: [backButton, nextButton],
    showOverlay: function () {},
    onShow: function (anno, $target, $annoElem) {
      resetView();
    }
  }, {
    showOverlay: function () {},
    target: '#time-controls-wrapper',
    content: 'One of the application\'s key features is the filtering of samples by their dating time. Use the "filter" timeline slider to adjust filtered time interval. Use the "range" slider to limit the filter to specific time period for better filtering precision. Use "Present <i class="material-icons">hourglass_empty</i>" button to show or hide contemporary samples on the map.',
    position: 'center-top',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleAccordions($("#legend-header"), false);
    }
  }, {
    target: '#legend-wrapper',
    content: 'The dynamic map legend shows list of currently visible map layers, data attributes and regions with their style symbols. You can change the styling of a given attribute, layer or region by clicking it\'s style symbol and adjusting settings in the popped up editor.',
    position: 'left',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleAccordions($("#legend-header"), true);
    },
    onHide: function (anno, $target, $annoElem) {}
  }, {
    target: '#map-options-menu-wrapper',
    content: 'This drop-down menu is a quick toolbox of handful map utilities.<br>Here you can change a type of the map and adjust it\'s appearance, you can show or hide map\'s features to improve it\'s readability or finally you can toggle fullscreen to prepare it for a presentation or export current map view to an image.',
    position: 'right',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleAccordions($("#legend-header"), false);
      toggleSidebar($("#left-sidebar"), false);
    }
  }, {
    target: '#left-sidebar',
    content: 'This is a data management side panel. It contains options regarding input data to the Human AGEs web server including session files, user datasets and queries to our archeogenomic graph database.',
    position: 'center-right',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#left-sidebar"), true);
      toggleAccordions($("#session-section > .accordion-header"), false);
    }
  }, {
    target: '#left-sidebar',
    content: 'The session contains information about current state of the application including imported datasets, created layers, map view and data appearance. Simply said, it is a snapshot of your work. You can create your own sessions and download them to get a backup of your progress, which you can later restore. You can also share it with others.',
    position: 'center-right',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#left-sidebar"), true);
      $("#left-sidebar").removeClass("anno-target-decoration");
      $("#left-sidebar .sidebar").mCustomScrollbar("scrollTo", "#session-section");
      $("#session-section").addClass("anno-target-decoration");
      setTimeout(() => {
        toggleAccordions($("#session-section > .accordion-header"), true);
      }, 200);
      toggleAccordions($("#user-data-section > .accordion-header"), false);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#session-section").removeClass("anno-target-decoration");
    }
  }, {
    target: '#left-sidebar',
    content: 'This section provides a possibility to load user-created archeogenomic dataset formatted as either JSON or CSV file. Details concerning the file\'s content were described <a href="http://localhost:8000/en/faq?id=question0#question0">here</a>.',
    position: 'center-right',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#left-sidebar"), true);
      $("#left-sidebar").removeClass("anno-target-decoration");
      $("#user-data-section").addClass("anno-target-decoration");
      $("#left-sidebar .sidebar").mCustomScrollbar("scrollTo", "#user-data-section");
      toggleAccordions($("#session-section > .accordion-header"), false);
      toggleAccordions($("#queries-section > .accordion-header"), false);
      setTimeout(() => {
        toggleAccordions($("#user-data-section > .accordion-header"), true);
      }, 200);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#user-data-section").removeClass("anno-target-decoration");
    }
  }, {
    target: '#left-sidebar',
    content: 'Here you can import a dataset from one of genomic data sources that are integrated into our database. You can limit the dataset content by providing a set of filters. In the end a query is generated - you can use it to import the desired data. You can also share the query with others or place it in a publication.',
    position: 'center-right',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#left-sidebar"), true);
      $("#left-sidebar").removeClass("anno-target-decoration");
      $("#queries-section").addClass("anno-target-decoration");
      $("#left-sidebar .sidebar").mCustomScrollbar("scrollTo", "#queries-section");
      toggleAccordions($("#user-data-section > .accordion-header"), false);
      toggleAccordions($("#datasets-section > .accordion-header"), false);
      setTimeout(() => {
        toggleAccordions($("#queries-section > .accordion-header"), true);
      }, 200);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#queries-section").removeClass("anno-target-decoration");
    }
  }, {
    target: '#left-sidebar',
    content: 'This is a list of all imported datasets. By clicking on a dataset\'s name you can view it\'s details and additional sampling options. Click an icon <i class="material-icons">file_download</i> to download the dataset.<br><br><b>Because many map functionalities operates on datasets content, before using them make sure you have first imported all datasets you want to work on.</b> Otherwise, some changes you have already made may not apply to the newly imported datasets.',
    position: 'center-right',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#left-sidebar"), true);
      toggleSidebar($("#right-sidebar"), false);
      $("#left-sidebar").removeClass("anno-target-decoration");
      $("#left-sidebar .sidebar").mCustomScrollbar("scrollTo", "#datasets-section");
      $("#datasets-section").addClass("anno-target-decoration");
      setTimeout(() => {
        toggleAccordions($("#datasets-section > .accordion-header"), true);
      }, 200);
      toggleAccordions($("#queries-section > .accordion-header"), false);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#datasets-section").removeClass("anno-target-decoration");
      toggleSidebar($("#left-sidebar"), false);
    }
  }, {
    target: '#right-sidebar',
    content: 'This is map management panel. It contains options regarding appearance of the map and objects within it.',
    position: 'center-left',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#right-sidebar"), true);
      toggleAccordions($("#queries-section > .accordion-header"), false);
      toggleAccordions($("#grouping-section > .accordion-header"), false);
    }
  }, {
    target: '#right-sidebar',
    content: 'Grouping helps to capture general regional changes happening over longer periods of time. You can perform grouping by samples\' position on the map and samples\' values of presented attribute at the same time. <br><b>Grouping is applied to all currently imported datasets and must be repeated on new ones.</b>',
    position: 'center-left',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#right-sidebar"), true);
      $("#right-sidebar").removeClass("anno-target-decoration");
      $("#right-sidebar .sidebar").mCustomScrollbar("scrollTo", "#grouping-section");
      $("#grouping-section").addClass("anno-target-decoration");
      setTimeout(() => {
        toggleAccordions($("#grouping-section > .accordion-header"), true);
      }, 200);
      toggleAccordions($("#filtering-section > .accordion-header"), false);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#grouping-section").removeClass("anno-target-decoration");
    }
  }, {
    target: '#right-sidebar',
    content: 'Filtering helps to focus on particular aspect of a large dataset. You can filter samples by time, values of their attributes or by a region if they are grouped in any. Effects of all active filters are combined - for example you can filter samples by many of their attributes simultaneously. To toggle certain filter type, click on <i class="material-icons">check_box</i> icon. <br><b>Filtering is applied to all currently imported datasets and must be repeated on new ones.</b>',
    position: 'center-left',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#right-sidebar"), true);
      $("#right-sidebar").removeClass("anno-target-decoration");
      $("#right-sidebar .sidebar").mCustomScrollbar("scrollTo", "#filtering-section");
      $("#filtering-section").addClass("anno-target-decoration");
      toggleAccordions($("#grouping-section > .accordion-header"), false);
      toggleAccordions($("#layers-section > .accordion-header"), false);
      setTimeout(() => {
        toggleAccordions($("#filtering-section > .accordion-header"), true);
      }, 200);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#filtering-section").removeClass("anno-target-decoration");
    }
  }, {
    target: '#right-sidebar',
    content: 'This is a list of all created layers. By clicking on a layer\'s name you can view and change it\'s appearance options. To present several sample attributes using the same styling, you can use the "Clone layer <i class="material-icons">layers</i>" feature and change the displayed attribute for each of cloned layers. You can also click an icon <i class="material-icons">visibility</i> to toggle layer\'s visibility.',
    position: 'center-left',
    buttons: middleButtonsTemplate,
    onShow: function (anno, $target, $annoElem) {
      toggleSidebar($("#right-sidebar"), true);
      $("#right-sidebar").removeClass("anno-target-decoration");
      $("#right-sidebar .sidebar").mCustomScrollbar("scrollTo", "#layers-section");
      $("#layers-section").addClass("anno-target-decoration");
      toggleAccordions($("#filtering-section > .accordion-header"), false);
      setTimeout(() => {
        toggleAccordions($("#layers-section > .accordion-header"), true);
      }, 200);
    },
    onHide: function (anno, $target, $annoElem) {
      $("#layers-section").removeClass("anno-target-decoration");
    }
  }, {
    target: '#top-controls-wrapper',
    content: 'That\'s the end of our short course.<br>As a next step, we advise you to visit our <a href="">examples gallery</a> to explore different use cases and potential of the interactive map application.<br><br>Finally, we would like to thank you for your visit and we hope you\'ll enjoy your stay!<br><i class="mt-3 d-block text-right">&mdash;Human AGEs Team</i>',
    position: 'center',
    buttons: [backButton, finishButton],
    onShow: function (anno, $target, $annoElem) {
      $("#guide-prompt").addClass('hidden');
      localStorage.setItem('mapGuidePromptHide', "true");
      resetView();
    }
  }];
  guidePages.forEach((el, index) => {
    el.paging = `${index + 1}/${guidePages.length}`;
  });
  window.guideObj = new Anno(guidePages);
}


;// CONCATENATED MODULE: ./views/pages/map/js/elements/tooltips.js
function tooltips_initializeTooltips() {
  $('.archeo-tooltip').each(function () {
    let tooltipId = $(this).attr('tooltip-id');
    let text = window.dictionary.tooltips[tooltipId];
    tippy(this, {
      //placement: $(this).attr('data-placement') || 'top',
      content: text,
      interactive: true,
      appendTo: () => document.body
    });
  });
  /* Disable tooltips for selects */

  let $dropdownButt = $('.dropdown-toggle');
  $dropdownButt.tooltip();
  $dropdownButt.tooltip('disable');
}

/* harmony default export */ const tooltips = (tooltips_initializeTooltips);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/toolbox.js
function initializeColorInputs() {
  /* Body Color */
  var $layerColorInputs = $('.basemap-layers-visibility .basemap-layer-color');
  $layerColorInputs.each(function () {
    ArcheoUI.initializeColorInput($(this), {
      appendTo: "#map-wrapper",
      color: "#fff",
      palette: 'default'
    });
  });
}

function initializeToolboxElements() {
  initializeColorInputs();
}

/* harmony default export */ const elements_toolbox = (initializeToolboxElements);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/index.js












function initializePageElements() {
  new Promise((resolution, rejection) => {
    elements_map();
    elements_legend();
    initializeTimeline('#timeline');
    initializeTimelineRange('#timeline-range');
    sidebars();
    present_switch();
    elements_left_sidebar();
    elements_right_sidebar();
    ArcheoUI.initializeYearTexts();
    modal();
    initializeGuide();
    tooltips();
    elements_toolbox();
    resolution(true);
  });
}

/* harmony default export */ const js_elements = (initializePageElements);
;// CONCATENATED MODULE: ./views/pages/map/js/session/data/lang_defaults.js
/* harmony default export */ const lang_defaults = ({
  "en": {
    "_meta": {
      "name": "Default",
      "description": "This is a default session of the interactive map application.",
      "lang": "en",
      "creationDate": "Fri Jan 14 2022 14:00:45 GMT+0100 (Central European Standard Time)",
      "editDate": "Fri Jan 14 2022 22:00:45 GMT+0100 (Central European Standard Time)"
    },
    "layers": {
      "_order": [],
      "_counter": 0
    },
    "datasets": {
      "_order": [],
      "_counter": 0
    },
    "clustering": {
      "features": {
        "range": 1000,
        "distance": 0,
        "useCentroids": true,
        "showRegions": true,
        "labelPosition": "cluster",
        "method": {
          "distance": null,
          "region": null
        }
      },
      "attributes": {}
    },
    "filters": {
      "timeline": {
        "isActive": true,
        "yearFrom": -33000,
        "yearTo": -27000,
        "minYear": window.metadata.TimePeriod.minYear,
        "maxYear": window.metadata.TimePeriod.maxYear,
        "showPresent": true,
        "eventOnFinish": false,
        "doFilterRegions": true,
        "showPropability": true
      },
      "attributes": {
        "isActive": true,
        "available": [],
        "configs": {}
      },
      "regions": {
        "isActive": true
      }
    },
    "legend": {
      "attributes": {
        "OTHER": {
          "color": "rgba(126,126,126,1.0)",
          "name": "OTHER",
          "filtered": false,
          "group": null
        },
        "MISSING": {
          "color": "rgba(0,0,0,1.0)",
          "name": "MISSING",
          "filtered": true,
          "group": null
        }
      },
      "regions": {
        "DEFAULT": {
          "name": "Region",
          "color": {
            "background": "rgba(197, 209, 220, 0.3)",
            "stroke": "rgba(38, 83, 122, 1.0)"
          }
        }
      }
    },
    "map": {
      "position": [19.657016, 52.205848],
      "zoom": 4,
      "dataProjection": "EPSG:4326",
      "mapProjection": "EPSG:3857",
      "baseLayers": {},
      "options": {
        "basemap": {
          "name": "Light",
          "appearance": {
            "visible_layers": {
              "basemap-light-water": true,
              "basemap-light-boundaries": true,
              "basemap-light-labels": false
            },
            "colors": {
              "map-background": "#fff",
              "basemap-light-water": "rgb(204, 204, 204)",
              "basemap-light-boundaries": "rgb(153, 153, 153)",
              "basemap-light-labels": "#000"
            }
          }
        },
        "features": {
          "visible": {
            "timeline": true,
            "controls": true,
            "legend": true,
            "scale": true,
            "title": false
          },
          "appearance": {
            "map-title": "Map title",
            "map-subtitle": "Map subtitle"
          }
        }
      }
    }
  }
});
;// CONCATENATED MODULE: ./views/pages/map/js/session/data/layer_default.js
/* harmony default export */ const layer_default = ({
  /* Source oprtions, need to reassign them */
  //"entityType": "",	
  //"iconUrl": "",
  "positionOffsetRatio": 3.0,
  "positionOffsetRelativeToggle": true,
  "displayLabelProperty": true,

  /* Point-based representations settings */
  "cardinalityByValue": true,
  "cardinalityBySize": true,
  "cardinalityByColor": false,

  /* Size settings */
  "size": [16, 40],
  "fontSizeRatio": 1.0,

  /* Weight settings */
  "weightGrowth": "linear",
  // ["linear", "polynomial", exponential]
  "weightGrowthFactor": 1.0,
  "weightScalingFactor": 1.0,
  "standardisationMethod": "max",
  // ["none", "total", "max"]
  "valueDisplay": "count",
  // ["count", "weight"]
  "blur": 100,
  "radius": 100,
  "drawingAlpha": 1.0,

  /* Blending modes */
  "blendingMode": "normal",
  "layerNameToggle": false,
  "color": '',
  "gradient": null,
  "colorToggle": true,
  "pointerToggle": true,
  "angle": '',

  /* Features visibility/filtering; Could be only for heatmap and points */
  "componentValues": {
    "special": {
      "MISSING": false,
      "OTHER": true
    },
    "data": "selectAll"
  },

  /* Piecharts/Tags settings */
  "piechartLabelsAppearance": "hover",
  "piechartLabelsShowPercent": false,
  "piechartLabelsShowCountData": true,
  "piechartLabelsSizeRatio": 1,
  "piechartLabelsOffsetRatio": 1,
  "otherRatio": 0.01,
  "otherCount": 0,
  "bodyToggle": true,

  /* Tags settings */
  "showFullStop": false,
  "padding": 7,
  "seed": 0.25,
  "outlineSizeRatio": 1,
  "backgroundSizeRatio": 1,
  "strategy": "archimedean"
});
;// CONCATENATED MODULE: ./views/pages/map/js/session/index.js



function registerSessionFunctions() {
  ArcheoSession.addDataset = function (objectId, databaseName, entityName, queryString) {
    let datasetsNumber = ArcheoSession.get().datasets._counter + 1 || 1;
    let datasetId = `${objectId}_${datasetsNumber}`;
    ArcheoSession.get().datasets[datasetId] = {
      name: databaseName.capitalize() + " #" + datasetsNumber,
      objectId: objectId,
      databaseName: databaseName,
      entityName: entityName,
      query: queryString,
      samplingRatio: 1,
      isCustom: false
    };

    ArcheoSession.get().datasets._order.push(datasetId);

    ArcheoSession.get().datasets._counter += 1;
    return datasetId;
  };

  ArcheoSession.addCustomDataset = function (fileName) {
    if (!ArcheoUtilities.isNumber(ArcheoSession.get().datasets._counter)) ArcheoSession.get().datasets._counter = 0;
    let datasetsNumber = ArcheoSession.get().datasets._counter + 1 || 1;
    let datasetId = `${fileName}_${datasetsNumber}`;
    ArcheoSession.get().datasets[datasetId] = {
      name: fileName.capitalize() + " #" + datasetsNumber,
      attributesDict: {},
      // Key (attribute name): value (attribute type)
      samplingRatio: 1,
      isCustom: true
    };

    ArcheoSession.get().datasets._order.push(datasetId);

    ArcheoSession.get().datasets._counter += 1;
    return datasetId;
  };

  ArcheoSession.removeDatasets = function (datasetId = null) {
    if (datasetId === null) {
      let datasetIds = ArcheoSession.get().datasets._order.clone();

      datasetIds.forEach(datasetId => {
        ArcheoSession.removeDatasets(datasetId);
      });
    } else {
      delete ArcheoSession.get().datasets[datasetId];

      ArcheoSession.get().datasets._order.removeEl(datasetId);
    }
  };

  ArcheoSession.getDefaultLayerStyle = function () {
    return ArcheoUtilities.deepCloneObject(layer_default);
  };

  ArcheoSession.addLayer = function (layerId = null) {
    var layerNumber = ArcheoSession.get().layers._counter + 1 || 1;
    var zIndex = ArcheoMap.getLayerZIndex(layerNumber);
    if (layerId === null) layerId = 'layer_' + layerNumber;
    ArcheoSession.get().layers[layerId] = {
      layerId: layerId,
      type: '',
      datasetId: '',
      attributeId: '',
      attributeName: '',
      attributeType: '',
      //attributeValue: '',
      style: ArcheoSession.getDefaultLayerStyle(),
      settings: {
        zIndex: zIndex,
        opacity: 1.0,
        visible: true,
        title: "Layer #" + layerNumber
      }
    };
    ArcheoCache.getTemporaryEntry('styleCache')[layerId] = {};
    ArcheoCache.getTemporaryEntry('canvasCache')[layerId] = {};
    ArcheoCache.getTemporaryEntry('featuresClusters')[layerId] = {};
    /* Create cache entry for layer clusters */

    ArcheoCache.setSessionEntry(layerId, {}, 'object'); // Since clusters are features as well, they could be parsed as geojson, excluding their features

    ArcheoSession.get().layers._order.push(layerId);

    ArcheoSession.get().layers._counter += 1;
    return layerId;
  };

  ArcheoSession.cloneLayer = function (layerId) {
    var clonedLayerConfig = ArcheoSession.get().layers[layerId];
    let layers = ArcheoSession.get().layers;
    var newLayerId = layerId + '_copy_' + layers._counter;
    layers[newLayerId] = ArcheoUtilities.deepCloneObject(clonedLayerConfig);
    layers[newLayerId].settings.title += ' (copy)';
    layers[newLayerId].layerId = newLayerId;
    ArcheoCache.getTemporaryEntry('styleCache')[newLayerId] = {};
    ArcheoCache.getTemporaryEntry('featuresClusters')[newLayerId] = {};
    ArcheoCache.setSessionEntry(newLayerId, {}, 'object');

    layers._order.push(newLayerId);

    layers._counter += 1;
    MapUtilities.broadcastLayerCreation(newLayerId);
    initializeLayer(newLayerId);
    return newLayerId;
  };

  ArcheoSession.removeLayers = function (layerId = null) {
    if (layerId === null) {
      let layerIds = ArcheoSession.get().layers._order.clone();

      layerIds.forEach(layerId => {
        ArcheoSession.removeLayers(layerId);
      });
    } else {
      delete ArcheoSession.get().layers[layerId];

      ArcheoSession.get().layers._order.removeEl(layerId);
    }
  };

  ArcheoSession.getAttributeLegend = function (attributeId, getOnlyAttributes = false, includeGroupingInfo = false, ignoreSpecialAttributes = false) {
    let legend = ArcheoSession.get().legend.attributes;
    let attributesNames = Object.keys(ArcheoCache.getAttributeCache(attributeId));
    if (!(attributeId in legend)) legend[attributeId] = {
      '_groups': []
    };
    legend = legend[attributeId];
    let attributesLegend = {};

    if (getOnlyAttributes) {
      for (let i = 0; i < attributesNames.length; ++i) {
        let attributeName = attributesNames[i];
        let entryName = attributeName;
        /* Ignore special attributes */

        if (ArcheoUtilities.isValid(legend[attributeName])) {
          if (!ArcheoUtilities.isValid(legend[attributeName].special)) {
            if (includeGroupingInfo) {
              let groupName = legend[attributeName].group;

              if (ArcheoUtilities.isValid(groupName)) {
                entryName = groupName; //attributesLegend[groupName] = legend[groupName];
              }
            }
          }

          if (ignoreSpecialAttributes) {
            if (!ArcheoUtilities.isValid(legend[attributeName].special)) attributesLegend[entryName] = legend[entryName];
          } else attributesLegend[entryName] = legend[entryName];
        }
      }
    } else {
      attributesLegend = legend;
    }

    return attributesLegend;
  };

  ArcheoSession.getAdmixtureLegend = function (attributeId, getOnlyAttributes = false, ignoreSpecialAttributes = true, includeGroupingInfo = false) {
    let legend = ArcheoSession.get().legend.attributes;
    if (!(attributeId in legend)) legend[attributeId] = {
      '_groups': [],
      '_order': []
    };
    legend = legend[attributeId];
    let attributesLegend = {};

    if (getOnlyAttributes) {
      for (let i = 0; i < legend._order.length; ++i) {
        let entryName = legend._order[i];
        /* Ignore special attributes */

        if (!ArcheoUtilities.isValid(legend[entryName].special)) {
          if (includeGroupingInfo) {
            let groupName = legend[entryName].group;

            if (ArcheoUtilities.isValid(groupName)) {
              entryName = groupName; //attributesLegend[groupName] = legend[groupName];
            }
          }
        }
        /*if(ignoreSpecialAttributes) {
            if( ! ArcheoUtilities.isValid(legend[attributeName].special) )
                attributesLegend[entryName] = legend[entryName];
        } else
            attributesLegend[entryName] = legend[entryName];*/


        attributesLegend[entryName] = legend[entryName];
      }
    } else {
      attributesLegend = legend;
    }

    if (ignoreSpecialAttributes === false) {
      if ('OTHER' in legend) attributesLegend.OTHER = legend.OTHER;
      if ('MISSING' in legend) attributesLegend.MISSING = legend.MISSING;
    } else {
      /*if('OTHER' in legend)
          delete attributesLegend.OTHER;
      if('MISSING' in legend)
          delete attributesLegend.MISSING;*/
    }

    return attributesLegend;
  };

  ArcheoSession.getAttributeGroupsList = function (attributeId) {
    let legend = ArcheoSession.get().legend.attributes;
    if (!(attributeId in legend)) legend[attributeId] = {
      '_groups': []
    };
    return legend[attributeId]._groups;
  };

  ArcheoSession.getAttributeGroupsLegend = function (attributeId) {
    let legend = ArcheoSession.get().legend.attributes;
    if (!(attributeId in legend)) legend[attributeId] = {
      '_groups': []
    };
    legend = legend[attributeId];
    let groupsKeys = legend._groups;
    let groupsLegend = {};
    groupsKeys.forEach(key => {
      groupsLegend[key] = legend[key];
    });
    return groupsLegend;
  };

  ArcheoSession.getRegionLegend = function (regionTypeId, getOnlyRegions = false) {
    let legend = ArcheoSession.get().legend.regions;
    if (!(regionTypeId in legend)) legend[regionTypeId] = {
      '_groups': []
    };
    legend = legend[regionTypeId];
    if (getOnlyRegions) legend = ArcheoUtilities.filterObject(legend, ([key]) => !key.startsWith('_'));
    return legend;
  };

  ArcheoSession.load = function (sessionId) {
    let newSession = ArcheoCache.getSession(sessionId);

    if (ArcheoUtilities.isValid(newSession)) {
      let doLoadLayers = ArcheoUtilities.isValid(newSession.layers);
      let doLoadDatasets = ArcheoUtilities.isValid(newSession.datasets);
      let oldSession = ArcheoSession.get();
      /* Remove old datasets and layers if they are about to be overwritten */

      if (doLoadDatasets) {
        if (ArcheoUtilities.isValid(oldSession.datasets)) {
          let oldDatasetsIds = ArcheoSession.get().datasets._order.clone();

          MapUtilities.removeDatasets(oldDatasetsIds);
        }
      }

      if (doLoadLayers) {
        if (ArcheoUtilities.isValid(oldSession.layers)) {
          let oldLayersIds = ArcheoSession.get().layers._order.clone();

          MapUtilities.removeLayers(oldLayersIds);
        }
      }
      /* Load up new session */


      ArcheoCache.loadSession(newSession);

      if (doLoadDatasets) {
        let newDatasetsIds = newSession.datasets._order;
        MapUtilities.loadDatasets(newDatasetsIds).then(() => {
          if (doLoadLayers) {
            let newLayersIds = newSession.layers._order;
            MapUtilities.loadLayers(newLayersIds).then(() => {
              ArcheoEvents.broadcast('session-load');
            });
          }
        });
      } else if (doLoadLayers) {
        let newLayersIds = newSession.layers._order;
        MapUtilities.loadLayers(newLayersIds).then(() => {
          ArcheoEvents.broadcast('session-load');
        });
      } else {
        ArcheoEvents.broadcast('session-load');
      }

      return sessionId;
    } else {
      return false;
    }
  }; // "baseLayers": {} add baseLayer?: name, id?, color, isVisible, config {} // e.g. for basemap
  // nie, zrobię to na sztywno, ale bedzie w configu

}


;// CONCATENATED MODULE: ./views/pages/map/js/cache/index.js
function registerCacheFunctions() {
  ArcheoCache.removeLayer = function (layerId) {
    delete ArcheoCache.getTemporaryEntry('styleCache')[layerId];
    delete ArcheoCache.getTemporaryEntry('canvasCache')[layerId];
    delete ArcheoCache.getTemporaryEntry('featuresClusters')[layerId];
    delete ArcheoCache.getTemporaryEntry('layers')[layerId];
  };

  ArcheoCache.removeDataset = function (datasetId) {
    delete ArcheoCache.getTemporaryEntry('sources')[datasetId];
    delete ArcheoCache.getTemporaryEntry('datasets')[datasetId];
  };

  ArcheoCache.addDataset = function (datasetId, features) {
    ArcheoCache.getTemporaryEntry('datasets')[datasetId] = features;
  };

  ArcheoCache.getDataset = function (datasetId) {
    return ArcheoCache.getTemporaryEntry('datasets')[datasetId];
  };

  ArcheoCache.getDatasetFeatures = function (datasetId) {
    var features = ArcheoCache.getDataset(datasetId);
    if (ArcheoUtilities.isValid(features)) return ArcheoMap.readFeaturesAsGeoJSON(features);else return [];
  };

  ArcheoCache.addSession = function (sessionDict) {
    let importedSessions = ArcheoCache.getTemporaryEntry('importedSessions');
    let sessionsNumber = importedSessions._counter + 1 || 1;
    let sessionId = `session-${sessionsNumber}`;
    importedSessions[sessionId] = sessionDict;

    importedSessions._order.push(sessionId);

    importedSessions._counter += 1;
    return sessionId;
  };

  ArcheoCache.updateSession = function (sessionId) {
    let importedSessions = ArcheoCache.getTemporaryEntry('importedSessions');
    let updatedSession = importedSessions[sessionId];
    let currentSessionState = ArcheoUtilities.deepCloneObject(ArcheoSession.get());
    delete currentSessionState['_meta'];
    updatedSession = ArcheoUtilities.deepExtend(updatedSession, currentSessionState);
    updatedSession._meta.editDate = ArcheoUtilities.getCurrentDateString();
    importedSessions[sessionId] = updatedSession;
    return updatedSession;
  };

  ArcheoCache.getSessionsDict = function () {
    return ArcheoCache.getTemporaryEntry('importedSessions');
  };

  ArcheoCache.getSession = function (sessionId, copy = false) {
    let importedSessions = ArcheoCache.getTemporaryEntry('importedSessions');
    if (copy === true) return ArcheoUtilities.deepCloneObject(importedSessions[sessionId]);else return importedSessions[sessionId];
  };

  ArcheoCache.removeSession = function (sessionId) {
    delete ArcheoCache.getTemporaryEntry('importedSessions')[sessionId];

    ArcheoCache.getTemporaryEntry('importedSessions')._order.removeEl(sessionId);
  };

  ArcheoCache.createAttributeEntry = function (attributeId, value) {
    let attributeCache = ArcheoCache.getTemporaryEntry('attributes');
    if (!(attributeId in attributeCache)) attributeCache[attributeId] = {};
    attributeCache[attributeId][value] = true;
  };

  ArcheoCache.clearAttributeCache = function (attributeId) {
    let attributeCache = ArcheoCache.getTemporaryEntry('attributes');
    attributeCache[attributeId] = {};
  };

  ArcheoCache.getAttributeCache = function (attributeId) {
    let attributeCache = ArcheoCache.getTemporaryEntry('attributes');
    if (!(attributeId in attributeCache)) attributeCache[attributeId] = {};
    return attributeCache[attributeId];
  };
}

function cacheInitialization() {
  ArcheoCache.setTemporaryEntry('datasetsFeaturesToDownload', {});
  ArcheoCache.setTemporaryEntry('styleCache', {
    'vector-regions': {}
  });
  ArcheoCache.setTemporaryEntry('regionsNamesCache', {});
  ArcheoCache.setTemporaryEntry('canvasCache', {});
  ArcheoCache.setTemporaryEntry('attributeClustering', {});
  ArcheoCache.setTemporaryEntry('attributeFiltering', {});
  ArcheoCache.setTemporaryEntry('$symbol', null);
  ArcheoCache.setTemporaryEntry('featuresClusters', {});
  ArcheoCache.setTemporaryEntry('layers', {});
  ArcheoCache.setTemporaryEntry('datasets', {});
  ArcheoCache.setTemporaryEntry('sources', {});
  ArcheoCache.setTemporaryEntry('selectedFeatures', {});
  ArcheoCache.setTemporaryEntry('attributes', {});
  ArcheoCache.setTemporaryEntry('importedSessions', {
    _order: [],
    _counter: 0
  });
  ArcheoCache.setTemporaryEntry('map', null);
  ArcheoCache.setTemporaryEntry('baseLayers', {
    'vectorDraggable': null,
    'regionsLayer': null
  });
  /* Keep track of the open features modals count */

  ArcheoCache.setTemporaryEntry('features-modals-count', 0);
}


/*

    if( ! ArcheoUtilities.exists( document.documentElement.lang ) )
		document.documentElement.lang = 'en';

	window.getLang = () => { return document.documentElement.lang };

*/
;// CONCATENATED MODULE: ./views/pages/map/js/events/broadcastRoutes.json
const broadcastRoutes_namespaceObject = JSON.parse('{"map-content-update":["#legend-content"],"selected-dataset-update":["#query-builder","#query-filters-button"],"time-filter-update":["#timeline","#time-filter","#timeline-range","#legend-content","#map"],"time-present-filter-update":["#present-switch","#time-filter-present-toggle","#map"],"query-builder-update":["#query-filters-button"],"layer-add":["#map","#legend-layers","#features-clustering"],"layer-map-change":["#layers-container"],"layer-remove":["#map","#new-layer-button","#legend-layers"],"layer-type-change":["#map","select.select-attribute",".layer .setting","#legend-layers"],"layer-attribute-change":["#map","select.select-value"],"layer-initialization":["#new-layer-button",".clone-button",".layer","select.select-layer-dataset","select.select-attribute","select.select-attribute-type","select.select-value","#map"],"layer-value-change":["#map"],"layer-config-change":["#map"],"layer-color-change":["#map",".layer","#legend-layers"],"layer-gradient-change":["#map",".layer",".layer-header","#legend-layers"],"layer-visibility-change":["#legend-layers"],"layer-dataset-change":["select.select-attribute","select.select-attribute-type","#map"],"layer-setting-change":["#map"],"layer-name-change":["#legend-layers"],"cluster-config-change":["#features-clustering",".layer","#map"],"cluster-distance-type-changed_REMOVE":["#clustering-slider","#distance-slider"],"cluster-strategy-change":["#features-clustering","#features-clustering .session-option","#clustering-slider","#distance-slider",".layer","#map"],"cluster-region-show":["#map"],"cluster-setting-change":[".layer","#map"],"cluster-range-change":["#features-clustering"],"panel-activated":["#legend-wrapper"],"select-features-clustering":["#features-clustering",".features-clustering .session-option"],"clustering-attribute-change":["#select-cluster-attribute","#select-cluster-attribute-type","#select-filter-attribute","#select-filter-attribute-type","select.select-value","#map"],"filter-attribute-change":["#select-filter-attribute","#select-filter-attribute-type","select.select-value","#map"],"filter-region-change":["#map"],"session-load":["#loading-session-wrapper",".session-option","#map","#guide-button"],"finished-fetching-attributes":["#select-filter-attribute","#select-filter-attribute-type","#select-cluster-attribute","#select-cluster-attribute-type","select.select-attribute","select.select-attribute-type"],"dataset-add":["#query","#map","#select-cluster-attribute","#select-cluster-attribute-type","#select-filter-attribute","#select-filter-attribute-type","#new-layer-button",".layer","#clustering-mode-select"],"dataset-update":[".layer"],"dataset-remove":["#map","#select-cluster-attribute","#select-cluster-attribute-type","#select-filter-attribute","#select-filter-attribute-type","#new-layer-button",".layer","select.select-attribute"],"update-session":[".session"],"dataset-sampled":["#clustering-mode-select"],"dataset-shuffled":["#clustering-mode-select"],"attribute-fetched":[".layer"],"map-modal":["#map"]}');
;// CONCATENATED MODULE: ./views/mixins-pug/tooltip/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const tooltip_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/toggle-arrow/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const toggle_arrow_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/accordion-header/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const accordion_header_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/icon-text-list/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const icon_text_list_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/icon-radiobuttons/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const icon_radiobuttons_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/dropdown/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const dropdown_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/custom-button/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const custom_button_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/years-range-spinner/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const years_range_spinner_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/spectrum-color-input/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const spectrum_color_input_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/textbox/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const textbox_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/switch/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const switch_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/timeline/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const timeline_style = ({"palette_primary_color":"#13446f","palette_primary_color_light":"#26537a","palette_primary_color_lightest":"#c5d1dc","palette_primary_color_dark":"#113d64","palette_primary_color_darkest":"#0d304e","palette_secondary_color":"#ffad42","palette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","palette_tertiary_color_darker":"#222","palette_tertiary_color_darkest":"#141414","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
// EXTERNAL MODULE: ./views/pages/map/index.pug
var pages_map = __webpack_require__(8016);
;// CONCATENATED MODULE: ./views/pages/map/app.js
// Connect Styles for Webpack to bundle them (for dynamicaly generated content) //




 //import 'ol/ol.css'; // rem
// Scripts //

/*
import { initializeSidebars } from "./js/sidebars.js";
import { initializeModals } from "./js/map-modals.js";
import { initializeInteractiveMap } from "./js/interactive-map/map.js";
import { initializeQueryFiltersButton } from './js/left-sidebar/query-filters-button.js';
import { initializeDatasetSelect } from './js/left-sidebar/select-dataset.js';
import { initializeQueryButton } from './js/left-sidebar/query-button';

import { initializeAppearanceDataset } from './js/right-sidebar/select-dataset';

import { initializeNewLayerButton } from './js/right-sidebar/new-layer-button';
import { initializeNewStrategyButton } from './js/right-sidebar/clustering';

import { initializeTimeFilter } from './js/right-sidebar/time-filter.js';
import { initializeTimeline } from './js/timeline.js'

import { initializeRightSidebarUIEvents } from './js/right-sidebar/events';

import { initializeAttributesEvents } from './js/interactive-map/events/attributes';
*/
// Elements //
// Events //


 // Session //



 // Events //

 // Register pug-Mixins //













 //import 'Views/mixins-pug/icon-checkbox/style.scss';






/* Link .pug for assets injetion */



$(document).ready(function () {
  /*** Register MapUtilities ***/
  utilities();
  /*** Initialize page session functions ***/

  registerSessionFunctions();
  window.sessionStorage.clear();
  /*** #0 -- Register events broadcast routes ***/

  ArcheoEvents.setRoutes(broadcastRoutes_namespaceObject);
  /*** Setup temporary cache entries ***/

  registerCacheFunctions();
  cacheInitialization();
  /*** #1 -- Set blank session ***/

  let defaultSession = lang_defaults[getLang()];
  ArcheoSession.set(defaultSession); //if( ! ArcheoUtilities.exists( document.documentElement.lang ) )
  //	document.documentElement.lang = 'en';

  /* Global getLang function */
  //window.getLang = () => { return document.documentElement.lang };

  /*** #2 -- Initialize elements ***/

  /*** Initialize static UI Elements  ***/

  js_elements();
  /*** Initialize static UI Events ***/

  events();
  /* Prepare guide to auto-launch */

  let shouldGuideLaunch = localStorage.getItem('mapGuideHide') != "true";

  if (shouldGuideLaunch && !ArcheoUtilities.isValidNonEmptyString(window.example)) {
    $("#guide-button").one('session-load', function (e) {
      $(e.target).trigger('click');
    });
  }

  let shouldHidePrompt = localStorage.getItem('mapGuidePromptHide') == "true";

  if (!shouldHidePrompt && !ArcheoUtilities.isValidNonEmptyString(window.example)) {
    $("#guide-prompt").removeClass('hidden');
  }
  /*** Initialize dynamically generated content ***/


  new Promise(async (resolution, rejection) => {
    $('#session-presets').selectpicker('val', window.example || 'default');
    resolution(true);
  });
  /* Initialize session options in the UI */
  //ArcheoEvents.broadcast('session-load');

  ArcheoUtilities.setContentLoaded('#loading-page-wrapper', 'body');
});

/***/ }),

/***/ 802:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_cache.bfc303040cee293a669d.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 1087:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_events.60c0eb2f0a6a8095526b.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 9712:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_legend.d366e5a143ce485a92af.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 3838:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_map.46512d4c54b1c2cad88a.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 9072:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Farcheo_map.fbb750fd312778403036.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8785:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_requests.83b8a08e76a8c1bf870c.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 481:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_search.ae8da8dc7fcbbe88b9dc.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 3678:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_session.5586379f38ef0b8a0948.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 727:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_ui.353aee23863a537cfc53.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 6603:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_utilities.45915d87ae1effb41b41.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8501:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fmap.c4cf85d2ccd665cffbe9.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8903:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Fmap.ac8a39a3a20c4940b3f4.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 4161:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Fmodules.eff6e00d71d50300030c.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 4459:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-25535252.e7e8ce38935aef740527.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-227ad97a.fcfd0773c63a75a943f2.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-bcc71cef.3cd9c68272a9f054642e.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-3721061d.266009622dac8bea2b0a.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-8fb3d2e1.439058f2db3c8c11d8b8.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-a35007e9.d54218ebc8ff3334b745.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-3dbaccc5.734dfd99bba654f0ecbd.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-a33e9691.d6154bbbb130d908d841.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-e5fb8f5d.825a861af70a17ec0121.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-034d289d.0e61c5ae9666eede521e.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-cf3fe87f.c48d97372e6570907a94.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-c0edc6da.6d000cfdafdcd8baf9fb.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-70675959.c472de4d20cf23fef3eb.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-8c35d8b7.45197c6d597340983523.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-88034504.49b2b87e9999efec6cbf.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-cbc44e46.ae35cc69e5ffba3d668a.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-cfe4622e.14ee77cb8d652998a4f6.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-2701b9eb.9747f4a6a08d699e863d.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-5a739dd6.3102cb18df1fc7690f35.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-1c6459ff.cf71e416fcf8a204965f.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-62c0e40e.5418309fd51b3bcc12df.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8635:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Ftemplate_basic.bfc201e53652c13ee649.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7520:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Ftemplate_basic.922bf98eeee618b42944.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 9156:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var attributesClusteringPanelChoice = {
    'attributes': {
        'label': 'attribute values'
    },
    'groups': {
        'label': 'groups'
    }
};return pug_html;};
module.exports = template;

/***/ }),

/***/ 2975:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var layerBlendingModes = {
	'normal': { 'name': 'Normal', 'selected': true },
	'multiply': { 'name': 'Multiply'},
	'screen': { 'name': 'Screen'},
	'overlay': { 'name': 'Overlay'},
	'darken': { 'name': 'Darken'},
	'lighten': { 'name': 'Lighten'},
	'color-dodge': { 'name': 'Color doge'},
	'color-burn': { 'name': 'Color burn'},
	'hard-light': { 'name': 'Hard light'},
	'soft-light': { 'name': 'Soft light'},
	'difference': { 'name': 'Difference'},
	'exclusion': { 'name': 'Exclusion'},
	'hue': { 'name': 'Hue'},
	'saturation': { 'name': 'Saturation'},
	'color': { 'name': 'Color'},
	'luminosity': { 'name': 'Luminosity'},
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8634:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var clusteringDic = {
    'Distance': {
        'isOptgroup': true,
        'name': 'Cluster by distance',
        'maxData': '1',
        'options': {
            'distance__relative': {
                'selected': true,
                'name': 'Relative distance (pixels)',
                'title': 'Relative dist.'
            },
            'distance__absolute': {
                'name': 'Absolute distance (kilometers)',
                'title': 'Absolute dist.'
            }
        }
    },
    'Regions': {
        'isOptgroup': true,
        'name': 'Cluster by regions',
        'maxData': '1',
        'options': {
            'region__cultures': {
                'name': 'Archeological cultures',
                'title': 'Cultures',
                'subtext': 'archaeological division'
            },
            'region__world': {
                'name': 'World',
                'title': 'World',
                'subtext': 'geographical division'
            },
            'region__continents': {
                'name': 'Continents',
                'title': 'Continents',
                'subtext': 'geographical division'
            },
            'region__wb_regions': {
                'name': 'World Bank Regions',
                'title': 'WB Regions',
                'subtext': 'political division'
            },
            'region__un_regions': {
                'name': 'United Nations Regions',
                'title': 'UN Regions',
                'subtext': 'political division'
            },
            'region__un_subregions': {
                'name': 'United Nations Subregions',
                'title': 'UN Subregions',
                'subtext': 'political division'
            },
            'region__countries': {
                'name': 'Countries',
                'title': 'Countries',
                'subtext': 'political division'
            }
        }
    }
};


;return pug_html;};
module.exports = template;

/***/ }),

/***/ 6342:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var clustersValue = {
    'count': {
        'label': 'layer objects count'
    },
    'weight': {
        'label': 'layer objects weight'
    }
}

var clustersValue_BU = {
    'count': {
        'label': 'layer objects count, \\(x\\in\\mathbf{N}\\)'
    },
    'weight': {
        'label': 'layer objects weight, \\(w\\in[0, 1]\\)'
    }
};return pug_html;};
module.exports = template;

/***/ }),

/***/ 1128:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var columnsDic = {
    'map': {
        'isOptgroup': true,
        'name': 'Map information',
        'options': {
            'datasetId': {
                'name': 'Dataset ID'
            },
            'layerId': {
                'name': 'Layer ID'
            }
        }
    },
    'sex': {
        'isOptgroup': true,
        'name': 'Genetical sex',
        'options': {
            'name': {
                'name': 'Name'
            }
        }
    },
    'haplogroup_y': {
        'isOptgroup': true,
        'name': 'Haplogroup Y',
        'options': {
            'name': {
                'name': 'Name'
            },
            'treeIndex': {
                'name': 'Tree index'
            }
        }
    },
    'haplogroup_mt': {
        'isOptgroup': true,
        'name': 'Haplogroup Mt',
        'options': {
            'name': {
                'name': 'Name'
            },
            'treeIndex': {
                'name': 'Tree index'
            }
        }
    },
    'dating': {
        'isOptgroup': true,
        'name': 'Dating',
        'options': {
            'yearFrom': {
                'name': 'Year from'
            },
            'yearTo': {
                'name': 'Year to'
            },
            'type': {
                'name': 'Type'
            }
        }
    },
    'use_phase': {
        'isOptgroup': true,
        'name': 'Dating',
        'options': {
            'id': {
                'name': 'ID'
            },
            'yearFrom': {
                'name': 'Year from'
            },
            'yearTo': {
                'name': 'Year to'
            },
            'function': {
                'name': 'Function'
            }
        }
    },
    'regions_political': {
        'isOptgroup': true,
        'name': 'Political regions',
        'options': {
            'country_name': {
                'name': 'Country name'
            },
            'un_region_name': {
                'name': 'United Nations region name'
            },
            'country_name': {
                'name': 'United Nations subregion name'
            }
        }
    },
    'regions_archaeological': {
        'isOptgroup': true,
        'name': 'Archeological regions',
        'options': {
            'culture_name': {
                'name': 'Culture name'
            }
        }
    },
    'sources': {
        'isOptgroup': true,
        'name': 'Sources',
        'options': {
            'titles': {
                'name': 'Titles'
            },
            'publication_dates': {
                'name': 'Publication years'
            }
        }
    },
    'authors': {
        'isOptgroup': true,
        'name': 'Authors',
        'options': {
            'authors': {
                'name': 'Names'
            }
        }
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 1854:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var datasetsDic = {
    'Past': {
        'isOptgroup': true,
        'name': 'Archeogenomic samples',
        'options': {
            'RemainsAADR': {
                'name': 'Allen Ancient DNA Resource v54.1.p1',
                'disabled': false,
                'selected': true,
                'attributes': {
                    'entity': 'Remains',
                    'database': 'AADR_v54.1.p1',
                    'datasetType': 'Allen Ancient DNA Resource v54.1.p1'
                }
            }
        }
    },
    'Present': {
        'isOptgroup': true,
        'name': 'Contemporary genomic samples',
        'options': {
            'PersonAADR': {
                'name': 'Allen Ancient DNA Resource v54.1.p1',
                'disabled': false,
                'attributes': {
                    'entity': 'Person',
                    'database': 'AADR_v54.1.p1',
                    'datasetType': 'Allen Ancient DNA Resource v54.1.p1'
                }
            },
            'PersonEMPOP': {
                'name': 'EMPOP mtDNA database v4/R13',
                'disabled': false,
                'attributes': {
                    'entity': 'Person',
                    'database': 'EMPOP_v4/R13',
                    'datasetType': 'EMPOP mtDNA database v4/R13'
                }
            }
        }
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7440:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var growthFunctions = {
	'none': { 
		'name': 'None', 
		'content': 'None' 
	},
	'linear': { 
		'name': 'Linear', 
		'content': 'Linear' 
	},
	'polynomial': { 
		'name': 'Polynomial', 
		'content': 'Polynomial'
	},
	'exponential': { 
		'name': 'Exponential', 
		'selected': true, 
		'content': 'Exponential'
	}
};

var growthFunctions_BU = {
	'none': { 
		'name': 'None', 
		'content': 'None: \\( w = 1 \\)' 
	},
	'linear': { 
		'name': 'Linear', 
		'content': 'Linear: \\( w = ax\'C \\)' 
	},
	'polynomial': { 
		'name': 'Polynomial', 
		'content': 'Polynomial: \\( w = (x\'C)^{a} \\)'
	},
	'logarithmic': { 
		'name': 'Logarithmic', 
		'content': 'Logarithmic: \\( w = log_a (Cx\') \\)'
	},
	'exponential': { 
		'name': 'Exponential', 
		'selected': true, 
		'content': 'Exponential: \\( w = \\frac{a^{x\'C} - 1}{a - 1} \\)'
	}
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 2927:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var layerTypes = {
	'': { 'selected': true },
	'single': {
		'isOptgroup': true,
		'name': 'Single value representation',
		'options': {
			'point': {
				'name': 'Points'
			},
			'heatmap': {
				'name': 'Heatmap'
			}
		}
	},
	'multiple': {
		'isOptgroup': true,
		'name': 'Multiple values representation',
		'options': {
			'piechart': {
				'name': 'Piecharts'
			},
			'tag': {
				'name': 'Tags cloud'
			}
		}
	}
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 1495:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var mapToolbox = {
    "map-options":{
        "isHeader": true,
        "name": "Options"
    },
    "map-options-basemap": {
        "name": "Basemap",
        "isSubmenu": true,
        "options": {
            'map-options-light-basemap': {"isToggle": true, "name": "Light", "class": "radio-button basemap-option", "option-name": "Light"},
            'map-options-imagery-basemap': {"isToggle": true, "name": "Imagery", "class": "radio-button basemap-option", "option-name": "Imagery"},
            'map-options-osm-basemap': {"isToggle": true, "name": "OSM", "class": "radio-button basemap-option", "option-name": "OSM"},
            'map-options-basemap-divider': {"isDivider": true},
            'map-options-basemap-appearance': {"name": "Edit appearance", "class": "dropdown-item-toggle"},
        }
    },
    "map-options-features": {
        "name": "Map features",
        "isSubmenu": true,
        "options": {
            'map-options-timeline-feature': {"isActive": true, "isToggle": true, "name": "Timeline", "class": "active checkbox", "toggle-target": "#time-controls-wrapper", "option-name": "timeline"},
            'map-options-controls-feature': {"isActive": true, "isToggle": true, "name": "Map controls", "class": "active checkbox", "toggle-target": "#map-controls-panel", "option-name": "controls"},
            'map-options-legend-feature': {"isActive": true, "isToggle": true, "name": "Legend", "class": "active checkbox", "toggle-target": "#legend-wrapper", "option-name": "legend"},
            'map-options-title-feature': {"isActive": false, "isToggle": true, "name": "Map title", "class": "checkbox", "toggle-target": "#map-title-wrapper", "option-name": "title"},
            'map-options-scale-feature': {"isActive": true, "isToggle": true, "name": "Scale", "class": "active checkbox", "toggle-target": "#map-scale", "option-name": "scale"},
            'map-options-features-divider': {"isDivider": true},
            'map-options-features-appearance': {"name": "Edit appearance", "class": "dropdown-item-toggle"}
        }
    },
    "map-actions":{
        "isHeader": true,
        "name": "Actions"
    },
    'map-options-screenshot': "Export map to image",
    'map-options-fullscreen': "Toggle fullscreen"
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 180:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var patterns = {
    "hatch": {
        "name": "Hatch pattern",
        "selected": false
    },
    "coal": {
        "name": "Coal pattern",
        "selected": false
    },
    "dot": {
        "name": "Dot pattern",
        "selected": false
    },
    "crosses": {
        "name": "Crosses pattern",
        "selected": false
    },
    "woven": {
        "name": "Woven pattern",
        "selected": false
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 5147:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var piechartsLabel = {
    'never': {
        'label': 'never.'
    },
    'hover': {
        'label': 'on hover.'
    },
    'select': {
        'label': 'on select.'
    },
    'always': {
        'label': 'always.'
    }
}
;return pug_html;};
module.exports = template;

/***/ }),

/***/ 3875:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var proportionOperators = {
    'geq': {
        'label': '&#8805;'
    },
    'leq': {
        'label': '&#8804;'
    },
    'eq': {
        'label': '='
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 9630:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var regionsLabel = {
    'cluster': {
        'label': 'above cluster.'
    },
    'region': {
        'label': 'at region centroid.'
    },
    'none': {
        'label': 'nowhere.'
    }
};return pug_html;};
module.exports = template;

/***/ }),

/***/ 8134:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var sessionDataTypes = {
    "datasets": {
        "name": "Loaded datasets"
    },
    "layers": {
        "name": "Created data layers"
    },
    "colors": {
        "name": "Data appearance, e.g. color",
        "options": {
            "attributes": {
                "name": "Attributes appearance"
            },
            "regions": {
                "name": "Regions appearance"
            }
        }
    },
    "filters": {
        "name": "Data filters",
        "options": {
            "time": {
                "name": "Time filter options"
            },
            "attributes": {
                "name": "Attributes filtering"
            },
            "regions": {
                "name": "Regions filtering"
            }
        }
    },
    "map": { 
        "name": "Map properties, e.g. position and zoom"
    },
    "clustering": {
        "name": "Grouping options",
        "options": {
            "features": {
                "name": "Spatial clustering options"
            },
            "attributes": {
                "name": "Attributes grouping options"
            }
        }
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 5146:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var sessionsDic = {
    '': {
        'name': ''
    },
    'default': {
        'name': 'Default session'
    },
    'blank': {
        'name': 'Blank session'
    },
    'examples': {
        'isOptgroup': true,
        'name': 'Examples',
        'options': {
            'R1a_R1b_heatmap': {
                'name': 'R1a & R1b distribution on heatmap'
            },
            'periods': {
                'name': 'Comparsion of periods'
            },
            'admixtures': {
                'name': 'Distribution of admixtures'
            },
            'tags': {
                'name': 'Males haplogroups shown with tags'
            },
            'cultures': {
                'name': 'Admixture values in range of Epigravettian culture'
            },
            'past_present': {
                'name': 'Past mt-DNA haplogroups vs contemporary times data'
            }
        }
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 5847:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var standardisationMethods = {
	'none': { 
		'name': 'None', 
		'content': 'None' 
	},
	'max': { 
		'name': 'Max', 
		'selected': true, 
		'content': 'By max count'
	},
	'total': { 
		'name': 'Total', 
		'content': 'By total count'
	}
};

var standardisationMethods_BU = {
	'none': { 
		'name': 'None', 
		'content': 'None: \\( x\' = x \\)' 
	},
	'max': { 
		'name': 'Max', 
		'selected': true, 
		'content': 'By max count: \\( x\' = \\frac{x}{x_{max}} \\)'
	},
	'total': { 
		'name': 'Total', 
		'content': 'By total count: \\( x\' = \\frac{x}{\\sum_{i=0}^{N}x_{i}} \\)'
	}
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 32:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var tagStrategies = {
    'archimedean': {
        'label': 'archimedean spiral'
    },
    'rectangular': {
        'label': 'rectangular spiral'
    }
};return pug_html;};
module.exports = template;

/***/ }),

/***/ 8016:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;;
    var locals_for_with = (locals || {});
    
    (function (JSON, Math, Object, ariaLabel, attributes, attributesClusteringPanelChoice, clusteringDic, clustersValue, datasetsDic, dictionary, example, fileTypes, growthFunctions, header, iconName, iconTitle, imageTypes, lang, layerBlendingModes, layerTypes, mapToolbox, maxYear, metadata, minYear, pageName, patterns, piechartsLabel, proportionOperators, regionsLabel, sessionDataTypes, sessionsDic, standardisationMethods, tagStrategies, targetId, text, title, toString) {
      pug_html = pug_html + "\u003C!DOCTYPE html\u003E\u003Chtml" + (pug.attr("lang", lang, true, true)) + "\u003E\u003Chead\u003E\u003Cmeta charset=\"utf-8\"\u003E\u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003E\u003Cmeta http-equiv=\"X-UA-Compatible\" content=\"text\u002Fhtml; charset=utf-8\"\u003E\u003Cmeta name=\"robots\" content=\"noindex\"\u003E\u003Clink rel=\"shortcut icon\" href=\"#\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Ffonts.googleapis.com\u002Ficon?family=Material+Icons\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap@4.5.3\u002Fdist\u002Fcss\u002Fbootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e\u002FihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fmalihu-custom-scrollbar-plugin\u002F3.1.5\u002Fjquery.mCustomScrollbar.min.css\" integrity=\"sha256-JHGEmB629pipTkMag9aMaw32I8zle24p3FpsEeI6oZU=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjqueryui\u002F1.12.1\u002Fjquery-ui.min.css\" integrity=\"sha256-rByPlHULObEjJ6XQxW\u002FflG2r+22R5dKiAoef+aXWfik=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap-select@1.13.17\u002Fdist\u002Fcss\u002Fbootstrap-select.min.css\" integrity=\"sha256-VMPhaMmJn7coDSbzwqB0jflvb+CDnoAlfStC5RogOQo=\" crossorigin=\"anonymous\"\u003E" + (null == (pug_interp = (__webpack_require__(7520).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(4161).call)(this, locals)) ? "" : pug_interp) + "\u003Cscript\u003Ewindow.metadata = JSON.parse( " + (null == (pug_interp = JSON.stringify(metadata).replace(/<\//g, '<\\/')) ? "" : pug_interp) + " );\nwindow.name = \"" + (null == (pug_interp = pageName.replace(/<\//g, '<\\/')) ? "" : pug_interp) + "\";\nwindow.lang = \"" + (null == (pug_interp = lang.replace(/<\//g, '<\\/')) ? "" : pug_interp) + "\";\nwindow.dictionary = JSON.parse( " + (null == (pug_interp = JSON.stringify(dictionary).replace(/<\//g, '<\\/')) ? "" : pug_interp) + " );\n\u003C\u002Fscript\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fbootstrap-slider\u002F10.6.1\u002Fcss\u002Fbootstrap-slider.min.css\" integrity=\"sha256-+xqVrdbLgHjiKF8ULvcwzQ545r7lCVfOqXlNJCB3XOg=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fion-rangeslider\u002F2.3.1\u002Fcss\u002Fion.rangeSlider.min.css\" integrity=\"sha256-g7HgoMySZyonuPwHTORf+uGHEeOm7VRI2kfXWXlJnco=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002FjQuery-QueryBuilder@2.5.2\u002Fdist\u002Fcss\u002Fquery-builder.default.min.css\" integrity=\"sha256-t0OO5vutCzErqiAiLqVcVPbR3krMH9aTnzbtbjmiFUU=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-toggle@3.6.1\u002Fcss\u002Fbootstrap4-toggle.min.css\" integrity=\"sha256-O2vM7yYY3KvcJBl9KlWgcWIDi2Gw+oW39+WceHpZMeA=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-tagsinput@4.1.3\u002Ftagsinput.min.css\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fspectrum\u002F1.8.1\u002Fspectrum.min.css\" integrity=\"sha512-KuSX+43gVS5MEIJD2ewtrFPOHqC1PJnL8o2f5ciggPC0JUZ8XV0QXlfArO1mSzKkVFdRjsBDfrTU96C5SuRfqQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fgrapick@0.1.13\u002Fdist\u002Fgrapick.min.css\" integrity=\"sha256-Mmwj4BhpOgPwY2KGqntBnifqo6bpTkrO72LpQzIilWM=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Funpkg.com\u002Fbootstrap-table@1.20.0\u002Fdist\u002Fbootstrap-table.min.css\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Ftippy.js\u002F5.0.3\u002Ftippy.min.css\" integrity=\"sha512-BK9juS9Nt9njTjarKxnzXbvMHxwsdE\u002FSK109TTD5LX\u002F\u002FFVd5+WCumh5QCzk2dhenr3PV4p6C\u002FigRGbSqfWJ6QA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"\u002Fcss\u002Fmodules\u002Fanglepicker-1.0.1.css\"\u003E\u003Clink rel=\"stylesheet\" href=\"\u002Fcss\u002Fmodules\u002Fanno.css\"\u003E\u003Cscript\u003E\u002F\u002F-window.metadata = JSON.parse( " + (null == (pug_interp = JSON.stringify(metadata).replace(/<\//g, '<\\/')) ? "" : pug_interp) + " );\nwindow.example = \"" + (null == (pug_interp = example) ? "" : pug_interp) + "\";\n\u003C\u002Fscript\u003E" + (null == (pug_interp = (__webpack_require__(8903).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(9072).call)(this, locals)) ? "" : pug_interp) + "\u003Ctitle\u003EHuman Archeogenomics\u003C\u002Ftitle\u003E\u003C\u002Fhead\u003E\u003Cbody class=\"loading\"\u003E";
pug_mixins["nav-item"] = pug_interp = function(lang, ref, name){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (ref === pageName) {
pug_html = pug_html + "\u003Cli" + (pug.attrs(pug.merge([{"class": "nav-item active"},attributes]), true)) + "\u003E\u003Ca" + (" class=\"nav-link\""+pug.attr("href", "/" + lang + "/" + ref, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003Cspan class=\"sr-only\"\u003E(current)\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E";
}
else {
pug_html = pug_html + "\u003Cli" + (pug.attrs(pug.merge([{"class": "nav-item"},attributes]), true)) + "\u003E\u003Ca" + (" class=\"nav-link\""+pug.attr("href", "/" + lang + "/" + ref, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003C\u002Fa\u003E\u003C\u002Fli\u003E";
}
};
pug_mixins["nav-dropdown-item"] = pug_interp = function(lang, ref, name){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (ref === pageName) {
pug_html = pug_html + "\u003Ca" + (" class=\"dropdown-item\""+pug.attr("href", "/" + lang + "/" + ref, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003C\u002Fa\u003E";
}
else {
pug_html = pug_html + "\u003Ca" + (" class=\"dropdown-item\""+pug.attr("href", "/" + lang + "/" + ref, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003C\u002Fa\u003E";
}
};
pug_html = pug_html + "\u003Cnav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top px-3\"\u003E\u003Ca" + (" class=\"navbar-brand\""+pug.attr("href", `/${lang}/home`, true, true)) + "\u003EArcheogenomics.eu&nbsp;&nbsp;|&nbsp;&nbsp;Human AGEs\u003C\u002Fa\u003E\u003Cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbar-wrapper\" aria-controls=\"#navbar-wrapper\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003E\u003Cspan class=\"navbar-toggler-icon\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv class=\"collapse navbar-collapse\" id=\"navbar-wrapper\"\u003E\u003Cul class=\"navbar-nav mr-auto\"\u003E";
pug_mixins["nav-item"].call({
attributes: {"class": "mx-2"}
}, lang, `home`, "Main page");
pug_html = pug_html + "\u003Cli class=\"nav-item dropdown\"\u003E\u003Cdiv class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003EApplications\u003C\u002Fdiv\u003E\u003Cdiv class=\"dropdown-menu bg-dark\" aria-labelledby=\"navbar-browse\"\u003E";
pug_mixins["nav-dropdown-item"](lang, `map`, "Interactive map");
pug_mixins["nav-dropdown-item"](lang, `plot`, "Interactive plot");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003Cli class=\"nav-item dropdown\"\u003E\u003Cdiv class=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003EHelp\u003C\u002Fdiv\u003E\u003Cdiv class=\"dropdown-menu bg-dark\" aria-labelledby=\"navbar-browse\"\u003E";
pug_mixins["nav-dropdown-item"](lang, "examples", "Examples");
pug_mixins["nav-dropdown-item"](lang, "faq", "FAQ");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E";
pug_mixins["nav-item"].call({
attributes: {"class": "mx-2"}
}, lang, `contact`, "Contact");
pug_html = pug_html + "\u003C\u002Ful\u003E\u003Cul class=\"navbar-nav ml-auto\"\u003E";
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_html = pug_html + "\u003Ci class=\"my-auto mr-3 navbar-prompt hidden\" id=\"guide-prompt\"\u003ETry our...\u003C\u002Fi\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-tertiary-outline no-focus mb-0","id": "guide-button","title": "Run guide tour presenting main application features"}
}, "Guided tour", "info_outline");
pug_html = pug_html + "\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\u003C\u002Fnav\u003E\u003Cdiv id=\"loading-page-wrapper\"\u003E\u003Cdiv class=\"loading-page loading-content overlay d-flex align-items-center justify-content-center\" style=\"z-index: 99999999; font-size: 2rem;\"\u003E\u003Cspan\u003EInitializing map...\u003C\u002Fspan\u003E\u003Cdiv class=\"ml-4 spinner-border\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"site-wrapper\"\u003E";
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["accordion-header-button"] = pug_interp = function(targetId, title, iconId, iconClass, isCollapsed = false, isButtonPressed = true, iconTitle="", classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"accordion-wrapper group\" role=\"group\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: pug.merge([{"class": "m-0 p-0"},attributes])
}, iconId, iconClass, '', isButtonPressed, iconTitle = iconTitle);
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["button-accordion-header","accordion-header","collapsable","collapsed",classes], [false,false,false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["accordion-header","collapsable",classes], [false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};





















pug_mixins["accordion-header-settings"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};













pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};























pug_mixins["selectOption"] = pug_interp = function(el, key){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var optionsAttributes = {};
if(el.datatokens) optionsAttributes['data-tokens'] = el.datatokens;
if(el.disabled) optionsAttributes['disabled'] = el.disabled;
if(el.subtext) optionsAttributes['data-subtext'] = el.subtext;
if(el.selected) optionsAttributes['selected'] = el.selected;
if(el.content) optionsAttributes['data-content'] = el.content;
if(el.title) optionsAttributes['title'] = el.title;
if(el.attributes)
	Object.keys(el.attributes).forEach((attribute) => {
		optionsAttributes[attribute] = el.attributes[attribute];
	});

pug_html = pug_html + "\u003Coption" + (pug.attrs(pug.merge([{"value": pug.escape(key)},optionsAttributes]), true)) + "\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Foption\u003E";
};
pug_mixins["dropdown-no-picker"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","data-virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["dropdown"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"class": "selectpicker","data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["years-range-spinner"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "years-range-spinner d-flex"},attributes]), true)) + "\u003E\u003Cspan class=\"input-years-from w-100\"\u003E\u003Cinput class=\"form-control-sm w-100 plain-text-input\" value=\"0\" type=\"text\" autocomplete=\"off\" is_year=\"\"\u003E\u003C\u002Fspan\u003E\u003Chr class=\"range-line w-25\"\u003E\u003Cspan class=\"input-years-to w-100\"\u003E\u003Cinput class=\"form-control-sm w-100 plain-text-input\" value=\"0\" type=\"text\" autocomplete=\"off\" is_year=\"\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E";
};




pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = '', classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (pug.attr("class", pug.classes(["form-control",classes], [false,true]), false, true)+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cdiv class=\"spinner-border status hidden\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-input"] = pug_interp = function(id, buttonText, spinnerValue, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cdiv class=\"form-control p-0 h-100 border-0\"\u003E\u003Cinput" + (pug.attr("id", id, true, true)+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("value", spinnerValue, true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-icon-textbox"] = pug_interp = function(id, placeholder, buttonText, textIconName, buttIconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group icon-button-textbox-wrapper\"\u003E\u003Cspan class=\"form-control p-0\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append icon-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = textIconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fspan\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, buttIconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["tooltip"] = pug_interp = function(id, placement="top", iconName="help_outline"){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (" class=\"archeo-tooltip\""+pug.attr("tooltip-id", id, true, true)+" type=\"button\""+pug.attr("data-tippy-placement", placement, true, true)) + "\u003E\u003Ci class=\"material-icons tooltip-icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
};
pug_html = pug_html + (null == (pug_interp = (__webpack_require__(1854).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(5146).call)(this, locals)) ? "" : pug_interp) + "\u003Cdiv class=\"sidebar-wrapper left active\" id=\"left-sidebar\"\u003E\u003Cnav class=\"sidebar\"\u003E\u003Cdiv class=\"sidebar-title section\"\u003E\u003Cdiv class=\"section-header\"\u003E\u003Ch5 class=\"header-text mb-0\"\u003EData management\u003Ci class=\"material-icons ml-3\"\u003Estorage\u003C\u002Fi\u003E\u003C\u002Fh5\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\" id=\"session-section\"\u003E";
var targetId = 'session-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header collapsed"}
}, targetId, 'Session management');
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header mt-0\"\u003EImport predefined session";
pug_mixins["tooltip"]("tp_sess-man-imp");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"position-relative\" id=\"session-presets-wrapper\"\u003E\u003Cdiv class=\"loading-select-wrapper overlay\"\u003E\u003Cspan\u003EFetching session...\u003C\u002Fspan\u003E\u003Cdiv class=\"ml-4 spinner-grow\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
pug_mixins["dropdown"]('session-presets', sessionsDic, header = 'Select a preset session to import');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cp class=\"warning-text\" id=\"session-preset-warning-text\"\u003E\u003C\u002Fp\u003E\u003Cp class=\"error-text\" id=\"session-preset-error-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EImport session from a local file";
pug_mixins["tooltip"]("tp_sess-man-loc");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["custom-button"].call({
block: function(){
pug_html = pug_html + " ";
},
attributes: {"class": "mb-0 palette-primary no-focus w-100","id": "load-session","title": "Choose a session file you want to import"}
}, 'Browse files...', 'insert_drive_file');
pug_html = pug_html + "\u003Cp class=\"error-text\" id=\"load-session-error-text\"\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"hidden\"\u003E\u003Cinput id=\"load-session-input\" type=\"file\" accept=\".json\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECreate a new session";
pug_mixins["tooltip"]("tp_sess-man-new");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-textbox"].call({
attributes: {"class": "palette-primary no-focus","title": "Create new session of given name"}
}, 'new-session', 'New session name', 'Create', 'library_add', ariaLabel = '');
pug_html = pug_html + "\u003Cp class=\"error-text\" id=\"new-session-error-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EImported sessions";
pug_mixins["tooltip"]("tp_sess-man-ld");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"accordion-header accordion-subsection-header trash-container\" id=\"sessions-trash\"\u003E \u003Cspan\u003EDrop a session here to remove it\u003Ci class=\"material-icons ml-2\"\u003E" + (pug.escape(null == (pug_interp = 'delete') ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header my-3\"\u003E\u003C\u002Fh6\u003E\u003Cdiv class=\"subsection\" id=\"sessions-container\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ENo session is available\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\" id=\"user-data-section\"\u003E";
var targetId = 'user-data-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header collapsed"}
}, targetId, 'User dataset');
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EImport dataset from a local file";
pug_mixins["tooltip"]("tp_user-data-import");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["custom-button"].call({
block: function(){
pug_html = pug_html + " ";
},
attributes: {"class": "mb-0 palette-primary no-focus w-100","id": "load-user-data","title": "Choose the input dataset you want to load"}
}, 'Browse files...', 'insert_drive_file');
pug_html = pug_html + "\u003Cp class=\"error-text\" id=\"user-data-load-error-text\"\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"hidden\"\u003E\u003Cinput id=\"user-data-load-input\" type=\"file\" accept=\".json,.csv,.tsv\"\u003E\u003C\u002Fdiv\u003E\u003Cp class=\"error-text\" id=\"user-data-error-text\"\u003E\u003C\u002Fp\u003E\u003Cp class=\"warning-text\" id=\"user-data-warning-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cp\u003E\u003Ca href=\"\u002Fdata\u002Fexample_dataset.json\" download=\"\"\u003EExample JSON dataset\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003Ca href=\"\u002Fdata\u002Fexample_dataset.csv\" download=\"\"\u003EExample CSV dataset\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\" id=\"queries-section\"\u003E";
var targetId = 'query-creator';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header collapsed"}
}, targetId, 'Database queries');
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header mt-0\"\u003EChoose data source";
pug_mixins["tooltip"]("tp_db-q-db");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown"]("select-query-dataset", datasetsDic, null, null);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDatabase query filters";
pug_mixins["tooltip"]("tp_db-q-flt");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus w-100 justify-content-center mx-auto mb-2","id": "query-filters-button","data-toggle": "modal","data-target": "#query-builder-modal","title": "Define query filters"}
}, "Query builder", "filter_list", 0);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDatabase query content";
pug_mixins["tooltip"]("tp_db-q-body");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Ctextarea class=\"form-control\" id=\"query-call-textarea\" rows=\"10\"\u003E\u003C\u002Ftextarea\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus w-100 justify-content-center mx-auto mt-2 mb-0","id": "query","title": "Send the query and import dataset"}
}, "Send query", "search", null, true, "Fetching dataset...");
pug_html = pug_html + "\u003Cp class=\"error-text\" id=\"query-call-error-text\"\u003E\u003C\u002Fp\u003E\u003Cp class=\"warning-text\" id=\"query-call-warning-text\"\u003E \u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Chr class=\"section-breaker\"\u003E\u003Cdiv class=\"section\" id=\"datasets-section\"\u003E ";
var targetId = 'imported-datasets';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header"}
}, targetId, 'Loaded datasets');
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"accordion-header accordion-subsection-header trash-container\" id=\"dataset-trash\"\u003E \u003Cspan\u003EDrop a dataset here to remove it\u003Ci class=\"material-icons ml-2\"\u003E" + (pug.escape(null == (pug_interp = 'delete') ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header mt-2\"\u003E\u003C\u002Fh6\u003E\u003Cdiv class=\"subsection\" id=\"datasets-container\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ENo dataset is available\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fnav\u003E\u003Cdiv class=\"sidebar-trigger\" title=\"Toggle data management panel\"\u003E\u003Cdiv class=\"label\"\u003E \u003Cspan\u003E data management\u003Ci class=\"material-icons ml-3\"\u003Estorage\u003C\u002Fi\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E";
pug_mixins["toggle-arrow"].call({
attributes: {"class": "sidebar-arrow active"}
}, "left");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cmain role=\"main\"\u003E";
pug_mixins["timeline"] = pug_interp = function(timelineId, sliderClass = "simple", presentSwitchId=false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
let widthCss = presentSwitchId === false ? 'width: 100%' : 'width: 87%'; 
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["timeline-wrapper",sliderClass], [false,true]),"style": pug.escape(pug.style(widthCss))},attributes]), true)) + "\u003E\u003Cinput" + (" class=\"session-option js-range-slider\""+pug.attr("id", timelineId, true, true)+" type=\"text\" name=\"timeline\" value=\"\"") + "\u003E\u003C\u002Fdiv\u003E";
if (presentSwitchId) {
pug_html = pug_html + "\u003Cdiv class=\"present-switch-wrapper\" title=\"Toggle visibility of the contemporary samples\"\u003E";
var iconHtmlFunc = (iconName) => `<i class="material-icons">${iconName}</i>`;
var timeIconHtml = iconHtmlFunc('hourglass_empty');
pug_html = pug_html + "\u003Cinput" + (" class=\"session-option\""+pug.attr("id", presentSwitchId, true, true)+" type=\"checkbox\" checked=\"\" data-toggle=\"toggle\""+pug.attr("data-on", `Present ${ timeIconHtml }`, true, true)+pug.attr("data-off", `No Present ${ timeIconHtml }`, true, true)+" data-onstyle=\"present-time\" data-offstyle=\"present-time\"") + "\u003E\u003C\u002Fdiv\u003E";
}
};
pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_mixins["gradient-input"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "gradient-input"},attributes]), true)) + "\u003E\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + ((null == (pug_interp = (__webpack_require__(180).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(1495).call)(this, locals)) ? "" : pug_interp));
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["accordion-header-button"] = pug_interp = function(targetId, title, iconId, iconClass, isCollapsed = false, isButtonPressed = true, iconTitle="", classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"accordion-wrapper group\" role=\"group\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: pug.merge([{"class": "m-0 p-0"},attributes])
}, iconId, iconClass, '', isButtonPressed, iconTitle = iconTitle);
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["button-accordion-header","accordion-header","collapsable","collapsed",classes], [false,false,false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["accordion-header","collapsable",classes], [false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};





















pug_mixins["accordion-header-settings"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["query-builder"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "query-builder","id": "query-builder"},attributes]), true)) + "\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["selectOption"] = pug_interp = function(el, key){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var optionsAttributes = {};
if(el.datatokens) optionsAttributes['data-tokens'] = el.datatokens;
if(el.disabled) optionsAttributes['disabled'] = el.disabled;
if(el.subtext) optionsAttributes['data-subtext'] = el.subtext;
if(el.selected) optionsAttributes['selected'] = el.selected;
if(el.content) optionsAttributes['data-content'] = el.content;
if(el.title) optionsAttributes['title'] = el.title;
if(el.attributes)
	Object.keys(el.attributes).forEach((attribute) => {
		optionsAttributes[attribute] = el.attributes[attribute];
	});

pug_html = pug_html + "\u003Coption" + (pug.attrs(pug.merge([{"value": pug.escape(key)},optionsAttributes]), true)) + "\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Foption\u003E";
};
pug_mixins["dropdown-no-picker"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","data-virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["dropdown"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"class": "selectpicker","data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["simple-radiobuttons"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["simple-radiobuttons-inline"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = '', classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (pug.attr("class", pug.classes(["form-control",classes], [false,true]), false, true)+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cdiv class=\"spinner-border status hidden\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-input"] = pug_interp = function(id, buttonText, spinnerValue, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cdiv class=\"form-control p-0 h-100 border-0\"\u003E\u003Cinput" + (pug.attr("id", id, true, true)+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("value", spinnerValue, true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-icon-textbox"] = pug_interp = function(id, placeholder, buttonText, textIconName, buttIconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group icon-button-textbox-wrapper\"\u003E\u003Cspan class=\"form-control p-0\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append icon-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = textIconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fspan\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, buttIconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + ((null == (pug_interp = (__webpack_require__(1128).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(8134).call)(this, locals)) ? "" : pug_interp));
var featuresSections = [
	{'name': 'Remains', 'id': 'remains-modal-remains-accord'}, 
	{'name': 'Settlement phases', 'id': 'phase-modal-remains-accord'}, 
	{'name': 'Archeological sites', 'id': 'site-modal-remains-accord'}
];

var fileTypes = {
	'JSON': {
		'label': 'JSON'
	},
	'CSV': {
		'label': 'CSV'
	}
}

var imageTypes = {
	'jpeg': {
		'label': 'JPG'
	},
	'png': {
		'label': 'PNG'
	},
	'pdf': {
		'label': 'PDF'
	}
}


pug_mixins["query-builder-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "query-builder-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "staticBackdropLabel","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-xl\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"staticBackdropLabel\"\u003EQuery builder\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E";
pug_mixins["query-builder"]();
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "submit-rules"}
}, 'Apply');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","data-dismiss": "modal"}
}, 'Close');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["download-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "download-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "downloadTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"downloadTitle\"\u003EDownload features\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose file type\u003C\u002Fh6\u003E";
pug_mixins["simple-radiobuttons"]('download-filetype', fileTypes, 'JSON');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "download-button"}
}, 'Download');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","data-dismiss": "modal"}
}, 'Close');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["gradient-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "map-modal","id": "gradient-modal","title": "Modify gradient appearance"},attributes]), true)) + "\u003E\u003Cdiv class=\"section-content\"\u003E\u003Cdiv class=\"gradient-input-wrapper p-4\"\u003E";
pug_mixins["gradient-input"].call({
attributes: {"class": "mb-4","id": "legend-layer-gradient"}
});
pug_html = pug_html + "\u003Cp\u003EClick on a handle to edit it's color\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-layer-gradient-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["pattern-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "map-modal","id": "pattern-modal","title": "Modify pattern appearance"},attributes]), true)) + "\u003E\u003Cdiv class=\"section-content\"\u003E\u003Cdiv class=\"subsection p-3 position-relative\" id=\"legend-region-color-settings\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose color to edit\u003C\u002Fh6\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "mb-3 h-100 w-100 d-block","id": "region-background-color-butt"}
}, "#ff0000", "Edit background");
pug_html = pug_html + "\u003Cdiv id=\"legend-region-background-color-picker\"\u003E\u003C\u002Fdiv\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 w-100 d-block","id": "region-pattern-color-butt"}
}, "#ffff00", "Edit pattern");
pug_html = pug_html + "\u003Cdiv id=\"legend-region-pattern-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection p-3 position-relative\" id=\"legend-pattern-setting\" style=\"z-index: 999999\"\u003E\u003Ch6 class=\"subsection-header\"\u003EPattern settings\u003C\u002Fh6\u003E\u003Cp class=\"mt-3 mb-2\"\u003EPattern type\u003C\u002Fp\u003E";
pug_mixins["dropdown-no-picker"]('legend-select-pattern-type', patterns, "Choose a pattern type...");
pug_html = pug_html + "\u003Cp class=\"mt-3 mb-2\"\u003EPattern scale\u003C\u002Fp\u003E\u003Cinput class=\"js-range-slider\" id=\"legend-pattern-scale\" type=\"text\"\u003E\u003Cp class=\"mt-3 mb-2\"\u003EPattern spacing\u003C\u002Fp\u003E\u003Cinput class=\"js-range-slider\" id=\"legend-pattern-spacing\" type=\"text\"\u003E\u003Cp class=\"mt-3 mb-2\"\u003EPattern angle\u003C\u002Fp\u003E\u003Cdiv class=\"text-center\" id=\"pattern-anglepicker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["session-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "session-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "sessionTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"sessionTitle\"\u003EChoose data to be preserved in the session\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cform\u003E";
// iterate sessionDataTypes
;(function(){
  var $$obj = sessionDataTypes;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
pug_html = pug_html + "\u003Cdiv" + (" class=\"form-group row session-data-type mb-3\""+pug.attr("id", `session-data-${key}`, true, true)) + "\u003E\u003Cdiv class=\"col-6\"\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"col-6\"\u003E";
if (el.options) {
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);

}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key}-input`
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E\u003Ci\u003Eall\u003C\u002Fi\u003E\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
pug_html = pug_html + "\u003Cdiv" + (" class=\"form-group row session-data-type mb-3\""+pug.attr("id", `session-data-${key}`, true, true)) + "\u003E\u003Cdiv class=\"col-6\"\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"col-6\"\u003E";
if (el.options) {
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);

}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key}-input`
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E\u003Ci\u003Eall\u003C\u002Fi\u003E\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);

pug_html = pug_html + "\u003Cdiv class=\"form-group row\"\u003E\u003Cdiv class=\"col-sm-10\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary-light no-focus","id": "session-modal-select-all"}
}, 'Select all options');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 palette-tertiary-light no-focus","id": "session-modal-deselect-all"}
}, 'Deselect all options');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fform\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-primary no-focus","id": "session-modal-button-confirm"}
}, 'Confirm');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "session-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["photo-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "photo-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "photoTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content shadow\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"photoTitle\"\u003EDownload current map view as an image\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EImage file type\u003C\u002Fh6\u003E";
pug_mixins["simple-radiobuttons"]('photo-image-type', imageTypes, 'jpeg');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "photo-modal-button-confirm"}
}, 'Download');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "photo-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["basemap-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "basemap-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "basemap-appearance","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content shadow\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"basemap-appearance\"\u003E \u003C\u002Fh5\u003EChange&nbsp;\u003Cspan id=\"basemap-appearance-name\"\u003E\u003C\u002Fspan\u003E&nbsp;basemap appearance settings\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cdiv class=\"subsection basemap-layers-visibility\"\u003E\u003Ch6 class=\"subsection-header\"\u003EBasemap layers\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "basemap-layer-toggle","toggle-visibility": "basemap-light-water"}
}, 'basemap-light-setting-water', 'simple', "show water", true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "basemap-layer-toggle","toggle-visibility": "basemap-light-boundaries"}
}, 'basemap-light-setting-boundaries', 'simple', "show contemporary political boundaries", false);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "basemap-layer-toggle","toggle-visibility": "basemap-light-labels"}
}, 'basemap-light-setting-labels', 'simple', "show name labels", false);
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003EBasemap colors \u003C\u002Fh6\u003E\u003Cp\u003ESet background color\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-background-color","target-layer": "map-background"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cp\u003ESet water reservoirs color\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-water-color","target-layer": "basemap-light-water"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cp\u003ESet boundaries color\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-boundaries-color","target-layer": "basemap-light-boundaries"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cp\u003ESet labels colors\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-labels-color","target-layer": "basemap-light-labels"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "basemap-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["map-features-settings-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "map-features-settings-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "features-appearance","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content shadow\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"basemap-features\"\u003EChange map features appearance settings\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ETitle settings\u003C\u002Fh6\u003E\u003Cdiv\u003E\u003Cspan\u003EMap title\u003C\u002Fspan\u003E";
pug_mixins["icon-textbox"].call({
attributes: {"class": "map-features-textbox w-50","event-target": "#map-title","option-name": "map-title"}
}, 'map-title-textbox', 'Type in map title...', 'edit', 'map-title');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3\"\u003E\u003Cspan\u003EMap subtitle\u003C\u002Fspan\u003E";
pug_mixins["icon-textbox"].call({
attributes: {"class": "map-features-textbox w-50","event-target": "#map-subtitle","option-name": "map-subtitle"}
}, 'map-subtitle-textbox', 'Type in map subtitle...', 'edit', 'map-subtitle');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "basemap-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + "\u003Cdiv class=\"pt-4 overflow-hidden active-left active-right\" id=\"content-wrapper\"\u003E\u003Cdiv class=\"mb-4 position-relative\"\u003E\u003Cdiv id=\"loading-session-wrapper\"\u003E\u003Cdiv class=\"loading-content overlay d-flex align-items-center justify-content-center\" style=\"z-index: 2; font-size: 1.5rem;\"\u003E\u003Cspan\u003ELoading session...\u003C\u002Fspan\u003E\u003Cdiv class=\"ml-4 spinner-grow\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"map-wrapper\"\u003E";
pug_mixins["pattern-modal"]();
pug_mixins["gradient-modal"]();
pug_mixins["photo-modal"]();
pug_mixins["basemap-modal"]();
pug_mixins["map-features-settings-modal"]();
pug_html = pug_html + "\u003Cdiv class=\"map\" id=\"map\"\u003E \u003C\u002Fdiv\u003E\u003Cdiv class=\"viewport-wrapper container-fluid\" id=\"top-controls-wrapper\"\u003E\u003Cdiv class=\"p-1 row\" id=\"top-controls-container\"\u003E\u003Cdiv class=\"map-panel\" id=\"map-controls-panel\"\u003E\u003Cdiv class=\"map-control\" id=\"zoom-slider\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-control d-none\" id=\"print-control\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel pt-3\"\u003E\u003Cdiv id=\"map-options-menu-wrapper\" style=\"pointer-events: auto;\"\u003E";
pug_mixins["custom-button-dropdown"].call({
attributes: {"class": "palette-tertiary-light no-focus position-relative no-text","style": "z-index:10;"}
}, 'map-options-menu', mapToolbox, text = '', iconName = 'settings', title="Show map settings");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-control\" id=\"zoom\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel pt-3 col text-center\"\u003E\u003Cdiv class=\"hidden\" id=\"map-title-wrapper\"\u003E\u003Cdiv\u003E\u003Cspan id=\"map-title\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003Cdiv\u003E\u003Cspan id=\"map-subtitle\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel pt-3\" id=\"legend-panel\"\u003E\u003Cdiv class=\"map-control\" id=\"legend-wrapper\"\u003E";
var targetId = 'legend';
pug_mixins["accordion-header"].call({
attributes: {"class": "","id": "legend-header"}
}, targetId, 'Legend');
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv id=\"legend-layer-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-attribute-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-content-wrapper\"\u003E\u003Cdiv id=\"legend-content\"\u003E\u003Cdiv class=\"hidden\" id=\"legend-layers\"\u003E\u003Ch6 class=\"section-header\"\u003EData layers\u003C\u002Fh6\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-2 hidden\" id=\"legend-regions\"\u003E\u003Ch6 class=\"section-header\"\u003ERegions\u003C\u002Fh6\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-attributes\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"viewport-wrapper\" id=\"bottom-controls-wrapper\"\u003E\u003Cdiv class=\"p-2 mb-5\"\u003E\u003Cdiv class=\"map-panel float-left w-50\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel float-right w-50\"\u003E\u003Cdiv class=\"position-relative\" id=\"map-scale\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"time-controls-wrapper\"\u003E";
pug_mixins["timeline"]('timeline', "time-theme", "present-switch");
pug_mixins["timeline"]('timeline-range', "range-theme");
pug_html = pug_html + ("\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fmain\u003E" + (null == (pug_interp = (__webpack_require__(8634).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(9156).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(9630).call)(this, locals)) ? "" : pug_interp));
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = '', classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (pug.attr("class", pug.classes(["form-control",classes], [false,true]), false, true)+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cdiv class=\"spinner-border status hidden\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-input"] = pug_interp = function(id, buttonText, spinnerValue, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cdiv class=\"form-control p-0 h-100 border-0\"\u003E\u003Cinput" + (pug.attr("id", id, true, true)+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("value", spinnerValue, true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-icon-textbox"] = pug_interp = function(id, placeholder, buttonText, textIconName, buttIconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group icon-button-textbox-wrapper\"\u003E\u003Cspan class=\"form-control p-0\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append icon-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = textIconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fspan\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, buttIconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_mixins["simple-radiobuttons"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["simple-radiobuttons-inline"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fspan\u003E";
};
pug_mixins["tooltip"] = pug_interp = function(id, placement="top", iconName="help_outline"){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (" class=\"archeo-tooltip\""+pug.attr("tooltip-id", id, true, true)+" type=\"button\""+pug.attr("data-tippy-placement", placement, true, true)) + "\u003E\u003Ci class=\"material-icons tooltip-icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
};
pug_html = pug_html + "\u003Cdiv class=\"sidebar-wrapper right active\" id=\"right-sidebar\"\u003E\u003Cnav class=\"sidebar\"\u003E\u003Cdiv class=\"sidebar-title section\"\u003E\u003Cdiv class=\"section-header\"\u003E\u003Ch5 class=\"header-text mb-0\"\u003EMap management\u003Ci class=\"material-icons ml-3\"\u003Emap\u003C\u002Fi\u003E\u003C\u002Fh5\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\" id=\"grouping-section\"\u003E";
var targetId = 'clustering-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header collapsed"}
}, targetId, 'Map grouping', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content object-content sidebar-setting\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"object-container\"\u003E";
var targetId = 'features-clustering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "accordion-subsection-header collapsed"}
}, targetId, 'Spatial clustering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse session-option\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESpatial clustering modes";
pug_mixins["tooltip"]("tp_sp-cl-modes");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "clustering-mode-select session-option","multiple": true}
}, 'clustering-mode-select', clusteringDic, 'Choose modes...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv id=\"cluster-settings-wrapper\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECluster appearance";
pug_mixins["tooltip"]("tp_sp-cl-ap");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('region-show', 'simple session-option', "always show cluster boundaries", false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClustering modes options\u003C\u002Fh6\u003E\u003Cdiv class=\"card settings\" id=\"distance-clustering-wrapper\"\u003E";
var targetId = 'distance-clustering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Distance clustering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClustering range";
pug_mixins["tooltip"]("tp_sp-cl-range");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting session-option js-range-slider clustering-slider\" id=\"clustering-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection distance-slider-wrapper\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECluster object position";
pug_mixins["tooltip"]("tp_sp-cl-dist");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting session-option js-range-slider distance-slider\" id=\"distance-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"card settings\" id=\"region-clustering-wrapper\"\u003E";
targetId = 'region-clustering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Region clustering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClusters placement\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('cluster-at-centroid', 'simple session-option', "at region's centroid", true);
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003EClusters labels appearance\u003C\u002Fh6\u003E\u003Cspan\u003EPlace region labels\u003C\u002Fspan\u003E";
pug_mixins["simple-radiobuttons"].call({
attributes: {"class": "session-option"}
}, 'region-label-position', regionsLabel, 'cluster');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"object-container\"\u003E";
var targetId = 'attributes-clustering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "accordion-subsection-header collapsed"}
}, targetId, 'Attributes grouping', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse session-option\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose an attribute";
pug_mixins["tooltip"]("tp_att-cl-sl");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-cluster-attribute"}
}, 'select-cluster-attribute', {}, 'Choose an attribute...');
pug_html = pug_html + "\u003Cdiv class=\"mt-3 d-none\"\u003E";
pug_mixins["dropdown"].call({
attributes: {"class": "select-cluster-attribute-type"}
}, 'select-cluster-attribute-type', {}, 'Choose a type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-3\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-tertiary-light no-focus w-100 mb-0","id": "attribute-clustering-reset","disabled": "","title": "Remove all groups"}
}, 'Reset settings', 'settings_backup_restore');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden mb-2\" id=\"attribute-grouping-wrapper\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EValues & groups browser ";
pug_mixins["tooltip"]("tp_att-cl-bw");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["icon-textbox"]('cluster-group-search', 'Filter values...', 'filter_list', 'group-filter');
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3 small-checkbox"}
}, 'group-cluster-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cdiv class=\"mb-1\"\u003E\u003Cspan class=\"mr-2\"\u003EShowing:\u003C\u002Fspan\u003E";
pug_mixins["simple-radiobuttons-inline"]('attributes-clustering-object', attributesClusteringPanelChoice, 'attributes');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cselect class=\"form-control filter-box\" id=\"select-attribute-cluster-browser\" multiple=\"\"\u003E\u003C\u002Fselect\u003E\u003Cp class=\"message-text mt-2\" id=\"modifying-message-text\"\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"mt-2\"\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "attribute-cluster-select-all","style": "width: 48%;","title": "Select all values\u002Fgroups currently visible in the browser"}
}, 'Select all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "attribute-cluster-unselect-all","style": "width: 48%;","title": "Deselect all values\u002Fgroups currently visible in the browser"}
}, 'Deselect all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "w-100 mb-0 float-left palette-tertiary-light no-focus","id": "attribute-cluster-select-invert","title": "Invert selection of all values\u002Fgroups currently visible in the browser"}
}, 'Invert selection');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden\" id=\"tree-clustering-select-panel\"\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-icon-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus","title": "Select all values that are ancestors of given value in the data tree"}
}, 'attribute-clustering-ancestors', 'Ancestors of...', 'Select', 'search', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-icon-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus","title": "Select all values that are descendants of given value in the data tree"}
}, 'attribute-clustering-descendants', 'Descendants of...', 'Select', 'search', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\" id=\"attributes-clustering-attribute-panel\"\u003E\u003Ch6 class=\"subsection-header\"\u003EAdd values to group";
pug_mixins["tooltip"]("tp_att-cl-gp");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"mt-2\"\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-textbox"].call({
attributes: {"class": "palette-primary no-focus","title": "Add selected values to the given group, which will be created or expanded"}
}, 'attribute-cluster-new-group', 'Group\'s name...', 'Add', 'add', ariaLabel = '');
pug_html = pug_html + "\u003Cp class=\"error-text mt-2\" id=\"new-group-error-text\"\u003E\u003C\u002Fp\u003E\u003Cp class=\"message-text mt-2\" id=\"new-group-message-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2 hidden\" id=\"attributes-clustering-group-panel\"\u003E\u003Ch6 class=\"subsection-header\"\u003EManage groups";
pug_mixins["tooltip"]("tp_att-cl-mg");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-primary no-focus","id": "group-modify","style": "width: 46.5%;","title": "Change content of the group by excluding some of it's values"}
}, 'Modify group');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "group-remove","style": "width: 50.5%;","title": "Remove selected groups"}
}, 'Remove groups');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2 hidden\" id=\"grouping-buttons-panel\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "attribute-cluster-group-all","style": "width: 48%;","title": "Add all selected values to the group"}
}, 'Group all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "attribute-cluster-ungroup-all","style": "width: 48%;","title": "Exclude all selected values from the group"}
}, 'Ungroup all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cp class=\"error-text mt-2\" id=\"manage-group-error-text\"\u003E\u003C\u002Fp\u003E\u003Cp class=\"message-text mt-2\" id=\"manage-group-message-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection hidden mt-4\" id=\"tree-level-clustering\"\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'automatic-grouping';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Automatic grouping', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection mb-2\"\u003E\u003Cp\u003EAutomatic grouping \u003Cb\u003Eoverwrites \u003C\u002Fb\u003Eall previous grouping settings.\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"mb-2 subsection-header\"\u003EGroups appearance";
pug_mixins["tooltip"]("tp_att-cl-ga");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('attribute-clustering-prefix', 'Add prefix to group name...', 'edit', 'group-prefix');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2\"\u003E\u003Ch6 class=\"mb-2 subsection-header\"\u003EGroup by a tree level";
pug_mixins["tooltip"]("tp_att-cl-tl");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting session-option js-range-slider clustering-slider\" id=\"attribute-clustering-tree-level-slider\" type=\"text\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus mt-2 mb-3 ml-auto d-block","id": "attribute-clustering-tree-level-button","title": "Automatically group values"}
}, 'Group');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2\"\u003E\u003Ch6 class=\"mb-2 subsection-header\"\u003EGroup by root word of length";
pug_mixins["tooltip"]("tp_att-cl-rw");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["button-input"].call({
attributes: {"title": "Automatically group values"}
}, 'attribute-clustering-root-word-input', 'Group', 1);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\" id=\"filtering-section\"\u003E";
var targetId = 'filtering-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header collapsed"}
}, targetId, 'Map filtering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"object-container\"\u003E";
var targetId = 'time-filter';
pug_mixins["accordion-header-button"].call({
attributes: {"class": "accordion-subsection-header collapsed"}
}, targetId, 'Time filter', targetId+"_trigger", 'checkbox session-option', false, true, iconTitle="Toggle the filter");
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse session-option\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESet time filter";
pug_mixins["tooltip"]("tp_time-flt-inter");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["years-range-spinner"].call({
attributes: {"id": "filter-from-to"}
});
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESet time filter's range";
pug_mixins["tooltip"]("tp_time-flt-rang");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["years-range-spinner"].call({
attributes: {"id": "filter-min-max"}
});
pug_html = pug_html + "\u003Cp class=\"mt-3\"\u003EMinimal year is \u003Cspan class=\"years-text\"\u003E" + (pug.escape(null == (pug_interp = minYear) ? "" : pug_interp)) + ", \u003C\u002Fspan\u003E, maximal is \u003Cspan class=\"years-text\"\u003E" + (pug.escape(null == (pug_interp = maxYear) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E.\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFiltering options";
pug_mixins["tooltip"]("tp_time-flt-flt");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('time-filter-present-toggle', 'simple session-option', 'show present time data', true);
pug_mixins["icon-checkbox"]('time-filter-regions-filter-toggle', 'simple session-option', 'do filter regions by time', true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EAppearance options";
pug_mixins["tooltip"]("tp_time-flt-app");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('time-filter-propability-toggle', 'simple session-option', 'show time inclusion', true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EOptimization options";
pug_mixins["tooltip"]("tp_time-flt-opt");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('time-filter-onfinish-toggle', 'simple session-option', 'event only on release', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"object-container mt-3\"\u003E";
var targetId = 'attribute-filter';
pug_mixins["accordion-header-button"].call({
attributes: {"class": "accordion-subsection-header collapsed"}
}, targetId, 'Attribute filter', targetId+"_trigger", 'checkbox session-option', false, true, iconTitle="Toggle the filter");
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose an attribute to filter";
pug_mixins["tooltip"]("tp_att-flt-sl");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-filter-attribute session-option"}
}, 'select-filter-attribute', {}, 'Choose an attribute...');
pug_html = pug_html + "\u003Cdiv class=\"mt-3 d-none\"\u003E";
pug_mixins["dropdown"].call({
attributes: {"class": "select-filter-attribute-type"}
}, 'select-filter-attribute-type', {}, 'Choose a type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden\" id=\"attribute-filter-wrapper\"\u003E\u003Cdiv class=\"subsection\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-3"}
}, 'attribute-filter-switch', 'simple', 'is filtering active', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EValues browser";
pug_mixins["tooltip"]("tp_att-flt-bw");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cfieldset id=\"attribute-filtering-panel\" disabled=\"disabled\"\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-tertiary-light no-focus w-100","id": "attribute-filter-reset","title": "Make all values pass through the filter"}
}, 'Reset settings', 'settings_backup_restore');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["icon-textbox"]('filter-attribute-search', 'Filter attributes...', 'filter_list', 'attribute-filter');
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3 small-checkbox"}
}, 'attribute-filter-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cselect class=\"form-control filter-box\" id=\"select-attribute-filter-browser\" multiple=\"\"\u003E\u003C\u002Fselect\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "attribute-filter-select-all","style": "width: 48%;","title": "Select all values currently visible in the browser"}
}, 'Select all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "attribute-filter-unselect-all","style": "width: 48%;","title": "Deselect all values currently visible in the browser"}
}, 'Deselect all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "w-100 mb-0 float-left palette-tertiary-light no-focus","id": "attribute-filter-select-invert","title": "Invert all values currently visible in the browser"}
}, 'Invert selection');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden\" id=\"tree-filter-select-panel\"\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-icon-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus","title": "Select all values that are ancestors of given value in the data tree"}
}, 'attribute-filtering-ancestors', 'Ancestors of...', 'Select', 'search', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-icon-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus","title": "Select all values that are descendants of given value in the data tree"}
}, 'attribute-filtering-descendants', 'Descendants of...', 'Select', 'search', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus positive","id": "attribute-filter-unfilter-all","style": "width: 48%;","title": "Filter all selected values"}
}, 'Filter');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus negative","id": "attribute-filter-filter-all","style": "width: 48%;","title": "Filter out all selected values"}
}, 'Filter out');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"subsection hidden mt-4\" id=\"tree-level-filtering\"\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'tree-filtering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Automatic filtering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection mb-2\"\u003E\u003Cp\u003EAutomatic grouping \u003Cb\u003Eoverwrites \u003C\u002Fb\u003Eall previous grouping settings.\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"mb-2 subsection-header\"\u003EFilter by a tree level";
pug_mixins["tooltip"]("tp_att-flt-tree");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting session-option js-range-slider filtering-slider\" id=\"attribute-filtering-tree-level-slider\" type=\"text\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus mt-2 mb-3 ml-auto d-block","id": "attribute-filtering-tree-level-button","title": "Automatically filter values"}
}, 'Filter');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"subsection hidden mt-4\" id=\"admixture-filtering\"\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'admixture-filtering-accordion';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Filtering by quantity', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"mb-2 subsection-header\"\u003EFilter by proportions";
pug_mixins["tooltip"]("tp_att-flt-pr");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"subsection\" id=\"admixture-filtering-options\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Ffieldset\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"object-container mt-3\"\u003E";
var targetId = 'region-filter';
pug_mixins["accordion-header-button"].call({
attributes: {"class": "accordion-subsection-header collapsed"}
}, targetId, 'Region filter', targetId+"_trigger", 'checkbox session-option', false, true, iconTitle="Toggle the filter");
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose a region type to filter";
pug_mixins["tooltip"]("tp_reg-flt-sl");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-filter-region-type session-option"}
}, 'select-filter-region', {}, 'Choose a region type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden\" id=\"region-filter-wrapper\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"input-group mt-3\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-tertiary-light no-focus w-100","id": "region-filter-reset","title": "Make all regions pass through the filter"}
}, 'Reset settings', 'settings_backup_restore');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header\"\u003EFilter regions";
pug_mixins["tooltip"]("tp_reg-flt-bw");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["icon-textbox"]('filter-region-search', 'Filter regions...', 'filter_list');
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3 small-checkbox"}
}, 'region-filter-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cselect class=\"form-control filter-box\" id=\"select-filter-region-values\" multiple=\"\"\u003E\u003C\u002Fselect\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2\"\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "region-filter-select-all","style": "width: 48%;","title": "Select all regions currently visible in the browser"}
}, 'Select all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "region-filter-unselect-all","style": "width: 48%;","title": "Deselect all regions currently visible in the browser"}
}, 'Deselect all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "w-100 mb-0 float-left palette-tertiary-light no-focus","id": "region-filter-select-invert","title": "Invert all regions currently visible in the browser"}
}, 'Invert selection');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus positive","id": "region-filter-unfilter-all","style": "width: 48%;","title": "Filter all selected regions"}
}, 'Filter');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus negative","id": "region-filter-filter-all","style": "width: 48%;","title": "Filter out all selected regions"}
}, 'Filter out');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Chr class=\"section-breaker\"\u003E\u003Cdiv class=\"section\" id=\"layers-section\"\u003E";
var targetId = 'appearance-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header"}
}, targetId, 'Created map layers');
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"palette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus w-100 h-100 justify-content-center mx-auto","disabled": true,"id": "new-layer-button","title": "Create new data presenting map layer"}
}, "Create a new layer", "library_add", null, true, "Creating layer...");
pug_html = pug_html + "\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"accordion-header accordion-subsection-header trash-container\" id=\"layer-trash\"\u003E \u003Cspan\u003EDrop a layer here to remove it\u003Ci class=\"material-icons ml-2\"\u003E" + (pug.escape(null == (pug_interp = 'delete') ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header\"\u003E\u003C\u002Fh6\u003E\u003Cul class=\"subsection\" id=\"layers-container\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ENo layer is available\u003C\u002Fdiv\u003E\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fnav\u003E\u003Cdiv class=\"sidebar-trigger\" title=\"Toggle map management panel\"\u003E\u003Cdiv class=\"label\"\u003E \u003Cspan\u003E \u003Ci class=\"material-icons mr-3\"\u003Emap\u003C\u002Fi\u003Emap management\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E";
pug_mixins["toggle-arrow"].call({
attributes: {"class": "sidebar-arrow active"}
}, "right");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["accordion-header-button"] = pug_interp = function(targetId, title, iconId, iconClass, isCollapsed = false, isButtonPressed = true, iconTitle="", classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"accordion-wrapper group\" role=\"group\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: pug.merge([{"class": "m-0 p-0"},attributes])
}, iconId, iconClass, '', isButtonPressed, iconTitle = iconTitle);
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["button-accordion-header","accordion-header","collapsable","collapsed",classes], [false,false,false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["accordion-header","collapsable",classes], [false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};





















pug_mixins["accordion-header-settings"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["query-builder"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "query-builder","id": "query-builder"},attributes]), true)) + "\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["selectOption"] = pug_interp = function(el, key){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var optionsAttributes = {};
if(el.datatokens) optionsAttributes['data-tokens'] = el.datatokens;
if(el.disabled) optionsAttributes['disabled'] = el.disabled;
if(el.subtext) optionsAttributes['data-subtext'] = el.subtext;
if(el.selected) optionsAttributes['selected'] = el.selected;
if(el.content) optionsAttributes['data-content'] = el.content;
if(el.title) optionsAttributes['title'] = el.title;
if(el.attributes)
	Object.keys(el.attributes).forEach((attribute) => {
		optionsAttributes[attribute] = el.attributes[attribute];
	});

pug_html = pug_html + "\u003Coption" + (pug.attrs(pug.merge([{"value": pug.escape(key)},optionsAttributes]), true)) + "\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Foption\u003E";
};
pug_mixins["dropdown-no-picker"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","data-virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["dropdown"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"class": "selectpicker","data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["simple-radiobuttons"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["simple-radiobuttons-inline"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = '', classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (pug.attr("class", pug.classes(["form-control",classes], [false,true]), false, true)+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cdiv class=\"spinner-border status hidden\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-input"] = pug_interp = function(id, buttonText, spinnerValue, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cdiv class=\"form-control p-0 h-100 border-0\"\u003E\u003Cinput" + (pug.attr("id", id, true, true)+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("value", spinnerValue, true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-icon-textbox"] = pug_interp = function(id, placeholder, buttonText, textIconName, buttIconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group icon-button-textbox-wrapper\"\u003E\u003Cspan class=\"form-control p-0\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append icon-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = textIconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fspan\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, buttIconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + ((null == (pug_interp = (__webpack_require__(1128).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(8134).call)(this, locals)) ? "" : pug_interp));
var featuresSections = [
	{'name': 'Remains', 'id': 'remains-modal-remains-accord'}, 
	{'name': 'Settlement phases', 'id': 'phase-modal-remains-accord'}, 
	{'name': 'Archeological sites', 'id': 'site-modal-remains-accord'}
];

var fileTypes = {
	'JSON': {
		'label': 'JSON'
	},
	'CSV': {
		'label': 'CSV'
	}
}

var imageTypes = {
	'jpeg': {
		'label': 'JPG'
	},
	'png': {
		'label': 'PNG'
	},
	'pdf': {
		'label': 'PDF'
	}
}


pug_mixins["query-builder-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "query-builder-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "staticBackdropLabel","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-xl\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"staticBackdropLabel\"\u003EQuery builder\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E";
pug_mixins["query-builder"]();
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "submit-rules"}
}, 'Apply');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","data-dismiss": "modal"}
}, 'Close');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["download-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "download-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "downloadTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"downloadTitle\"\u003EDownload features\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose file type\u003C\u002Fh6\u003E";
pug_mixins["simple-radiobuttons"]('download-filetype', fileTypes, 'JSON');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "download-button"}
}, 'Download');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","data-dismiss": "modal"}
}, 'Close');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["gradient-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "map-modal","id": "gradient-modal","title": "Modify gradient appearance"},attributes]), true)) + "\u003E\u003Cdiv class=\"section-content\"\u003E\u003Cdiv class=\"gradient-input-wrapper p-4\"\u003E";
pug_mixins["gradient-input"].call({
attributes: {"class": "mb-4","id": "legend-layer-gradient"}
});
pug_html = pug_html + "\u003Cp\u003EClick on a handle to edit it's color\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-layer-gradient-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["pattern-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "map-modal","id": "pattern-modal","title": "Modify pattern appearance"},attributes]), true)) + "\u003E\u003Cdiv class=\"section-content\"\u003E\u003Cdiv class=\"subsection p-3 position-relative\" id=\"legend-region-color-settings\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose color to edit\u003C\u002Fh6\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "mb-3 h-100 w-100 d-block","id": "region-background-color-butt"}
}, "#ff0000", "Edit background");
pug_html = pug_html + "\u003Cdiv id=\"legend-region-background-color-picker\"\u003E\u003C\u002Fdiv\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 w-100 d-block","id": "region-pattern-color-butt"}
}, "#ffff00", "Edit pattern");
pug_html = pug_html + "\u003Cdiv id=\"legend-region-pattern-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection p-3 position-relative\" id=\"legend-pattern-setting\" style=\"z-index: 999999\"\u003E\u003Ch6 class=\"subsection-header\"\u003EPattern settings\u003C\u002Fh6\u003E\u003Cp class=\"mt-3 mb-2\"\u003EPattern type\u003C\u002Fp\u003E";
pug_mixins["dropdown-no-picker"]('legend-select-pattern-type', patterns, "Choose a pattern type...");
pug_html = pug_html + "\u003Cp class=\"mt-3 mb-2\"\u003EPattern scale\u003C\u002Fp\u003E\u003Cinput class=\"js-range-slider\" id=\"legend-pattern-scale\" type=\"text\"\u003E\u003Cp class=\"mt-3 mb-2\"\u003EPattern spacing\u003C\u002Fp\u003E\u003Cinput class=\"js-range-slider\" id=\"legend-pattern-spacing\" type=\"text\"\u003E\u003Cp class=\"mt-3 mb-2\"\u003EPattern angle\u003C\u002Fp\u003E\u003Cdiv class=\"text-center\" id=\"pattern-anglepicker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["session-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "session-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "sessionTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"sessionTitle\"\u003EChoose data to be preserved in the session\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cform\u003E";
// iterate sessionDataTypes
;(function(){
  var $$obj = sessionDataTypes;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
pug_html = pug_html + "\u003Cdiv" + (" class=\"form-group row session-data-type mb-3\""+pug.attr("id", `session-data-${key}`, true, true)) + "\u003E\u003Cdiv class=\"col-6\"\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"col-6\"\u003E";
if (el.options) {
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);

}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key}-input`
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E\u003Ci\u003Eall\u003C\u002Fi\u003E\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
pug_html = pug_html + "\u003Cdiv" + (" class=\"form-group row session-data-type mb-3\""+pug.attr("id", `session-data-${key}`, true, true)) + "\u003E\u003Cdiv class=\"col-6\"\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"col-6\"\u003E";
if (el.options) {
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_html = pug_html + "\u003Cdiv" + (" class=\"session-data-subtype\""+pug.attr("id", `session-data-${key2}`, true, true)) + "\u003E\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key2}-subdata-${key}`;
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}__${key2}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = el2.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);

}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E";
let inputId = `session-data-${key}-input`
pug_html = pug_html + "\u003Cinput" + (" class=\"form-check-input\""+" type=\"checkbox\""+pug.attr("id", inputId, true, true)+pug.attr("data-name", `${key}`, true, true)+" checked=\"\"") + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", inputId, true, true)) + "\u003E\u003Ci\u003Eall\u003C\u002Fi\u003E\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
    }
  }
}).call(this);

pug_html = pug_html + "\u003Cdiv class=\"form-group row\"\u003E\u003Cdiv class=\"col-sm-10\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary-light no-focus","id": "session-modal-select-all"}
}, 'Select all options');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 palette-tertiary-light no-focus","id": "session-modal-deselect-all"}
}, 'Deselect all options');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fform\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-primary no-focus","id": "session-modal-button-confirm"}
}, 'Confirm');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "session-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["photo-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "photo-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "photoTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content shadow\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"photoTitle\"\u003EDownload current map view as an image\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EImage file type\u003C\u002Fh6\u003E";
pug_mixins["simple-radiobuttons"]('photo-image-type', imageTypes, 'jpeg');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "photo-modal-button-confirm"}
}, 'Download');
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "photo-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["basemap-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "basemap-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "basemap-appearance","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content shadow\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"basemap-appearance\"\u003E \u003C\u002Fh5\u003EChange&nbsp;\u003Cspan id=\"basemap-appearance-name\"\u003E\u003C\u002Fspan\u003E&nbsp;basemap appearance settings\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cdiv class=\"subsection basemap-layers-visibility\"\u003E\u003Ch6 class=\"subsection-header\"\u003EBasemap layers\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "basemap-layer-toggle","toggle-visibility": "basemap-light-water"}
}, 'basemap-light-setting-water', 'simple', "show water", true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "basemap-layer-toggle","toggle-visibility": "basemap-light-boundaries"}
}, 'basemap-light-setting-boundaries', 'simple', "show contemporary political boundaries", false);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "basemap-layer-toggle","toggle-visibility": "basemap-light-labels"}
}, 'basemap-light-setting-labels', 'simple', "show name labels", false);
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003EBasemap colors \u003C\u002Fh6\u003E\u003Cp\u003ESet background color\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-background-color","target-layer": "map-background"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cp\u003ESet water reservoirs color\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-water-color","target-layer": "basemap-light-water"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cp\u003ESet boundaries color\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-boundaries-color","target-layer": "basemap-light-boundaries"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cp\u003ESet labels colors\u003C\u002Fp\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "h-100 basemap-layer-color","id": "basemap-light-labels-color","target-layer": "basemap-light-labels"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "basemap-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["map-features-settings-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "map-features-settings-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "features-appearance","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-lg\"\u003E\u003Cdiv class=\"modal-content shadow\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"basemap-features\"\u003EChange map features appearance settings\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ETitle settings\u003C\u002Fh6\u003E\u003Cdiv\u003E\u003Cspan\u003EMap title\u003C\u002Fspan\u003E";
pug_mixins["icon-textbox"].call({
attributes: {"class": "map-features-textbox w-50","event-target": "#map-title","option-name": "map-title"}
}, 'map-title-textbox', 'Type in map title...', 'edit', 'map-title');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3\"\u003E\u003Cspan\u003EMap subtitle\u003C\u002Fspan\u003E";
pug_mixins["icon-textbox"].call({
attributes: {"class": "map-features-textbox w-50","event-target": "#map-subtitle","option-name": "map-subtitle"}
}, 'map-subtitle-textbox', 'Type in map subtitle...', 'edit', 'map-subtitle');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 mr-2 palette-tertiary no-focus","id": "basemap-modal-button-cancel","data-dismiss": "modal"}
}, 'Cancel');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["query-builder-modal"]();
pug_mixins["download-modal"]();
pug_mixins["session-modal"]();
pug_html = pug_html + ((null == (pug_interp = (__webpack_require__(2975).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(2927).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(7440).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(8634).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(5847).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(6342).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(32).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(5147).call)(this, locals)) ? "" : pug_interp));
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = '', classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (pug.attr("class", pug.classes(["form-control",classes], [false,true]), false, true)+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cdiv class=\"spinner-border status hidden\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-input"] = pug_interp = function(id, buttonText, spinnerValue, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cdiv class=\"form-control p-0 h-100 border-0\"\u003E\u003Cinput" + (pug.attr("id", id, true, true)+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("value", spinnerValue, true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-icon-textbox"] = pug_interp = function(id, placeholder, buttonText, textIconName, buttIconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group icon-button-textbox-wrapper\"\u003E\u003Cspan class=\"form-control p-0\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append icon-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = textIconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fspan\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, buttIconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_mixins["gradient-input"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "gradient-input"},attributes]), true)) + "\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["simple-radiobuttons"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["simple-radiobuttons-inline"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check d-inline-block mr-2\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fspan\u003E";
};
pug_mixins["tooltip"] = pug_interp = function(id, placement="top", iconName="help_outline"){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (" class=\"archeo-tooltip\""+pug.attr("tooltip-id", id, true, true)+" type=\"button\""+pug.attr("data-tippy-placement", placement, true, true)) + "\u003E\u003Ci class=\"material-icons tooltip-icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
};
pug_html = pug_html + "\u003Cdiv\u003E\u003Cli" + (pug.attrs(pug.merge([{"class": "object-container","id": "layer-template","style": "display: none;","layer-id": "","layer-type": "","database-id": ""},attributes]), true)) + "\u003E";
pug_mixins["accordion-header-button"].call({
attributes: {"class": "handle accordion-subsection-header layer-header"}
}, 'layer-template-accordion', 'Layer', 'visibility','visibility', false, true, iconTitle="Toggle layer visibility");
pug_html = pug_html + "\u003Cdiv class=\"show collapse\" id=\"layer-template-accordion\"\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "clone-button mb-3 mr-2 palette-tertiary-light no-focus","title": "Creates a clone of the layer"}
}, 'Clone layer', 'layers', null, true, "Cloning layer...");
pug_html = pug_html + "\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header mt-0\"\u003ELayer name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('layer-name-textbox', 'Type in new layer name...', 'edit', 'layer-name');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer source";
pug_mixins["tooltip"]("tp_layer-src-sl");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-layer-dataset"}
}, 'select-layer-dataset', {}, 'Choose a dataset...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDisplayed attribute";
pug_mixins["tooltip"]("tp_layer-attr-sl");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-attribute"}
}, 'select-attribute', {}, 'Choose an attribute...');
pug_html = pug_html + "\u003Cdiv class=\"mt-3 d-none\"\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-attribute-type"}
}, 'select-attribute-type', {}, 'Choose a type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer type";
pug_mixins["tooltip"]("tp_layer-type-sl");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-layer-type"}
}, 'select-layer-type', layerTypes, 'Choose a layer type...');
pug_html = pug_html + "\u003Cdiv class=\"card settings layer-type-settings mt-3\"\u003E";
targetId = 'layer-type-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Layer type settings', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse position-relative\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"point-settings type-settings d-none position-relative\" style=\"z-index: 11\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E \u003Ch6 class=\"subsection-header\"\u003EPoints appearance";
pug_mixins["tooltip"]("tp_layer-point-app");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'point-appearance-body', 'simple', 'show point\'s body', true);
pug_html = pug_html + "\u003Cp class=\"mb-2 mt-3\"\u003EBody size ratio\u003C\u002Fp\u003E\u003Cinput class=\"setting mb-4 js-range-slider\" id=\"point-appearance-body-size\" type=\"text\"\u003E\u003Cp class=\"mb-2 mt-3\"\u003EStroke size ratio\u003C\u002Fp\u003E\u003Cinput class=\"setting mb-4 js-range-slider\" id=\"point-appearance-outline-size\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"heatmap-settings type-settings d-none position-relative\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EHeatmap radius";
pug_mixins["tooltip"]("tp_layer-heat-rad");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"heatmap-radius\" type=\"text\"\u003E\u003Ch6 class=\"subsection-header\"\u003EHeatmap blur";
pug_mixins["tooltip"]("tp_layer-heat-blur");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"heatmap-blur\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"piechart-settings type-settings d-none position-relative\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELabels appearance";
pug_mixins["tooltip"]("tp_layer-pie-lab");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cspan\u003EShow piechart data labels\u003C\u002Fspan\u003E";
pug_mixins["simple-radiobuttons"].call({
attributes: {"class": "session-option"}
}, 'piechart-label-appearance', piechartsLabel, 'hover');
pug_html = pug_html + "\u003Cdiv class=\"mt-3\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting piechart-label-count-toggle"}
}, 'piechart-label-count-toggle', 'simple', 'show count data', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting piechart-label-percent"}
}, 'piechart-label-percent', 'simple', 'show data percentages', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cp class=\"mb-2 mt-3\"\u003ELabels text size ratio \u003C\u002Fp\u003E\u003Cinput class=\"setting js-range-slider\" id=\"piechart-label-size\" type=\"text\"\u003E\u003Cp class=\"mb-2 mt-3\"\u003ELabels offset ratio\u003C\u002Fp\u003E\u003Cinput class=\"setting js-range-slider\" id=\"piechart-label-offset\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"tag-settings type-settings d-none position-relative\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ETag cloud appearance";
pug_mixins["tooltip"]("tp_layer-tag-app");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'tag-appearance-dots', 'simple', 'append comma to each word', false);
pug_html = pug_html + "\u003Cp class=\"mb-2 mt-3\"\u003EOutline size ratio \u003C\u002Fp\u003E\u003Cinput class=\"setting js-range-slider\" id=\"tag-appearance-outline-size\" type=\"text\"\u003E\u003Cp class=\"mb-2 mt-3\"\u003EFill size ratio\u003C\u002Fp\u003E\u003Cinput class=\"setting js-range-slider\" id=\"tag-appearance-fill-size\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E \u003Ch6 class=\"subsection-header\"\u003ETags placement";
pug_mixins["tooltip"]("tp_layer-tag-plac");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cp class=\"mb-2 mt-2\"\u003EPlacement strategy:\u003C\u002Fp\u003E";
pug_mixins["simple-radiobuttons"]('tag-appearance-strategy', tagStrategies, 'archimedean');
pug_html = pug_html + "\u003Cp class=\"mb-2 mt-3\"\u003EPlacement step size ratio\u003C\u002Fp\u003E\u003Cinput class=\"setting mb-4 js-range-slider\" id=\"tag-appearance-seed\" type=\"text\"\u003E\u003Cp class=\"mb-2 mt-3\"\u003EPadding size ratio \u003C\u002Fp\u003E\u003Cinput class=\"setting js-range-slider\" id=\"tag-appearance-padding\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card-body position-absolute default-message\" style=\"top: 0; z-index: 10\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ELayer type must be chosen first\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer style\u003C\u002Fh6\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'layer-visibility-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Layer appearance', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"layer-name-toggle-wrapper\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer name";
pug_mixins["tooltip"]("tp_layer-app-name");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'layer-name-toggle', 'simple', 'show layer name', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer color";
pug_mixins["tooltip"]("tp_layer-app-color");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "setting layer-color-input w-100 h-100","id": "layer-color-input"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cdiv class=\"layer-color-toggle-wrapper mt-2\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'layer-color-toggle', 'simple', 'show layer color', true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"gradient-input-wrapper\"\u003E";
pug_mixins["gradient-input"].call({
attributes: {"class": "setting layer-gradient-input mb-4","id": "layer-gradient-input"}
});
pug_html = pug_html + "\u003Cp\u003E \u003C\u002Fp\u003EClick on a handle to edit it's color\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3 mb-1\"\u003EOpacity\u003C\u002Fdiv\u003E\u003Cdiv class=\"slider-wrapper\"\u003E\u003Cinput class=\"js-range-slider\" id=\"layer-opacity\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3 mb-1\"\u003EBlending mode\u003C\u002Fdiv\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-layer-blending-mode"}
}, 'select-layer-blending-mode', layerBlendingModes, 'Choose a mode...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection layer-color-pointer-options\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer pointer";
pug_mixins["tooltip"]("tp_layer-app-point");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"layer-color-toggle-wrapper mb-2\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'layer-pointer-toggle', 'simple', 'show pointer', true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings features-position-settings\"\u003E";
targetId = 'features-position';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Feature position', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EOffset angle";
pug_mixins["tooltip"]("tp_layer-pos-ang");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"text-center\" id=\"anglepicker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EOffset position ratio";
pug_mixins["tooltip"]("tp_layer-pos-off");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"feature-offset-slider\" type=\"text\"\u003E\u003Cdiv class=\"layer-color-toggle-wrapper mb-2 mt-2\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'feature-offset-relative-toggle', 'simple', 'is relative to size', true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings features-size-settings\"\u003E";
targetId = 'features-size';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Feature size', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESize range";
pug_mixins["tooltip"]("tp_layer-size-rang");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"features-size-slider\" type=\"text\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFont size ratio";
pug_mixins["tooltip"]("tp_layer-size-font");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"font-size-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'layer-weight';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Data weight', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"weight-appearance-wrapper\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EWeight appearance";
pug_mixins["tooltip"]("tp_layer-w-app");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'weight-by-value', 'simple', 'show weight by a value', true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'weight-by-size', 'simple', 'show weight by size', true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'weight-by-color', 'simple', 'show weight by color intensity', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mb-3\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDisplayed value type";
pug_mixins["tooltip"]("tp_layer-w-val");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["simple-radiobuttons"]('weight-value-display', clustersValue, 'count');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EWeight function";
pug_mixins["tooltip"]("tp_layer-w-fun");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-growth"}
}, 'select-weight-growth', growthFunctions, "Choose a function...");
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003ECount normalization method";
pug_mixins["tooltip"]("tp_layer-w-norm");
pug_html = pug_html + "\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "stand-method"}
}, 'select-stand-method', standardisationMethods, "Choose a method...");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003E \u003Cspan\u003EWeight growth factor (a)\u003C\u002Fspan\u003E";
pug_mixins["tooltip"]("tp_layer-w-growth");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput id=\"weight-growth-factor\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003E \u003Cspan\u003ECount scaling factor (C)\u003C\u002Fspan\u003E";
pug_mixins["tooltip"]("tp_layer-w-scale");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput id=\"weight-scaling-factor\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'small-quantities-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Other grouping', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EGroup below frequency";
pug_mixins["tooltip"]("tp_layer-other-freq");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"others-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2\"\u003E\u003Ch6 class=\"subsection-header\"\u003EGroup below count";
pug_mixins["tooltip"]("tp_layer-other-cn");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"others-count-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'values-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Features filtering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EValues browser";
pug_mixins["tooltip"]("tp_layer-flt-bw");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-tertiary-light no-focus w-100","id": "layer-attribute-filter-reset"}
}, 'Reset settings', 'settings_backup_restore');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["icon-textbox"]('layer-filter-attribute-search', 'Filter attributes...', 'filter_list', 'attribute-filter');
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3 small-checkbox"}
}, 'layer-attribute-filter-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cselect class=\"select-value form-control filter-box\" id=\"layer-select-attribute-filter-browser\" multiple=\"\"\u003E\u003C\u002Fselect\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "layer-attribute-filter-select-all","style": "width: 48%;","title": "Select all values currently visible in the browser"}
}, 'Select all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "layer-attribute-filter-unselect-all","style": "width: 48%;","title": "Deselect all values currently visible in the browser"}
}, 'Deselect all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "w-100 mb-0 float-left palette-tertiary-light no-focus","id": "layer-attribute-filter-select-invert","title": "Invert all values currently visible in the browser"}
}, 'Invert selection');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus positive","id": "layer-attribute-filter-unfilter-all","style": "width: 48%;","title": "Filter all selected values"}
}, 'Filter');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus negative","id": "layer-attribute-filter-filter-all","style": "width: 48%;","title": "Filter out all selected values"}
}, 'Filter out');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden\" id=\"tree-filter-select-panel\"\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-icon-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus"}
}, 'layer-attribute-filtering-ancestors', 'Ancestors of...', 'Select', 'search', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["button-icon-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus"}
}, 'layer-attribute-filtering-descendants', 'Descendants of...', 'Select', 'search', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003C\u002Fdiv\u003E\u003Cdiv\u003E\u003Cli" + (pug.attrs(pug.merge([{"class": "dataset object-container","id": "dataset-template","style": "display: none;"},attributes]), true)) + "\u003E";
pug_mixins["accordion-header-button"].call({
attributes: {"class": "handle accordion-subsection-header collapsed"}
}, 'dataset-template-accordion', 'Dataset', 'file_download', 'file_download', false, true, iconTitle="Download the dataset associated data");
pug_html = pug_html + "\u003Cdiv class=\"collapse\" id=\"dataset-template-accordion\"\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header mt-0\"\u003ESampling";
pug_mixins["tooltip"]("tp_ld-dt-samp");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"dataset-sample-size-slider\" type=\"text\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "sample-button mb-1 mt-2 w-100 palette-tertiary-light no-focus","title": "Randomly sample dataset"}
}, 'Sample dataset', 'colorize', null, true, "Sampling dataset...");
pug_mixins["custom-button"].call({
attributes: {"class": "shuffle-button mb-1 mt-2 w-100 palette-tertiary-light no-focus","title": "Shuffle dataset's samples"}
}, 'Shuffle samples', 'shuffle', null, true, "Shuffling samples...");
pug_html = pug_html + "\u003Cp class=\"sampling-message-text message-text mt-2\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDataset name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('dataset-name-textbox', 'Type in new dataset name...', 'edit');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EMetadata\u003C\u002Fh6\u003E\u003Ctable class=\"table table-striped table-bordered meta-table\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003EDating range\u003C\u002Fth\u003E\u003Ctd id=\"dataset-dating\"\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003ESize\u003C\u002Fth\u003E\u003Ctd\u003E\u003Cspan id=\"dataset-size\"\u003E\u003C\u002Fspan\u003E\u003Cspan\u003E&nbsp;features\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003EData source\u003C\u002Fth\u003E\u003Ctd id=\"dataset-database\"\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003EObject type\u003C\u002Fth\u003E\u003Ctd id=\"dataset-object-type\"\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003C\u002Ftbody\u003E\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDataset query";
pug_mixins["tooltip"]("tp_ld-dt-query");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Ctextarea class=\"form-control dataset-query-textarea\" id=\"dataset-query-textarea\" rows=\"10\" readonly\u003E\u003C\u002Ftextarea\u003E\u003Cdiv class=\"mt-2 clearfix\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-right palette-tertiary-light no-focus","id": "dataset-copy-query","title": "Copy dataset query to clipboard"}
}, 'Copy', 'content_copy');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003C\u002Fdiv\u003E\u003Cdiv\u003E\u003Cli" + (pug.attrs(pug.merge([{"class": "dataset object-container","id": "user-dataset-template","style": "display: none;"},attributes]), true)) + "\u003E";
pug_mixins["accordion-header"].call({
attributes: {"class": "handle accordion-subsection-header collapsed"}
}, 'user-dataset-template-accordion', 'User dataset');
pug_html = pug_html + "\u003Cdiv class=\"collapse\" id=\"user-dataset-template-accordion\"\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header mt-0\"\u003ESampling";
pug_mixins["tooltip"]("tp_ld-dt-samp");
pug_html = pug_html + "\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"user-dataset-sample-size-slider\" type=\"text\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "sample-button mb-1 mt-2 w-100 palette-tertiary-light no-focus","title": "Randomly sample dataset"}
}, 'Sample dataset', 'colorize', null, true, "Sampling dataset...");
pug_mixins["custom-button"].call({
attributes: {"class": "shuffle-button mb-1 mt-2 w-100 palette-tertiary-light no-focus","title": "Shuffle dataset's samples"}
}, 'Shuffle samples', 'shuffle', null, true, "Shuffling samples...");
pug_html = pug_html + "\u003Cp class=\"sampling-message-text message-text mt-2\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDataset name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('user-dataset-name-textbox', 'Type in new dataset name...', 'edit');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EMetadata\u003C\u002Fh6\u003E\u003Ctable class=\"table table-striped table-bordered meta-table\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003EDating range\u003C\u002Fth\u003E\u003Ctd id=\"user-dataset-dating\"\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003ESize\u003C\u002Fth\u003E\u003Ctd\u003E\u003Cspan id=\"user-dataset-size\"\u003E\u003C\u002Fspan\u003E\u003Cspan\u003E&nbsp;features\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003EData source\u003C\u002Fth\u003E\u003Ctd\u003E\u003Cspan\u003Euser\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003EObject type\u003C\u002Fth\u003E\u003Ctd\u003E\u003Cspan\u003Ecustom\u003C\u002Fspan\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003C\u002Ftbody\u003E\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003C\u002Fdiv\u003E\u003Cdiv\u003E\u003Cli" + (pug.attrs(pug.merge([{"class": "session object-container","id": "session-template","style": "display: none;"},attributes]), true)) + "\u003E";
pug_mixins["accordion-header-button"].call({
attributes: {"class": "handle accordion-subsection-header session-header"}
}, 'session-template-accordion', 'Session', 'session-activate', 'session-activate', true, false, iconTitle="Load dataset");
pug_html = pug_html + "\u003Cdiv class=\"collapse\" id=\"session-template-accordion\"\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["button-textbox"].call({
attributes: {"class": "palette-tertiary-light no-focus","title": "Export session to the file"}
}, 'session-download', 'Session file name...', 'Export', 'file_download', ariaLabel = '');
pug_html = pug_html + "\u003Cp class=\"save-session-error-text error-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 palette-tertiary-light no-focus w-100","id": "session-save","title": "Update session with current interactive map application state"}
}, 'Save current map state', 'save');
pug_html = pug_html + "\u003Cp class=\"save-state-message-text message-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESession name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('session-name-textbox', 'Type in session name...', 'edit');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EAuthor name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('session-author-textbox', 'Type in author name...', 'edit');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESession description\u003C\u002Fh6\u003E\u003Ctextarea class=\"description-textarea form-control\" id=\"session-description\" rows=\"6\"\u003E\u003C\u002Ftextarea\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EMetadata\u003C\u002Fh6\u003E\u003Ctable class=\"table table-striped table-bordered meta-table\"\u003E\u003Ctbody\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003ECreation date\u003C\u002Fth\u003E\u003Ctd class=\"session-date\"\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003Ctr\u003E\u003Cth scope=\"row\"\u003ELast edit date\u003C\u002Fth\u003E\u003Ctd class=\"session-edit-date\"\u003E\u003C\u002Ftd\u003E\u003C\u002Ftr\u003E\u003C\u002Ftbody\u003E\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003C\u002Fdiv\u003E" + (null == (pug_interp = (__webpack_require__(3875).call)(this, locals)) ? "" : pug_interp) + "\u003Cdiv\u003E\u003Cdiv class=\"mb-3 hidden\" id=\"admixture-proportion-template\"\u003E\u003Ch6 class=\"subsection-header title mt-0\"\u003E\u003C\u002Fh6\u003E\u003Cdiv\u003E \u003Cinput class=\"js-range-slider proportion-slider\" id=\"admixture-proportion-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E\u003Cspan\u003EOperator: ";
pug_mixins["simple-radiobuttons-inline"]('proportion-operator-option', proportionOperators, 'geq');
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["accordion-header-button"] = pug_interp = function(targetId, title, iconId, iconClass, isCollapsed = false, isButtonPressed = true, iconTitle="", classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"accordion-wrapper group\" role=\"group\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: pug.merge([{"class": "m-0 p-0"},attributes])
}, iconId, iconClass, '', isButtonPressed, iconTitle = iconTitle);
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["button-accordion-header","accordion-header","collapsable","collapsed",classes], [false,false,false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": false},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": pug.classes(["accordion-header","collapsable",classes], [false,false,true]),"role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": true},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};





















pug_mixins["accordion-header-settings"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (isCollapsed == true) {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable collapsed","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'top';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
}
};
pug_mixins["selectOption"] = pug_interp = function(el, key){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var optionsAttributes = {};
if(el.datatokens) optionsAttributes['data-tokens'] = el.datatokens;
if(el.disabled) optionsAttributes['disabled'] = el.disabled;
if(el.subtext) optionsAttributes['data-subtext'] = el.subtext;
if(el.selected) optionsAttributes['selected'] = el.selected;
if(el.content) optionsAttributes['data-content'] = el.content;
if(el.title) optionsAttributes['title'] = el.title;
if(el.attributes)
	Object.keys(el.attributes).forEach((attribute) => {
		optionsAttributes[attribute] = el.attributes[attribute];
	});

pug_html = pug_html + "\u003Coption" + (pug.attrs(pug.merge([{"value": pug.escape(key)},optionsAttributes]), true)) + "\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Foption\u003E";
};
pug_mixins["dropdown-no-picker"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","data-virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["dropdown"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"class": "selectpicker","data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = '', classes = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (pug.attr("class", pug.classes(["form-control",classes], [false,true]), false, true)+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons icon\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cdiv class=\"spinner-border status hidden\" role=\"status\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-input"] = pug_interp = function(id, buttonText, spinnerValue, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cdiv class=\"form-control p-0 h-100 border-0\"\u003E\u003Cinput" + (pug.attr("id", id, true, true)+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("value", spinnerValue, true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-icon-textbox"] = pug_interp = function(id, placeholder, buttonText, textIconName, buttIconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group icon-button-textbox-wrapper\"\u003E\u003Cspan class=\"form-control p-0\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append icon-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = textIconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fspan\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, buttIconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true, iconTitle=""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper\"\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "true","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]),"id": pug.escape(id),"data-toggle": "button","aria-pressed": "false","autocomplete": "off","title": pug.escape(iconTitle)},attributes]), true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E";
if (label && label != '') {
pug_html = pug_html + "\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null, addSpinner = false, spinnerText = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E";
if (addSpinner === true) {
pug_html = pug_html + "\u003Cspan class=\"loading-button-wrapper\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = spinnerText) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E\u003Cspan class=\"spinner-grow\" role=\"status\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
}
pug_html = pug_html + "\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E";
};


























pug_mixins["dropdown-element"] = pug_interp = function(elId, val){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (val.constructor === Object) {
if (val.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (val.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (val.isSubmenu) {
pug_html = pug_html + "\u003Cdiv class=\"dropright dropdown-item\"\u003E\u003Cdiv class=\"dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("id", elId, true, true)+" aria-labelledby=\"dropdown-submenu\"") + "\u003E";
// iterate val.options
;(function(){
  var $$obj = val.options;
  if ('number' == typeof $$obj.length) {
      for (var subKey = 0, $$l = $$obj.length; subKey < $$l; subKey++) {
        var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var subKey in $$obj) {
      $$l++;
      var subVal = $$obj[subKey];
if (subVal.constructor === Object) {
if (subVal.isHeader) {
pug_html = pug_html + "\u003Ch6 class=\"dropdown-header\"\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fh6\u003E";
}
else
if (subVal.isDivider) {
pug_html = pug_html + "\u003Cdiv class=\"dropdown-divider\"\u003E\u003C\u002Fdiv\u003E";
}
else
if (subVal.isToggle) {
pug_html = pug_html + "\u003Cdiv class=\"icon-checkbox-wrapper dropdown-item-toggle\"\u003E\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",`${subVal.class}`], [false,false,false,true]), false, true)+pug.attr("id", subKey, true, true)+" data-toggle=\"button\""+pug.attr("aria-pressed", toString(subVal.isActive), true, true)+" autocomplete=\"off\" title=\"\""+pug.attr("toggle-target", subVal["toggle-target"], true, true)+pug.attr("option-name", subVal["option-name"], true, true)) + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (pug.attr("class", pug.classes(["form-check-label",subVal.class], [false,true]), false, true)+pug.attr("for", subKey, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",subVal.class], [false,true]), false, true)+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", subKey, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = subVal) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["dropdown-item",val.class], [false,true]), false, true)+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val.name) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
}
else {
pug_html = pug_html + "\u003Cbutton" + (" class=\"dropdown-item\""+pug.attr("id", elId, true, true)+" type=\"button\"") + "\u003E" + (pug.escape(null == (pug_interp = val) ? "" : pug_interp)) + "\u003C\u002Fbutton\u003E";
}
};
pug_mixins["custom-button-dropdown"] = pug_interp = function(id, options, text = '', iconName = null, title=''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (" class=\"dropdown\""+pug.attr("title", title, true, true)) + "\u003E\u003Cbutton" + (pug.attrs(pug.merge([{"class": "dropdown-toggle btn custom-button","id": pug.escape(id),"type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"},attributes]), true)) + "\u003E\u003Cspan class=\"button-content\"\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv" + (" class=\"dropdown-menu\""+pug.attr("aria-labelledby", id, true, true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var val = $$obj[key];
pug_mixins["dropdown-element"](key, val);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};

















pug_html = pug_html + "\u003Cdiv class=\"hidden dropdown-item attribute-wrapper dropdown-item-toggle\" id=\"column-toggle-dropdown-attribute-template\" attribute-id=\"\"\u003E\u003Cinput class=\"mr-3\" type=\"checkbox\"\u003E\u003Clabel\u003EText\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"hidden dropdown dropright\" id=\"column-toggle-dropdown-attribute-type-template\"\u003E\u003Cdiv class=\"dropdown-item dropdown-toggle attribute-type-wrapper\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\"\u003EText\u003C\u002Fdiv\u003E\u003Cdiv class=\"dropdown-menu\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cli class=\"dataset object-container hidden\" id=\"features-dataset-template\"\u003E";
pug_mixins["accordion-header-button"].call({
attributes: {"class": "handle accordion-subsection-header collapsed"}
}, 'features-dataset-accordion-template', 'Dataset #1', '', '');
pug_html = pug_html + "\u003Cdiv class=\"collapse\" id=\"features-dataset-accordion-template\"\u003E\u003Cdiv class=\"sidebar-setting object-content palette-bg-color-light-bg\"\u003E\u003Cdiv class=\"subsection d-inline-block\"\u003E";
pug_mixins["icon-textbox"]('features-dataset-search', 'Filter by attributes...', 'filter_list', 'samples-filter');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection d-inline-block\"\u003E\u003Cdiv class=\"column-toggle-dropdown dropdown mt-3\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "column-toggle-dropdown palette-primary no-focus","type": "button","data-toggle": "dropdown","aria-haspopup": "true","aria-expanded": "false"}
}, "Show columns", "visibility");
pug_html = pug_html + "\u003Cdiv class=\"dropdown-menu\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection samples-section\"\u003E\u003Cdiv class=\"table-wrapper\"\u003E \u003Cdiv class=\"table\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"features-map-modal map-modal loading hidden\" id=\"features-map-modal-template\" title=\"Cluster details\"\u003E\u003Cdiv class=\"map-modal-content p-2 pr-3\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003Cscript src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery\u002F3.3.1\u002Fjquery.min.js\" integrity=\"sha256-FgpCb\u002FKJQlLNfOu91ta32o\u002FNMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery-easing\u002F1.4.1\u002Fjquery.easing.min.js\" integrity=\"sha256-H3cjtrm\u002FztDeuhCN9I4yh4iN2Ybx\u002Fy1RM7rMmAesA0k=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery-mousewheel\u002F3.1.13\u002Fjquery.mousewheel.min.js\" integrity=\"sha256-jnOjDTXIPqall8M0MyTSt98JetJuZ7Yu+1Jm7hLTF7U=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fmalihu-custom-scrollbar-plugin\u002F3.1.5\u002Fjquery.mCustomScrollbar.min.js\" integrity=\"sha256-AKEjDiK2rz+d8TSPLNVNydvgJvOkG5veMAnc79FkiuE=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fpopper.js@1.16.1\u002Fdist\u002Fumd\u002Fpopper.min.js\" integrity=\"sha384-9\u002FreFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap@4.5.3\u002Fdist\u002Fjs\u002Fbootstrap.min.js\" integrity=\"sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr\u002FaWKhXdBNmNb5D92v7s\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fjson5@2.1.3\u002Fdist\u002Findex.min.js\" integrity=\"sha256-b6dyH0K\u002FnE4K1\u002Fd36PNAa96t19du7JXpzpcS9K3o4Sg=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjqueryui\u002F1.12.1\u002Fjquery-ui.min.js\" integrity=\"sha256-KM512VNnjElC30ehFwehXjx1YCHPiQkOPmqnrWtpccM=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap-select@1.13.17\u002Fdist\u002Fjs\u002Fbootstrap-select.min.js\" integrity=\"sha256-QOE02Glo1C1gHzP96JOaxyIMt4XSFv\u002FexZaYLY4dwO0=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E";
if (lang === 'pl') {
pug_html = pug_html + "\u003Cscript src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap-select@1.13.17\u002Fjs\u002Fi18n\u002Fdefaults-pl_PL.js\" integrity=\"sha256-aWaZCaqYgueDr4CzKzw7FlKCuaoJEwOOM9LJ79aSmlk=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E";
}
pug_html = pug_html + (null == (pug_interp = (__webpack_require__(8785).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(6603).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(3678).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(802).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(1087).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(8635).call)(this, locals)) ? "" : pug_interp) + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fion-rangeslider\u002F2.3.1\u002Fjs\u002Fion.rangeSlider.min.js\" integrity=\"sha256-Z639rJO57BiZzQDlWsGyF+EJ3Fs3nD4pQPkfimTy3S8=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fbootbox.js\u002F5.4.0\u002Fbootbox.min.js\" integrity=\"sha256-sfG8c9ILUB8EXQ5muswfjZsKICbRIJUG\u002FkBogvvV5sY=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fdot\u002F1.1.3\u002FdoT.min.js\" integrity=\"sha256-0Mj4wysSsxKrjqVsgnOgOeRZbPreFi\u002FT3+zb+cyR7Jw=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fjquery-extendext@1.0.0\u002Fjquery-extendext.min.js\" referrerpolicy=\"no-referrer\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdn.polyfill.io\u002Fv2\u002Fpolyfill.min.js?features=fetch,requestAnimationFrame,Element.prototype.classList,URL\" referrerpolicy=\"no-referrer\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-toggle@3.6.1\u002Fjs\u002Fbootstrap4-toggle.min.js\" integrity=\"sha256-p6I+tuAqpKQhe7ldkP1yo\u002FDu0QRYjm1O3reSKIiS4AM=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-tagsinput@4.1.3\u002Ftagsinput.min.js\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fd3\u002F7.0.0\u002Fd3.min.js\" integrity=\"sha512-0x7\u002FVCkKLLt4wnkFqI8Cgv6no+AaS1TDgmHLOoU3hy\u002FWVtYta2J6gnOIHhYYDJlDxPqEqAYLPS4gzVex4mGJLw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fd3-cloud\u002F1.2.5\u002Fd3.layout.cloud.min.js\" integrity=\"sha512-HjKxWye8lJGPu5q1u\u002FZYkHlJrJdm6KGr89E6tOrXeKm1mItb1xusPU8QPcKVhP8F9LjpZT7vsu1Fa+dQywP4eg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fspectrum\u002F1.8.1\u002Fspectrum.min.js\" integrity=\"sha512-1aNp9qKP+hKU\u002FVJwCtYqJP9tdZWbMDN5pEEXXoXT0pTAxZq1HHZhNBR\u002FdtTNSrHO4U1FsFGGILbqG1O9nl8Mdg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E";
if (lang === 'pl') {
pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fspectrum\u002F1.8.1\u002Fi18n\u002Fjquery.spectrum-pl.min.js\" integrity=\"sha512-0UvyL53U6fv8w7tC67XkRppluiO3L3+CmybHSmBI44qCbq7uAnqh1FABbNuHXfLFAlWgfs225CCWppX7DELwnw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E";
}
pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fgrapick@0.1.13\u002Fdist\u002Fgrapick.min.js\" integrity=\"sha256-JJRsqxxtOYcINfLqsBhGYa\u002FfQOBx6m\u002Fpk2xDnaPKEOI=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fseedrandom@3.0.5\u002Fseedrandom.min.js\" integrity=\"sha256-0usXoFraKr8ZyLyx8PGuYrttpdWaadxkFM7QhwSojNE=\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjspdf\u002F1.3.2\u002Fjspdf.min.js\" referrerpolicy=\"no-referrer\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Funpkg.com\u002Fbootstrap-table@1.20.0\u002Fdist\u002Fbootstrap-table.min.js\" referrerpolicy=\"no-referrer\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002FChart.js\u002F3.8.0\u002Fchart.min.js\" integrity=\"sha512-sW\u002Fw8s4RWTdFFSduOTGtk4isV1+190E\u002FGghVffMA9XczdJ2MDzSzLEubKAs5h0wzgSJOQTRYyaz73L3d6RtJSg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery-scrollintoview\u002F1.8\u002Fjquery.scrollintoview.min.js\" integrity=\"sha512-+ZUCgnKxLSb0lRJ0zMblOFgJwx0gDkl3AcYnEf\u002FJzKUY8zgFFWibpwJfute3VMwXXWy5L10qfxk7qHk6q1BKrQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Ftippy.js\u002F5.0.3\u002Ftippy-bundle.iife.min.js\" integrity=\"sha512-a8JO1iPV\u002FbLQBPmVJIedQQRNGyJgGEGYapD2beVsksjcyclDYPP\u002FdGhovCLqCdUraatoJbda2E3xkm3\u002FDHhMJA==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"\u002Fjs\u002Fmodules\u002Fjquery.simulate.js\" type=\"text\u002Fjavascript\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"\u002Fjs\u002Fmodules\u002Fanglepicker-1.0.1.js\" type=\"text\u002Fjavascript\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"\u002Fjs\u002Fmodules\u002Fanno.js\" type=\"text\u002Fjavascript\"\u003E\u003C\u002Fscript\u003E" + (null == (pug_interp = (__webpack_require__(727).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(481).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(9712).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(4459).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(3838).call)(this, locals)) ? "" : pug_interp) + (null == (pug_interp = (__webpack_require__(8501).call)(this, locals)) ? "" : pug_interp) + "\u003Cscript src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fplotly.js\u002F1.33.1\u002Fplotly-basic.min.js\" integrity=\"sha256-qPutqhXQitI6ydhltlGqtkrcj2rkNRQde60nRB3BIgg=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003C\u002Fbody\u003E\u003C\u002Fhtml\u003E";
    }.call(this, "JSON" in locals_for_with ?
        locals_for_with.JSON :
        typeof JSON !== 'undefined' ? JSON : undefined, "Math" in locals_for_with ?
        locals_for_with.Math :
        typeof Math !== 'undefined' ? Math : undefined, "Object" in locals_for_with ?
        locals_for_with.Object :
        typeof Object !== 'undefined' ? Object : undefined, "ariaLabel" in locals_for_with ?
        locals_for_with.ariaLabel :
        typeof ariaLabel !== 'undefined' ? ariaLabel : undefined, "attributes" in locals_for_with ?
        locals_for_with.attributes :
        typeof attributes !== 'undefined' ? attributes : undefined, "attributesClusteringPanelChoice" in locals_for_with ?
        locals_for_with.attributesClusteringPanelChoice :
        typeof attributesClusteringPanelChoice !== 'undefined' ? attributesClusteringPanelChoice : undefined, "clusteringDic" in locals_for_with ?
        locals_for_with.clusteringDic :
        typeof clusteringDic !== 'undefined' ? clusteringDic : undefined, "clustersValue" in locals_for_with ?
        locals_for_with.clustersValue :
        typeof clustersValue !== 'undefined' ? clustersValue : undefined, "datasetsDic" in locals_for_with ?
        locals_for_with.datasetsDic :
        typeof datasetsDic !== 'undefined' ? datasetsDic : undefined, "dictionary" in locals_for_with ?
        locals_for_with.dictionary :
        typeof dictionary !== 'undefined' ? dictionary : undefined, "example" in locals_for_with ?
        locals_for_with.example :
        typeof example !== 'undefined' ? example : undefined, "fileTypes" in locals_for_with ?
        locals_for_with.fileTypes :
        typeof fileTypes !== 'undefined' ? fileTypes : undefined, "growthFunctions" in locals_for_with ?
        locals_for_with.growthFunctions :
        typeof growthFunctions !== 'undefined' ? growthFunctions : undefined, "header" in locals_for_with ?
        locals_for_with.header :
        typeof header !== 'undefined' ? header : undefined, "iconName" in locals_for_with ?
        locals_for_with.iconName :
        typeof iconName !== 'undefined' ? iconName : undefined, "iconTitle" in locals_for_with ?
        locals_for_with.iconTitle :
        typeof iconTitle !== 'undefined' ? iconTitle : undefined, "imageTypes" in locals_for_with ?
        locals_for_with.imageTypes :
        typeof imageTypes !== 'undefined' ? imageTypes : undefined, "lang" in locals_for_with ?
        locals_for_with.lang :
        typeof lang !== 'undefined' ? lang : undefined, "layerBlendingModes" in locals_for_with ?
        locals_for_with.layerBlendingModes :
        typeof layerBlendingModes !== 'undefined' ? layerBlendingModes : undefined, "layerTypes" in locals_for_with ?
        locals_for_with.layerTypes :
        typeof layerTypes !== 'undefined' ? layerTypes : undefined, "mapToolbox" in locals_for_with ?
        locals_for_with.mapToolbox :
        typeof mapToolbox !== 'undefined' ? mapToolbox : undefined, "maxYear" in locals_for_with ?
        locals_for_with.maxYear :
        typeof maxYear !== 'undefined' ? maxYear : undefined, "metadata" in locals_for_with ?
        locals_for_with.metadata :
        typeof metadata !== 'undefined' ? metadata : undefined, "minYear" in locals_for_with ?
        locals_for_with.minYear :
        typeof minYear !== 'undefined' ? minYear : undefined, "pageName" in locals_for_with ?
        locals_for_with.pageName :
        typeof pageName !== 'undefined' ? pageName : undefined, "patterns" in locals_for_with ?
        locals_for_with.patterns :
        typeof patterns !== 'undefined' ? patterns : undefined, "piechartsLabel" in locals_for_with ?
        locals_for_with.piechartsLabel :
        typeof piechartsLabel !== 'undefined' ? piechartsLabel : undefined, "proportionOperators" in locals_for_with ?
        locals_for_with.proportionOperators :
        typeof proportionOperators !== 'undefined' ? proportionOperators : undefined, "regionsLabel" in locals_for_with ?
        locals_for_with.regionsLabel :
        typeof regionsLabel !== 'undefined' ? regionsLabel : undefined, "sessionDataTypes" in locals_for_with ?
        locals_for_with.sessionDataTypes :
        typeof sessionDataTypes !== 'undefined' ? sessionDataTypes : undefined, "sessionsDic" in locals_for_with ?
        locals_for_with.sessionsDic :
        typeof sessionsDic !== 'undefined' ? sessionsDic : undefined, "standardisationMethods" in locals_for_with ?
        locals_for_with.standardisationMethods :
        typeof standardisationMethods !== 'undefined' ? standardisationMethods : undefined, "tagStrategies" in locals_for_with ?
        locals_for_with.tagStrategies :
        typeof tagStrategies !== 'undefined' ? tagStrategies : undefined, "targetId" in locals_for_with ?
        locals_for_with.targetId :
        typeof targetId !== 'undefined' ? targetId : undefined, "text" in locals_for_with ?
        locals_for_with.text :
        typeof text !== 'undefined' ? text : undefined, "title" in locals_for_with ?
        locals_for_with.title :
        typeof title !== 'undefined' ? title : undefined, "toString" in locals_for_with ?
        locals_for_with.toString :
        typeof toString !== 'undefined' ? toString : undefined));
    ;;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7055:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var pug_has_own_property = Object.prototype.hasOwnProperty;

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = pug_merge;
function pug_merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = pug_merge(attrs, a[i]);
    }
    return attrs;
  }

  for (var key in b) {
    if (key === 'class') {
      var valA = a[key] || [];
      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
    } else if (key === 'style') {
      var valA = pug_style(a[key]);
      valA = valA && valA[valA.length - 1] !== ';' ? valA + ';' : valA;
      var valB = pug_style(b[key]);
      valB = valB && valB[valB.length - 1] !== ';' ? valB + ';' : valB;
      a[key] = valA + valB;
    } else {
      a[key] = b[key];
    }
  }

  return a;
}

/**
 * Process array, object, or string as a string of classes delimited by a space.
 *
 * If `val` is an array, all members of it and its subarrays are counted as
 * classes. If `escaping` is an array, then whether or not the item in `val` is
 * escaped depends on the corresponding item in `escaping`. If `escaping` is
 * not an array, no escaping is done.
 *
 * If `val` is an object, all the keys whose value is truthy are counted as
 * classes. No escaping is done.
 *
 * If `val` is a string, it is counted as a class. No escaping is done.
 *
 * @param {(Array.<string>|Object.<string, boolean>|string)} val
 * @param {?Array.<string>} escaping
 * @return {String}
 */
exports.classes = pug_classes;
function pug_classes_array(val, escaping) {
  var classString = '',
    className,
    padding = '',
    escapeEnabled = Array.isArray(escaping);
  for (var i = 0; i < val.length; i++) {
    className = pug_classes(val[i]);
    if (!className) continue;
    escapeEnabled && escaping[i] && (className = pug_escape(className));
    classString = classString + padding + className;
    padding = ' ';
  }
  return classString;
}
function pug_classes_object(val) {
  var classString = '',
    padding = '';
  for (var key in val) {
    if (key && val[key] && pug_has_own_property.call(val, key)) {
      classString = classString + padding + key;
      padding = ' ';
    }
  }
  return classString;
}
function pug_classes(val, escaping) {
  if (Array.isArray(val)) {
    return pug_classes_array(val, escaping);
  } else if (val && typeof val === 'object') {
    return pug_classes_object(val);
  } else {
    return val || '';
  }
}

/**
 * Convert object or string to a string of CSS styles delimited by a semicolon.
 *
 * @param {(Object.<string, string>|string)} val
 * @return {String}
 */

exports.style = pug_style;
function pug_style(val) {
  if (!val) return '';
  if (typeof val === 'object') {
    var out = '';
    for (var style in val) {
      /* istanbul ignore else */
      if (pug_has_own_property.call(val, style)) {
        out = out + style + ':' + val[style] + ';';
      }
    }
    return out;
  } else {
    return val + '';
  }
}

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = pug_attr;
function pug_attr(key, val, escaped, terse) {
  if (
    val === false ||
    val == null ||
    (!val && (key === 'class' || key === 'style'))
  ) {
    return '';
  }
  if (val === true) {
    return ' ' + (terse ? key : key + '="' + key + '"');
  }
  var type = typeof val;
  if (
    (type === 'object' || type === 'function') &&
    typeof val.toJSON === 'function'
  ) {
    val = val.toJSON();
  }
  if (typeof val !== 'string') {
    val = JSON.stringify(val);
    if (!escaped && val.indexOf('"') !== -1) {
      return ' ' + key + "='" + val.replace(/'/g, '&#39;') + "'";
    }
  }
  if (escaped) val = pug_escape(val);
  return ' ' + key + '="' + val + '"';
}

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} terse whether to use HTML5 terse boolean attributes
 * @return {String}
 */
exports.attrs = pug_attrs;
function pug_attrs(obj, terse) {
  var attrs = '';

  for (var key in obj) {
    if (pug_has_own_property.call(obj, key)) {
      var val = obj[key];

      if ('class' === key) {
        val = pug_classes(val);
        attrs = pug_attr(key, val, false, terse) + attrs;
        continue;
      }
      if ('style' === key) {
        val = pug_style(val);
      }
      attrs += pug_attr(key, val, false, terse);
    }
  }

  return attrs;
}

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var pug_match_html = /["&<>]/;
exports.escape = pug_escape;
function pug_escape(_html) {
  var html = '' + _html;
  var regexResult = pug_match_html.exec(html);
  if (!regexResult) return _html;

  var result = '';
  var i, lastIndex, escape;
  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
    switch (html.charCodeAt(i)) {
      case 34:
        escape = '&quot;';
        break;
      case 38:
        escape = '&amp;';
        break;
      case 60:
        escape = '&lt;';
        break;
      case 62:
        escape = '&gt;';
        break;
      default:
        continue;
    }
    if (lastIndex !== i) result += html.substring(lastIndex, i);
    lastIndex = i + 1;
    result += escape;
  }
  if (lastIndex !== i) return result + html.substring(lastIndex, i);
  else return result;
}

/**
 * Re-throw the given `err` in context to the
 * the pug in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @param {String} str original source
 * @api private
 */

exports.rethrow = pug_rethrow;
function pug_rethrow(err, filename, lineno, str) {
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  var context, lines, start, end;
  try {
    str = str || (__webpack_require__(7835).readFileSync)(filename, {encoding: 'utf8'});
    context = 3;
    lines = str.split('\n');
    start = Math.max(lineno - context, 0);
    end = Math.min(lines.length, lineno + context);
  } catch (ex) {
    err.message +=
      ' - could not read from ' + filename + ' (' + ex.message + ')';
    pug_rethrow(err, null, lineno);
    return;
  }

  // Error context
  context = lines
    .slice(start, end)
    .map(function(line, i) {
      var curr = i + start + 1;
      return (curr == lineno ? '  > ' : '    ') + curr + '| ' + line;
    })
    .join('\n');

  // Alter exception message
  err.path = filename;
  try {
    err.message =
      (filename || 'Pug') +
      ':' +
      lineno +
      '\n' +
      context +
      '\n\n' +
      err.message;
  } catch (e) {}
  throw err;
}


/***/ }),

/***/ 7835:
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			842: 0,
/******/ 			54: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = window["webpackChunkpiast"] = window["webpackChunkpiast"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [54], () => (__webpack_require__(725)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;