/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 4616:
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (a, b) {
  if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (b),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}
})(this, function () {
  "use strict";

  function b(a, b) {
    return "undefined" == typeof b ? b = {
      autoBom: !1
    } : "object" != typeof b && (console.warn("Deprecated: Expected third argument to be a object"), b = {
      autoBom: !b
    }), b.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["\uFEFF", a], {
      type: a.type
    }) : a;
  }

  function c(a, b, c) {
    var d = new XMLHttpRequest();
    d.open("GET", a), d.responseType = "blob", d.onload = function () {
      g(d.response, b, c);
    }, d.onerror = function () {
      console.error("could not download file");
    }, d.send();
  }

  function d(a) {
    var b = new XMLHttpRequest();
    b.open("HEAD", a, !1);

    try {
      b.send();
    } catch (a) {}

    return 200 <= b.status && 299 >= b.status;
  }

  function e(a) {
    try {
      a.dispatchEvent(new MouseEvent("click"));
    } catch (c) {
      var b = document.createEvent("MouseEvents");
      b.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), a.dispatchEvent(b);
    }
  }

  var f = "object" == typeof window && window.window === window ? window : "object" == typeof self && self.self === self ? self : "object" == typeof __webpack_require__.g && __webpack_require__.g.global === __webpack_require__.g ? __webpack_require__.g : void 0,
      a = f.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent),
      g = f.saveAs || ("object" != typeof window || window !== f ? function () {} : "download" in HTMLAnchorElement.prototype && !a ? function (b, g, h) {
    var i = f.URL || f.webkitURL,
        j = document.createElement("a");
    g = g || b.name || "download", j.download = g, j.rel = "noopener", "string" == typeof b ? (j.href = b, j.origin === location.origin ? e(j) : d(j.href) ? c(b, g, h) : e(j, j.target = "_blank")) : (j.href = i.createObjectURL(b), setTimeout(function () {
      i.revokeObjectURL(j.href);
    }, 4E4), setTimeout(function () {
      e(j);
    }, 0));
  } : "msSaveOrOpenBlob" in navigator ? function (f, g, h) {
    if (g = g || f.name || "download", "string" != typeof f) navigator.msSaveOrOpenBlob(b(f, h), g);else if (d(f)) c(f, g, h);else {
      var i = document.createElement("a");
      i.href = f, i.target = "_blank", setTimeout(function () {
        e(i);
      });
    }
  } : function (b, d, e, g) {
    if (g = g || open("", "_blank"), g && (g.document.title = g.document.body.innerText = "downloading..."), "string" == typeof b) return c(b, d, e);
    var h = "application/octet-stream" === b.type,
        i = /constructor/i.test(f.HTMLElement) || f.safari,
        j = /CriOS\/[\d]+/.test(navigator.userAgent);

    if ((j || h && i || a) && "undefined" != typeof FileReader) {
      var k = new FileReader();
      k.onloadend = function () {
        var a = k.result;
        a = j ? a : a.replace(/^data:[^;]*;/, "data:attachment/file;"), g ? g.location.href = a : location = a, g = null;
      }, k.readAsDataURL(b);
    } else {
      var l = f.URL || f.webkitURL,
          m = l.createObjectURL(b);
      g ? g.location = m : location.href = m, g = null, setTimeout(function () {
        l.revokeObjectURL(m);
      }, 4E4);
    }
  });
  f.saveAs = g.saveAs = g,  true && (module.exports = g);
});

/***/ }),

/***/ 1923:
/***/ (() => {

/*!
 * jQuery QueryBuilder 2.5.0
 * Copyright 2014-2021 Damien "Mistic" Sorel (http://www.strangeplanet.fr)
 * Licensed under MIT (https://opensource.org/licenses/MIT)
 */

/* Build command: grunt --plugins=bt-selectpicker --languages=en,pl */
(function (factory) {
  /*if (typeof $ == 'undefined')
      var $ = require('jquery');
   if (typeof doT == 'undefined')
      var doT = require('dot/doT');
  */
  factory($, doT);
})(function ($, doT) {
  "use strict";
  /**
   * @typedef {object} Filter
   * @memberof QueryBuilder
   * @description See {@link http://querybuilder.js.org/index.html#filters}
   */

  /**
   * @typedef {object} Operator
   * @memberof QueryBuilder
   * @description See {@link http://querybuilder.js.org/index.html#operators}
   */

  /**
   * @param {jQuery} $el
   * @param {object} options - see {@link http://querybuilder.js.org/#options}
   * @constructor
   */

  var QueryBuilder = function ($el, options) {
    $el[0].queryBuilder = this;
    /**
     * Element container
     * @member {jQuery}
     * @readonly
     */

    this.$el = $el;
    /**
     * Configuration object
     * @member {object}
     * @readonly
     */

    this.settings = $.extendext(true, 'replace', {}, QueryBuilder.DEFAULTS, options);
    /**
     * Internal model
     * @member {Model}
     * @readonly
     */

    this.model = new Model();
    /**
     * Internal status
     * @member {object}
     * @property {string} id - id of the container
     * @property {boolean} generated_id - if the container id has been generated
     * @property {int} group_id - current group id
     * @property {int} rule_id - current rule id
     * @property {boolean} has_optgroup - if filters have optgroups
     * @property {boolean} has_operator_optgroup - if operators have optgroups
     * @readonly
     * @private
     */

    this.status = {
      id: null,
      generated_id: false,
      group_id: 0,
      rule_id: 0,
      has_optgroup: false,
      has_operator_optgroup: false
    };
    /**
     * List of filters
     * @member {QueryBuilder.Filter[]}
     * @readonly
     */

    this.filters = this.settings.filters;
    /**
     * List of icons
     * @member {object.<string, string>}
     * @readonly
     */

    this.icons = this.settings.icons;
    /**
     * List of operators
     * @member {QueryBuilder.Operator[]}
     * @readonly
     */

    this.operators = this.settings.operators;
    /**
     * List of templates
     * @member {object.<string, function>}
     * @readonly
     */

    this.templates = this.settings.templates;
    /**
     * Plugins configuration
     * @member {object.<string, object>}
     * @readonly
     */

    this.plugins = this.settings.plugins;
    /**
     * Translations object
     * @member {object}
     * @readonly
     */

    this.lang = null; // translations : english << 'lang_code' << custom

    if (QueryBuilder.regional['en'] === undefined) {
      Utils.error('Config', '"i18n/en.js" not loaded.');
    }

    this.lang = $.extendext(true, 'replace', {}, QueryBuilder.regional['en'], QueryBuilder.regional[this.settings.lang_code], this.settings.lang); // "allow_groups" can be boolean or int

    if (this.settings.allow_groups === false) {
      this.settings.allow_groups = 0;
    } else if (this.settings.allow_groups === true) {
      this.settings.allow_groups = -1;
    } // init templates


    Object.keys(this.templates).forEach(function (tpl) {
      if (!this.templates[tpl]) {
        this.templates[tpl] = QueryBuilder.templates[tpl];
      }

      if (typeof this.templates[tpl] == 'string') {
        this.templates[tpl] = doT.template(this.templates[tpl]);
      }
    }, this); // ensure we have a container id

    if (!this.$el.attr('id')) {
      this.$el.attr('id', 'qb_' + Math.floor(Math.random() * 99999));
      this.status.generated_id = true;
    }

    this.status.id = this.$el.attr('id'); // INIT

    this.$el.addClass('query-builder form-inline');
    this.filters = this.checkFilters(this.filters);
    this.operators = this.checkOperators(this.operators);
    this.bindEvents();
    this.initPlugins();
  };

  $.extend(QueryBuilder.prototype,
  /** @lends QueryBuilder.prototype */
  {
    /**
     * Triggers an event on the builder container
     * @param {string} type
     * @returns {$.Event}
     */
    trigger: function (type) {
      var event = new $.Event(this._tojQueryEvent(type), {
        builder: this
      });
      this.$el.triggerHandler(event, Array.prototype.slice.call(arguments, 1));
      return event;
    },

    /**
     * Triggers an event on the builder container and returns the modified value
     * @param {string} type
     * @param {*} value
     * @returns {*}
     */
    change: function (type, value) {
      var event = new $.Event(this._tojQueryEvent(type, true), {
        builder: this,
        value: value
      });
      this.$el.triggerHandler(event, Array.prototype.slice.call(arguments, 2));
      return event.value;
    },

    /**
     * Attaches an event listener on the builder container
     * @param {string} type
     * @param {function} cb
     * @returns {QueryBuilder}
     */
    on: function (type, cb) {
      this.$el.on(this._tojQueryEvent(type), cb);
      return this;
    },

    /**
     * Removes an event listener from the builder container
     * @param {string} type
     * @param {function} [cb]
     * @returns {QueryBuilder}
     */
    off: function (type, cb) {
      this.$el.off(this._tojQueryEvent(type), cb);
      return this;
    },

    /**
     * Attaches an event listener called once on the builder container
     * @param {string} type
     * @param {function} cb
     * @returns {QueryBuilder}
     */
    once: function (type, cb) {
      this.$el.one(this._tojQueryEvent(type), cb);
      return this;
    },

    /**
     * Appends `.queryBuilder` and optionally `.filter` to the events names
     * @param {string} name
     * @param {boolean} [filter=false]
     * @returns {string}
     * @private
     */
    _tojQueryEvent: function (name, filter) {
      return name.split(' ').map(function (type) {
        return type + '.queryBuilder' + (filter ? '.filter' : '');
      }).join(' ');
    }
  });
  /**
   * Allowed types and their internal representation
   * @type {object.<string, string>}
   * @readonly
   * @private
   */

  QueryBuilder.types = {
    'string': 'string',
    'integer': 'number',
    'double': 'number',
    'date': 'datetime',
    'time': 'datetime',
    'datetime': 'datetime',
    'boolean': 'boolean'
  };
  /**
   * Allowed inputs
   * @type {string[]}
   * @readonly
   * @private
   */

  QueryBuilder.inputs = ['text', 'number', 'textarea', 'radio', 'checkbox', 'select'];
  /**
   * Runtime modifiable options with `setOptions` method
   * @type {string[]}
   * @readonly
   * @private
   */

  QueryBuilder.modifiable_options = ['display_errors', 'allow_groups', 'allow_empty', 'default_condition', 'default_filter'];
  /**
   * CSS selectors for common components
   * @type {object.<string, string>}
   * @readonly
   */

  QueryBuilder.selectors = {
    group_container: '.rules-group-container',
    rule_container: '.rule-container',
    filter_container: '.rule-filter-container',
    operator_container: '.rule-operator-container',
    value_container: '.rule-value-container',
    error_container: '.error-container',
    condition_container: '.rules-group-header .group-conditions',
    rule_header: '.rule-header',
    group_header: '.rules-group-header',
    group_actions: '.group-actions',
    rule_actions: '.rule-actions',
    rules_list: '.rules-group-body>.rules-list',
    group_condition: '.rules-group-header [name$=_cond]',
    rule_filter: '.rule-filter-container [name$=_filter]',
    rule_operator: '.rule-operator-container [name$=_operator]',
    rule_value: '.rule-value-container [name*=_value_]',
    add_rule: '[data-add=rule]',
    delete_rule: '[data-delete=rule]',
    add_group: '[data-add=group]',
    delete_group: '[data-delete=group]'
  };
  /**
   * Template strings (see template.js)
   * @type {object.<string, string>}
   * @readonly
   */

  QueryBuilder.templates = {};
  /**
   * Localized strings (see i18n/)
   * @type {object.<string, object>}
   * @readonly
   */

  QueryBuilder.regional = {};
  /**
   * Default operators
   * @type {object.<string, object>}
   * @readonly
   */

  QueryBuilder.OPERATORS = {
    equal: {
      type: 'equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    },
    not_equal: {
      type: 'not_equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    },
    in: {
      type: 'in',
      nb_inputs: 1,
      multiple: true,
      apply_to: ['string', 'number', 'datetime']
    },
    not_in: {
      type: 'not_in',
      nb_inputs: 1,
      multiple: true,
      apply_to: ['string', 'number', 'datetime']
    },
    less: {
      type: 'less',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    less_or_equal: {
      type: 'less_or_equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    greater: {
      type: 'greater',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    greater_or_equal: {
      type: 'greater_or_equal',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    between: {
      type: 'between',
      nb_inputs: 2,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    not_between: {
      type: 'not_between',
      nb_inputs: 2,
      multiple: false,
      apply_to: ['number', 'datetime']
    },
    begins_with: {
      type: 'begins_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    not_begins_with: {
      type: 'not_begins_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    contains: {
      type: 'contains',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    not_contains: {
      type: 'not_contains',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    ends_with: {
      type: 'ends_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    not_ends_with: {
      type: 'not_ends_with',
      nb_inputs: 1,
      multiple: false,
      apply_to: ['string']
    },
    is_empty: {
      type: 'is_empty',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string']
    },
    is_not_empty: {
      type: 'is_not_empty',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string']
    },
    is_null: {
      type: 'is_null',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    },
    is_not_null: {
      type: 'is_not_null',
      nb_inputs: 0,
      multiple: false,
      apply_to: ['string', 'number', 'datetime', 'boolean']
    }
  };
  /**
   * Default configuration
   * @type {object}
   * @readonly
   */

  QueryBuilder.DEFAULTS = {
    filters: [],
    plugins: [],
    sort_filters: false,
    display_errors: true,
    allow_groups: -1,
    allow_empty: false,
    conditions: ['AND', 'OR'],
    default_condition: 'AND',
    inputs_separator: ' , ',
    select_placeholder: '------',
    display_empty_filter: true,
    default_filter: null,
    optgroups: {},
    default_rule_flags: {
      filter_readonly: false,
      operator_readonly: false,
      value_readonly: false,
      no_delete: false
    },
    default_group_flags: {
      condition_readonly: false,
      no_add_rule: false,
      no_add_group: false,
      no_delete: false
    },
    templates: {
      group: null,
      rule: null,
      filterSelect: null,
      operatorSelect: null,
      ruleValueSelect: null
    },
    lang_code: 'en',
    lang: {},
    operators: ['equal', 'not_equal', 'in', 'not_in', 'less', 'less_or_equal', 'greater', 'greater_or_equal', 'between', 'not_between', 'begins_with', 'not_begins_with', 'contains', 'not_contains', 'ends_with', 'not_ends_with', 'is_empty', 'is_not_empty', 'is_null', 'is_not_null'],
    icons: {
      add_group: 'glyphicon glyphicon-plus-sign',
      add_rule: 'glyphicon glyphicon-plus',
      remove_group: 'glyphicon glyphicon-remove',
      remove_rule: 'glyphicon glyphicon-remove',
      error: 'glyphicon glyphicon-warning-sign'
    }
  };
  /**
   * @module plugins
   */

  /**
   * Definition of available plugins
   * @type {object.<String, object>}
   */

  QueryBuilder.plugins = {};
  /**
   * Gets or extends the default configuration
   * @param {object} [options] - new configuration
   * @returns {undefined|object} nothing or configuration object (copy)
   */

  QueryBuilder.defaults = function (options) {
    if (typeof options == 'object') {
      $.extendext(true, 'replace', QueryBuilder.DEFAULTS, options);
    } else if (typeof options == 'string') {
      if (typeof QueryBuilder.DEFAULTS[options] == 'object') {
        return $.extend(true, {}, QueryBuilder.DEFAULTS[options]);
      } else {
        return QueryBuilder.DEFAULTS[options];
      }
    } else {
      return $.extend(true, {}, QueryBuilder.DEFAULTS);
    }
  };
  /**
   * Registers a new plugin
   * @param {string} name
   * @param {function} fct - init function
   * @param {object} [def] - default options
   */


  QueryBuilder.define = function (name, fct, def) {
    QueryBuilder.plugins[name] = {
      fct: fct,
      def: def || {}
    };
  };
  /**
   * Adds new methods to QueryBuilder prototype
   * @param {object.<string, function>} methods
   */


  QueryBuilder.extend = function (methods) {
    $.extend(QueryBuilder.prototype, methods);
  };
  /**
   * Initializes plugins for an instance
   * @throws ConfigError
   * @private
   */


  QueryBuilder.prototype.initPlugins = function () {
    if (!this.plugins) {
      return;
    }

    if ($.isArray(this.plugins)) {
      var tmp = {};
      this.plugins.forEach(function (plugin) {
        tmp[plugin] = null;
      });
      this.plugins = tmp;
    }

    Object.keys(this.plugins).forEach(function (plugin) {
      if (plugin in QueryBuilder.plugins) {
        this.plugins[plugin] = $.extend(true, {}, QueryBuilder.plugins[plugin].def, this.plugins[plugin] || {});
        QueryBuilder.plugins[plugin].fct.call(this, this.plugins[plugin]);
      } else {
        Utils.error('Config', 'Unable to find plugin "{0}"', plugin);
      }
    }, this);
  };
  /**
   * Returns the config of a plugin, if the plugin is not loaded, returns the default config.
   * @param {string} name
   * @param {string} [property]
   * @throws ConfigError
   * @returns {*}
   */


  QueryBuilder.prototype.getPluginOptions = function (name, property) {
    var plugin;

    if (this.plugins && this.plugins[name]) {
      plugin = this.plugins[name];
    } else if (QueryBuilder.plugins[name]) {
      plugin = QueryBuilder.plugins[name].def;
    }

    if (plugin) {
      if (property) {
        return plugin[property];
      } else {
        return plugin;
      }
    } else {
      Utils.error('Config', 'Unable to find plugin "{0}"', name);
    }
  };
  /**
   * Final initialisation of the builder
   * @param {object} [rules]
   * @fires QueryBuilder.afterInit
   * @private
   */


  QueryBuilder.prototype.init = function (rules) {
    /**
     * When the initilization is done, just before creating the root group
     * @event afterInit
     * @memberof QueryBuilder
     */
    this.trigger('afterInit');

    if (rules) {
      this.setRules(rules);
      delete this.settings.rules;
    } else {
      this.setRoot(true);
    }
  };
  /**
   * Checks the configuration of each filter
   * @param {QueryBuilder.Filter[]} filters
   * @returns {QueryBuilder.Filter[]}
   * @throws ConfigError
   */


  QueryBuilder.prototype.checkFilters = function (filters) {
    var definedFilters = [];

    if (!filters || filters.length === 0) {
      Utils.error('Config', 'Missing filters list');
    }

    filters.forEach(function (filter, i) {
      if (!filter.id) {
        Utils.error('Config', 'Missing filter {0} id', i);
      }

      if (definedFilters.indexOf(filter.id) != -1) {
        Utils.error('Config', 'Filter "{0}" already defined', filter.id);
      }

      definedFilters.push(filter.id);

      if (!filter.type) {
        filter.type = 'string';
      } else if (!QueryBuilder.types[filter.type]) {
        Utils.error('Config', 'Invalid type "{0}"', filter.type);
      }

      if (!filter.input) {
        filter.input = QueryBuilder.types[filter.type] === 'number' ? 'number' : 'text';
      } else if (typeof filter.input != 'function' && QueryBuilder.inputs.indexOf(filter.input) == -1) {
        Utils.error('Config', 'Invalid input "{0}"', filter.input);
      }

      if (filter.operators) {
        filter.operators.forEach(function (operator) {
          if (typeof operator != 'string') {
            Utils.error('Config', 'Filter operators must be global operators types (string)');
          }
        });
      }

      if (!filter.field) {
        filter.field = filter.id;
      }

      if (!filter.label) {
        filter.label = filter.field;
      }

      if (!filter.optgroup) {
        filter.optgroup = null;
      } else {
        this.status.has_optgroup = true; // register optgroup if needed

        if (!this.settings.optgroups[filter.optgroup]) {
          this.settings.optgroups[filter.optgroup] = filter.optgroup;
        }
      }

      switch (filter.input) {
        case 'radio':
        case 'checkbox':
          if (!filter.values || filter.values.length < 1) {
            Utils.error('Config', 'Missing filter "{0}" values', filter.id);
          }

          break;

        case 'select':
          var cleanValues = [];
          filter.has_optgroup = false;
          Utils.iterateOptions(filter.values, function (value, label, optgroup) {
            cleanValues.push({
              value: value,
              label: label,
              optgroup: optgroup || null
            });

            if (optgroup) {
              filter.has_optgroup = true; // register optgroup if needed

              if (!this.settings.optgroups[optgroup]) {
                this.settings.optgroups[optgroup] = optgroup;
              }
            }
          }.bind(this));

          if (filter.has_optgroup) {
            filter.values = Utils.groupSort(cleanValues, 'optgroup');
          } else {
            filter.values = cleanValues;
          }

          if (filter.placeholder) {
            if (filter.placeholder_value === undefined) {
              filter.placeholder_value = -1;
            }

            filter.values.forEach(function (entry) {
              if (entry.value == filter.placeholder_value) {
                Utils.error('Config', 'Placeholder of filter "{0}" overlaps with one of its values', filter.id);
              }
            });
          }

          break;
      }
    }, this);

    if (this.settings.sort_filters) {
      if (typeof this.settings.sort_filters == 'function') {
        filters.sort(this.settings.sort_filters);
      } else {
        var self = this;
        filters.sort(function (a, b) {
          return self.translate(a.label).localeCompare(self.translate(b.label));
        });
      }
    }

    if (this.status.has_optgroup) {
      filters = Utils.groupSort(filters, 'optgroup');
    }

    return filters;
  };
  /**
   * Checks the configuration of each operator
   * @param {QueryBuilder.Operator[]} operators
   * @returns {QueryBuilder.Operator[]}
   * @throws ConfigError
   */


  QueryBuilder.prototype.checkOperators = function (operators) {
    var definedOperators = [];
    operators.forEach(function (operator, i) {
      if (typeof operator == 'string') {
        if (!QueryBuilder.OPERATORS[operator]) {
          Utils.error('Config', 'Unknown operator "{0}"', operator);
        }

        operators[i] = operator = $.extendext(true, 'replace', {}, QueryBuilder.OPERATORS[operator]);
      } else {
        if (!operator.type) {
          Utils.error('Config', 'Missing "type" for operator {0}', i);
        }

        if (QueryBuilder.OPERATORS[operator.type]) {
          operators[i] = operator = $.extendext(true, 'replace', {}, QueryBuilder.OPERATORS[operator.type], operator);
        }

        if (operator.nb_inputs === undefined || operator.apply_to === undefined) {
          Utils.error('Config', 'Missing "nb_inputs" and/or "apply_to" for operator "{0}"', operator.type);
        }
      }

      if (definedOperators.indexOf(operator.type) != -1) {
        Utils.error('Config', 'Operator "{0}" already defined', operator.type);
      }

      definedOperators.push(operator.type);

      if (!operator.optgroup) {
        operator.optgroup = null;
      } else {
        this.status.has_operator_optgroup = true; // register optgroup if needed

        if (!this.settings.optgroups[operator.optgroup]) {
          this.settings.optgroups[operator.optgroup] = operator.optgroup;
        }
      }
    }, this);

    if (this.status.has_operator_optgroup) {
      operators = Utils.groupSort(operators, 'optgroup');
    }

    return operators;
  };
  /**
   * Adds all events listeners to the builder
   * @private
   */


  QueryBuilder.prototype.bindEvents = function () {
    var self = this;
    var Selectors = QueryBuilder.selectors; // group condition change

    this.$el.on('change.queryBuilder', Selectors.group_condition, function () {
      if ($(this).is(':checked')) {
        var $group = $(this).closest(Selectors.group_container);
        self.getModel($group).condition = $(this).val();
      }
    }); // rule filter change

    this.$el.on('change.queryBuilder', Selectors.rule_filter, function () {
      var $rule = $(this).closest(Selectors.rule_container);
      self.getModel($rule).filter = self.getFilterById($(this).val());
    }); // rule operator change

    this.$el.on('change.queryBuilder', Selectors.rule_operator, function () {
      var $rule = $(this).closest(Selectors.rule_container);
      self.getModel($rule).operator = self.getOperatorByType($(this).val());
    }); // add rule button

    this.$el.on('click.queryBuilder', Selectors.add_rule, function () {
      var $group = $(this).closest(Selectors.group_container);
      self.addRule(self.getModel($group));
    }); // delete rule button

    this.$el.on('click.queryBuilder', Selectors.delete_rule, function () {
      var $rule = $(this).closest(Selectors.rule_container);
      self.deleteRule(self.getModel($rule));
    });

    if (this.settings.allow_groups !== 0) {
      // add group button
      this.$el.on('click.queryBuilder', Selectors.add_group, function () {
        var $group = $(this).closest(Selectors.group_container);
        self.addGroup(self.getModel($group));
      }); // delete group button

      this.$el.on('click.queryBuilder', Selectors.delete_group, function () {
        var $group = $(this).closest(Selectors.group_container);
        self.deleteGroup(self.getModel($group));
      });
    } // model events


    this.model.on({
      'drop': function (e, node) {
        node.$el.remove();
        self.refreshGroupsConditions();
      },
      'add': function (e, parent, node, index) {
        if (index === 0) {
          node.$el.prependTo(parent.$el.find('>' + QueryBuilder.selectors.rules_list));
        } else {
          node.$el.insertAfter(parent.rules[index - 1].$el);
        }

        self.refreshGroupsConditions();
      },
      'move': function (e, node, group, index) {
        node.$el.detach();

        if (index === 0) {
          node.$el.prependTo(group.$el.find('>' + QueryBuilder.selectors.rules_list));
        } else {
          node.$el.insertAfter(group.rules[index - 1].$el);
        }

        self.refreshGroupsConditions();
      },
      'update': function (e, node, field, value, oldValue) {
        if (node instanceof Rule) {
          switch (field) {
            case 'error':
              self.updateError(node);
              break;

            case 'flags':
              self.applyRuleFlags(node);
              break;

            case 'filter':
              self.updateRuleFilter(node, oldValue);
              break;

            case 'operator':
              self.updateRuleOperator(node, oldValue);
              break;

            case 'value':
              self.updateRuleValue(node, oldValue);
              break;
          }
        } else {
          switch (field) {
            case 'error':
              self.updateError(node);
              break;

            case 'flags':
              self.applyGroupFlags(node);
              break;

            case 'condition':
              self.updateGroupCondition(node, oldValue);
              break;
          }
        }
      }
    });
  };
  /**
   * Creates the root group
   * @param {boolean} [addRule=true] - adds a default empty rule
   * @param {object} [data] - group custom data
   * @param {object} [flags] - flags to apply to the group
   * @returns {Group} root group
   * @fires QueryBuilder.afterAddGroup
   */


  QueryBuilder.prototype.setRoot = function (addRule, data, flags) {
    addRule = addRule === undefined || addRule === true;
    var group_id = this.nextGroupId();
    var $group = $(this.getGroupTemplate(group_id, 1));
    this.$el.append($group);
    this.model.root = new Group(null, $group);
    this.model.root.model = this.model;
    this.model.root.data = data;
    this.model.root.flags = $.extend({}, this.settings.default_group_flags, flags);
    this.model.root.condition = this.settings.default_condition;
    this.trigger('afterAddGroup', this.model.root);

    if (addRule) {
      this.addRule(this.model.root);
    }

    return this.model.root;
  };
  /**
   * Adds a new group
   * @param {Group} parent
   * @param {boolean} [addRule=true] - adds a default empty rule
   * @param {object} [data] - group custom data
   * @param {object} [flags] - flags to apply to the group
   * @returns {Group}
   * @fires QueryBuilder.beforeAddGroup
   * @fires QueryBuilder.afterAddGroup
   */


  QueryBuilder.prototype.addGroup = function (parent, addRule, data, flags) {
    addRule = addRule === undefined || addRule === true;
    var level = parent.level + 1;
    /**
     * Just before adding a group, can be prevented.
     * @event beforeAddGroup
     * @memberof QueryBuilder
     * @param {Group} parent
     * @param {boolean} addRule - if an empty rule will be added in the group
     * @param {int} level - nesting level of the group, 1 is the root group
     */

    var e = this.trigger('beforeAddGroup', parent, addRule, level);

    if (e.isDefaultPrevented()) {
      return null;
    }

    var group_id = this.nextGroupId();
    var $group = $(this.getGroupTemplate(group_id, level));
    var model = parent.addGroup($group);
    model.data = data;
    model.flags = $.extend({}, this.settings.default_group_flags, flags);
    model.condition = this.settings.default_condition;
    /**
     * Just after adding a group
     * @event afterAddGroup
     * @memberof QueryBuilder
     * @param {Group} group
     */

    this.trigger('afterAddGroup', model);
    /**
     * After any change in the rules
     * @event rulesChanged
     * @memberof QueryBuilder
     */

    this.trigger('rulesChanged');

    if (addRule) {
      this.addRule(model);
    }

    return model;
  };
  /**
   * Tries to delete a group. The group is not deleted if at least one rule is flagged `no_delete`.
   * @param {Group} group
   * @returns {boolean} if the group has been deleted
   * @fires QueryBuilder.beforeDeleteGroup
   * @fires QueryBuilder.afterDeleteGroup
   */


  QueryBuilder.prototype.deleteGroup = function (group) {
    if (group.isRoot()) {
      return false;
    }
    /**
     * Just before deleting a group, can be prevented
     * @event beforeDeleteGroup
     * @memberof QueryBuilder
     * @param {Group} parent
     */


    var e = this.trigger('beforeDeleteGroup', group);

    if (e.isDefaultPrevented()) {
      return false;
    }

    var del = true;
    group.each('reverse', function (rule) {
      del &= this.deleteRule(rule);
    }, function (group) {
      del &= this.deleteGroup(group);
    }, this);

    if (del) {
      group.drop();
      /**
       * Just after deleting a group
       * @event afterDeleteGroup
       * @memberof QueryBuilder
       */

      this.trigger('afterDeleteGroup');
      this.trigger('rulesChanged');
    }

    return del;
  };
  /**
   * Performs actions when a group's condition changes
   * @param {Group} group
   * @param {object} previousCondition
   * @fires QueryBuilder.afterUpdateGroupCondition
   * @private
   */


  QueryBuilder.prototype.updateGroupCondition = function (group, previousCondition) {
    group.$el.find('>' + QueryBuilder.selectors.group_condition).each(function () {
      var $this = $(this);
      $this.prop('checked', $this.val() === group.condition);
      $this.parent().toggleClass('active', $this.val() === group.condition);
    });
    /**
     * After the group condition has been modified
     * @event afterUpdateGroupCondition
     * @memberof QueryBuilder
     * @param {Group} group
     * @param {object} previousCondition
     */

    this.trigger('afterUpdateGroupCondition', group, previousCondition);
    this.trigger('rulesChanged');
  };
  /**
   * Updates the visibility of conditions based on number of rules inside each group
   * @private
   */


  QueryBuilder.prototype.refreshGroupsConditions = function () {
    (function walk(group) {
      if (!group.flags || group.flags && !group.flags.condition_readonly) {
        group.$el.find('>' + QueryBuilder.selectors.group_condition).prop('disabled', group.rules.length <= 1).parent().toggleClass('disabled', group.rules.length <= 1);
      }

      group.each(null, function (group) {
        walk(group);
      }, this);
    })(this.model.root);
  };
  /**
   * Adds a new rule
   * @param {Group} parent
   * @param {object} [data] - rule custom data
   * @param {object} [flags] - flags to apply to the rule
   * @returns {Rule}
   * @fires QueryBuilder.beforeAddRule
   * @fires QueryBuilder.afterAddRule
   * @fires QueryBuilder.changer:getDefaultFilter
   */


  QueryBuilder.prototype.addRule = function (parent, data, flags) {
    /**
     * Just before adding a rule, can be prevented
     * @event beforeAddRule
     * @memberof QueryBuilder
     * @param {Group} parent
     */
    var e = this.trigger('beforeAddRule', parent);

    if (e.isDefaultPrevented()) {
      return null;
    }

    var rule_id = this.nextRuleId();
    var $rule = $(this.getRuleTemplate(rule_id));
    var model = parent.addRule($rule);
    model.data = data;
    model.flags = $.extend({}, this.settings.default_rule_flags, flags);
    /**
     * Just after adding a rule
     * @event afterAddRule
     * @memberof QueryBuilder
     * @param {Rule} rule
     */

    this.trigger('afterAddRule', model);
    this.trigger('rulesChanged');
    this.createRuleFilters(model);

    if (this.settings.default_filter || !this.settings.display_empty_filter) {
      /**
       * Modifies the default filter for a rule
       * @event changer:getDefaultFilter
       * @memberof QueryBuilder
       * @param {QueryBuilder.Filter} filter
       * @param {Rule} rule
       * @returns {QueryBuilder.Filter}
       */
      model.filter = this.change('getDefaultFilter', this.getFilterById(this.settings.default_filter || this.filters[0].id), model);
    }

    return model;
  };
  /**
   * Tries to delete a rule
   * @param {Rule} rule
   * @returns {boolean} if the rule has been deleted
   * @fires QueryBuilder.beforeDeleteRule
   * @fires QueryBuilder.afterDeleteRule
   */


  QueryBuilder.prototype.deleteRule = function (rule) {
    if (rule.flags.no_delete) {
      return false;
    }
    /**
     * Just before deleting a rule, can be prevented
     * @event beforeDeleteRule
     * @memberof QueryBuilder
     * @param {Rule} rule
     */


    var e = this.trigger('beforeDeleteRule', rule);

    if (e.isDefaultPrevented()) {
      return false;
    }

    rule.drop();
    /**
     * Just after deleting a rule
     * @event afterDeleteRule
     * @memberof QueryBuilder
     */

    this.trigger('afterDeleteRule');
    this.trigger('rulesChanged');
    return true;
  };
  /**
   * Creates the filters for a rule
   * @param {Rule} rule
   * @fires QueryBuilder.changer:getRuleFilters
   * @fires QueryBuilder.afterCreateRuleFilters
   * @private
   */


  QueryBuilder.prototype.createRuleFilters = function (rule) {
    /**
     * Modifies the list a filters available for a rule
     * @event changer:getRuleFilters
     * @memberof QueryBuilder
     * @param {QueryBuilder.Filter[]} filters
     * @param {Rule} rule
     * @returns {QueryBuilder.Filter[]}
     */
    var filters = this.change('getRuleFilters', this.filters, rule);
    var $filterSelect = $(this.getRuleFilterSelect(rule, filters));
    rule.$el.find(QueryBuilder.selectors.filter_container).html($filterSelect);
    /**
     * After creating the dropdown for filters
     * @event afterCreateRuleFilters
     * @memberof QueryBuilder
     * @param {Rule} rule
     */

    this.trigger('afterCreateRuleFilters', rule);
    this.applyRuleFlags(rule);
  };
  /**
   * Creates the operators for a rule and init the rule operator
   * @param {Rule} rule
   * @fires QueryBuilder.afterCreateRuleOperators
   * @private
   */


  QueryBuilder.prototype.createRuleOperators = function (rule) {
    var $operatorContainer = rule.$el.find(QueryBuilder.selectors.operator_container).empty();

    if (!rule.filter) {
      return;
    }

    var operators = this.getOperators(rule.filter);
    var $operatorSelect = $(this.getRuleOperatorSelect(rule, operators));
    $operatorContainer.html($operatorSelect); // set the operator without triggering update event

    if (rule.filter.default_operator) {
      rule.__.operator = this.getOperatorByType(rule.filter.default_operator);
    } else {
      rule.__.operator = operators[0];
    }

    rule.$el.find(QueryBuilder.selectors.rule_operator).val(rule.operator.type);
    /**
     * After creating the dropdown for operators
     * @event afterCreateRuleOperators
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {QueryBuilder.Operator[]} operators - allowed operators for this rule
     */

    this.trigger('afterCreateRuleOperators', rule, operators);
    this.applyRuleFlags(rule);
  };
  /**
   * Creates the main input for a rule
   * @param {Rule} rule
   * @fires QueryBuilder.afterCreateRuleInput
   * @private
   */


  QueryBuilder.prototype.createRuleInput = function (rule) {
    var $valueContainer = rule.$el.find(QueryBuilder.selectors.value_container).empty();
    rule.__.value = undefined;

    if (!rule.filter || !rule.operator || rule.operator.nb_inputs === 0) {
      return;
    }

    var self = this;
    var $inputs = $();
    var filter = rule.filter;

    for (var i = 0; i < rule.operator.nb_inputs; i++) {
      var $ruleInput = $(this.getRuleInput(rule, i));
      if (i > 0) $valueContainer.append(this.settings.inputs_separator);
      $valueContainer.append($ruleInput);
      $inputs = $inputs.add($ruleInput);
    }

    $valueContainer.css('display', '');
    $inputs.on('change ' + (filter.input_event || ''), function () {
      if (!rule._updating_input) {
        rule._updating_value = true;
        rule.value = self.getRuleInputValue(rule);
        rule._updating_value = false;
      }
    });

    if (filter.plugin) {
      $inputs[filter.plugin](filter.plugin_config || {});
    }
    /**
     * After creating the input for a rule and initializing optional plugin
     * @event afterCreateRuleInput
     * @memberof QueryBuilder
     * @param {Rule} rule
     */


    this.trigger('afterCreateRuleInput', rule);

    if (filter.default_value !== undefined) {
      rule.value = filter.default_value;
    } else {
      rule._updating_value = true;
      rule.value = self.getRuleInputValue(rule);
      rule._updating_value = false;
    }

    this.applyRuleFlags(rule);
  };
  /**
   * Performs action when a rule's filter changes
   * @param {Rule} rule
   * @param {object} previousFilter
   * @fires QueryBuilder.afterUpdateRuleFilter
   * @private
   */


  QueryBuilder.prototype.updateRuleFilter = function (rule, previousFilter) {
    this.createRuleOperators(rule);
    this.createRuleInput(rule);
    rule.$el.find(QueryBuilder.selectors.rule_filter).val(rule.filter ? rule.filter.id : '-1'); // clear rule data if the filter changed

    if (previousFilter && rule.filter && previousFilter.id !== rule.filter.id) {
      rule.data = undefined;
    }
    /**
     * After the filter has been updated and the operators and input re-created
     * @event afterUpdateRuleFilter
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {object} previousFilter
     */


    this.trigger('afterUpdateRuleFilter', rule, previousFilter);
    this.trigger('rulesChanged');
  };
  /**
   * Performs actions when a rule's operator changes
   * @param {Rule} rule
   * @param {object} previousOperator
   * @fires QueryBuilder.afterUpdateRuleOperator
   * @private
   */


  QueryBuilder.prototype.updateRuleOperator = function (rule, previousOperator) {
    var $valueContainer = rule.$el.find(QueryBuilder.selectors.value_container);

    if (!rule.operator || rule.operator.nb_inputs === 0) {
      $valueContainer.hide();
      rule.__.value = undefined;
    } else {
      $valueContainer.css('display', '');

      if ($valueContainer.is(':empty') || !previousOperator || rule.operator.nb_inputs !== previousOperator.nb_inputs || rule.operator.optgroup !== previousOperator.optgroup) {
        this.createRuleInput(rule);
      }
    }

    if (rule.operator) {
      rule.$el.find(QueryBuilder.selectors.rule_operator).val(rule.operator.type); // refresh value if the format changed for this operator

      rule.__.value = this.getRuleInputValue(rule);
    }
    /**
     *  After the operator has been updated and the input optionally re-created
     * @event afterUpdateRuleOperator
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {object} previousOperator
     */


    this.trigger('afterUpdateRuleOperator', rule, previousOperator);
    this.trigger('rulesChanged');
  };
  /**
   * Performs actions when rule's value changes
   * @param {Rule} rule
   * @param {object} previousValue
   * @fires QueryBuilder.afterUpdateRuleValue
   * @private
   */


  QueryBuilder.prototype.updateRuleValue = function (rule, previousValue) {
    if (!rule._updating_value) {
      this.setRuleInputValue(rule, rule.value);
    }
    /**
     * After the rule value has been modified
     * @event afterUpdateRuleValue
     * @memberof QueryBuilder
     * @param {Rule} rule
     * @param {*} previousValue
     */


    this.trigger('afterUpdateRuleValue', rule, previousValue);
    this.trigger('rulesChanged');
  };
  /**
   * Changes a rule's properties depending on its flags
   * @param {Rule} rule
   * @fires QueryBuilder.afterApplyRuleFlags
   * @private
   */


  QueryBuilder.prototype.applyRuleFlags = function (rule) {
    var flags = rule.flags;
    var Selectors = QueryBuilder.selectors;
    rule.$el.find(Selectors.rule_filter).prop('disabled', flags.filter_readonly);
    rule.$el.find(Selectors.rule_operator).prop('disabled', flags.operator_readonly);
    rule.$el.find(Selectors.rule_value).prop('disabled', flags.value_readonly);

    if (flags.no_delete) {
      rule.$el.find(Selectors.delete_rule).remove();
    }
    /**
     * After rule's flags has been applied
     * @event afterApplyRuleFlags
     * @memberof QueryBuilder
     * @param {Rule} rule
     */


    this.trigger('afterApplyRuleFlags', rule);
  };
  /**
   * Changes group's properties depending on its flags
   * @param {Group} group
   * @fires QueryBuilder.afterApplyGroupFlags
   * @private
   */


  QueryBuilder.prototype.applyGroupFlags = function (group) {
    var flags = group.flags;
    var Selectors = QueryBuilder.selectors;
    group.$el.find('>' + Selectors.group_condition).prop('disabled', flags.condition_readonly).parent().toggleClass('readonly', flags.condition_readonly);

    if (flags.no_add_rule) {
      group.$el.find(Selectors.add_rule).remove();
    }

    if (flags.no_add_group) {
      group.$el.find(Selectors.add_group).remove();
    }

    if (flags.no_delete) {
      group.$el.find(Selectors.delete_group).remove();
    }
    /**
     * After group's flags has been applied
     * @event afterApplyGroupFlags
     * @memberof QueryBuilder
     * @param {Group} group
     */


    this.trigger('afterApplyGroupFlags', group);
  };
  /**
   * Clears all errors markers
   * @param {Node} [node] default is root Group
   */


  QueryBuilder.prototype.clearErrors = function (node) {
    node = node || this.model.root;

    if (!node) {
      return;
    }

    node.error = null;

    if (node instanceof Group) {
      node.each(function (rule) {
        rule.error = null;
      }, function (group) {
        this.clearErrors(group);
      }, this);
    }
  };
  /**
   * Adds/Removes error on a Rule or Group
   * @param {Node} node
   * @fires QueryBuilder.changer:displayError
   * @private
   */


  QueryBuilder.prototype.updateError = function (node) {
    if (this.settings.display_errors) {
      if (node.error === null) {
        node.$el.removeClass('has-error');
      } else {
        var errorMessage = this.translate('errors', node.error[0]);
        errorMessage = Utils.fmt(errorMessage, node.error.slice(1));
        /**
         * Modifies an error message before display
         * @event changer:displayError
         * @memberof QueryBuilder
         * @param {string} errorMessage - the error message (translated and formatted)
         * @param {array} error - the raw error array (error code and optional arguments)
         * @param {Node} node
         * @returns {string}
         */

        errorMessage = this.change('displayError', errorMessage, node.error, node);
        node.$el.addClass('has-error').find(QueryBuilder.selectors.error_container).eq(0).attr('title', errorMessage);
      }
    }
  };
  /**
   * Triggers a validation error event
   * @param {Node} node
   * @param {string|array} error
   * @param {*} value
   * @fires QueryBuilder.validationError
   * @private
   */


  QueryBuilder.prototype.triggerValidationError = function (node, error, value) {
    if (!$.isArray(error)) {
      error = [error];
    }
    /**
     * Fired when a validation error occurred, can be prevented
     * @event validationError
     * @memberof QueryBuilder
     * @param {Node} node
     * @param {string} error
     * @param {*} value
     */


    var e = this.trigger('validationError', node, error, value);

    if (!e.isDefaultPrevented()) {
      node.error = error;
    }
  };
  /**
   * Destroys the builder
   * @fires QueryBuilder.beforeDestroy
   */


  QueryBuilder.prototype.destroy = function () {
    /**
     * Before the {@link QueryBuilder#destroy} method
     * @event beforeDestroy
     * @memberof QueryBuilder
     */
    this.trigger('beforeDestroy');

    if (this.status.generated_id) {
      this.$el.removeAttr('id');
    }

    this.clear();
    this.model = null;
    this.$el.off('.queryBuilder').removeClass('query-builder').removeData('queryBuilder');
    delete this.$el[0].queryBuilder;
  };
  /**
   * Clear all rules and resets the root group
   * @fires QueryBuilder.beforeReset
   * @fires QueryBuilder.afterReset
   */


  QueryBuilder.prototype.reset = function () {
    /**
     * Before the {@link QueryBuilder#reset} method, can be prevented
     * @event beforeReset
     * @memberof QueryBuilder
     */
    var e = this.trigger('beforeReset');

    if (e.isDefaultPrevented()) {
      return;
    }

    this.status.group_id = 1;
    this.status.rule_id = 0;
    this.model.root.empty();
    this.model.root.data = undefined;
    this.model.root.flags = $.extend({}, this.settings.default_group_flags);
    this.model.root.condition = this.settings.default_condition;
    this.addRule(this.model.root);
    /**
     * After the {@link QueryBuilder#reset} method
     * @event afterReset
     * @memberof QueryBuilder
     */

    this.trigger('afterReset');
    this.trigger('rulesChanged');
  };
  /**
   * Clears all rules and removes the root group
   * @fires QueryBuilder.beforeClear
   * @fires QueryBuilder.afterClear
   */


  QueryBuilder.prototype.clear = function () {
    /**
     * Before the {@link QueryBuilder#clear} method, can be prevented
     * @event beforeClear
     * @memberof QueryBuilder
     */
    var e = this.trigger('beforeClear');

    if (e.isDefaultPrevented()) {
      return;
    }

    this.status.group_id = 0;
    this.status.rule_id = 0;

    if (this.model.root) {
      this.model.root.drop();
      this.model.root = null;
    }
    /**
     * After the {@link QueryBuilder#clear} method
     * @event afterClear
     * @memberof QueryBuilder
     */


    this.trigger('afterClear');
    this.trigger('rulesChanged');
  };
  /**
   * Modifies the builder configuration.<br>
   * Only options defined in QueryBuilder.modifiable_options are modifiable
   * @param {object} options
   */


  QueryBuilder.prototype.setOptions = function (options) {
    $.each(options, function (opt, value) {
      if (QueryBuilder.modifiable_options.indexOf(opt) !== -1) {
        this.settings[opt] = value;
      }
    }.bind(this));
  };
  /**
   * Returns the model associated to a DOM object, or the root model
   * @param {jQuery} [target]
   * @returns {Node}
   */


  QueryBuilder.prototype.getModel = function (target) {
    if (!target) {
      return this.model.root;
    } else if (target instanceof Node) {
      return target;
    } else {
      return $(target).data('queryBuilderModel');
    }
  };
  /**
   * Validates the whole builder
   * @param {object} [options]
   * @param {boolean} [options.skip_empty=false] - skips validating rules that have no filter selected
   * @returns {boolean}
   * @fires QueryBuilder.changer:validate
   */


  QueryBuilder.prototype.validate = function (options) {
    options = $.extend({
      skip_empty: false
    }, options);
    this.clearErrors();
    var self = this;

    var valid = function parse(group) {
      var done = 0;
      var errors = 0;
      group.each(function (rule) {
        if (!rule.filter && options.skip_empty) {
          return;
        }

        if (!rule.filter) {
          self.triggerValidationError(rule, 'no_filter', null);
          errors++;
          return;
        }

        if (!rule.operator) {
          self.triggerValidationError(rule, 'no_operator', null);
          errors++;
          return;
        }

        if (rule.operator.nb_inputs !== 0) {
          var valid = self.validateValue(rule, rule.value);

          if (valid !== true) {
            self.triggerValidationError(rule, valid, rule.value);
            errors++;
            return;
          }
        }

        done++;
      }, function (group) {
        var res = parse(group);

        if (res === true) {
          done++;
        } else if (res === false) {
          errors++;
        }
      });

      if (errors > 0) {
        return false;
      } else if (done === 0 && !group.isRoot() && options.skip_empty) {
        return null;
      } else if (done === 0 && (!self.settings.allow_empty || !group.isRoot())) {
        self.triggerValidationError(group, 'empty_group', null);
        return false;
      }

      return true;
    }(this.model.root);
    /**
     * Modifies the result of the {@link QueryBuilder#validate} method
     * @event changer:validate
     * @memberof QueryBuilder
     * @param {boolean} valid
     * @returns {boolean}
     */


    return this.change('validate', valid);
  };
  /**
   * Gets an object representing current rules
   * @param {object} [options]
   * @param {boolean|string} [options.get_flags=false] - export flags, true: only changes from default flags or 'all'
   * @param {boolean} [options.allow_invalid=false] - returns rules even if they are invalid
   * @param {boolean} [options.skip_empty=false] - remove rules that have no filter selected
   * @returns {object}
   * @fires QueryBuilder.changer:ruleToJson
   * @fires QueryBuilder.changer:groupToJson
   * @fires QueryBuilder.changer:getRules
   */


  QueryBuilder.prototype.getRules = function (options) {
    options = $.extend({
      get_flags: false,
      allow_invalid: false,
      skip_empty: false
    }, options);
    var valid = this.validate(options);

    if (!valid && !options.allow_invalid) {
      return null;
    }

    var self = this;

    var out = function parse(group) {
      var groupData = {
        condition: group.condition,
        rules: []
      };

      if (group.data) {
        groupData.data = $.extendext(true, 'replace', {}, group.data);
      }

      if (options.get_flags) {
        var flags = self.getGroupFlags(group.flags, options.get_flags === 'all');

        if (!$.isEmptyObject(flags)) {
          groupData.flags = flags;
        }
      }

      group.each(function (rule) {
        if (!rule.filter && options.skip_empty) {
          return;
        }

        var value = null;

        if (!rule.operator || rule.operator.nb_inputs !== 0) {
          value = rule.value;
        }

        var ruleData = {
          id: rule.filter ? rule.filter.id : null,
          field: rule.filter ? rule.filter.field : null,
          type: rule.filter ? rule.filter.type : null,
          input: rule.filter ? rule.filter.input : null,
          operator: rule.operator ? rule.operator.type : null,
          value: value
        };

        if (rule.filter && rule.filter.data || rule.data) {
          ruleData.data = $.extendext(true, 'replace', {}, rule.filter.data, rule.data);
        }

        if (options.get_flags) {
          var flags = self.getRuleFlags(rule.flags, options.get_flags === 'all');

          if (!$.isEmptyObject(flags)) {
            ruleData.flags = flags;
          }
        }
        /**
         * Modifies the JSON generated from a Rule object
         * @event changer:ruleToJson
         * @memberof QueryBuilder
         * @param {object} json
         * @param {Rule} rule
         * @returns {object}
         */


        groupData.rules.push(self.change('ruleToJson', ruleData, rule));
      }, function (model) {
        var data = parse(model);

        if (data.rules.length !== 0 || !options.skip_empty) {
          groupData.rules.push(data);
        }
      }, this);
      /**
       * Modifies the JSON generated from a Group object
       * @event changer:groupToJson
       * @memberof QueryBuilder
       * @param {object} json
       * @param {Group} group
       * @returns {object}
       */

      return self.change('groupToJson', groupData, group);
    }(this.model.root);

    out.valid = valid;
    /**
     * Modifies the result of the {@link QueryBuilder#getRules} method
     * @event changer:getRules
     * @memberof QueryBuilder
     * @param {object} json
     * @returns {object}
     */

    return this.change('getRules', out);
  };
  /**
   * Sets rules from object
   * @param {object} data
   * @param {object} [options]
   * @param {boolean} [options.allow_invalid=false] - silent-fail if the data are invalid
   * @throws RulesError, UndefinedConditionError
   * @fires QueryBuilder.changer:setRules
   * @fires QueryBuilder.changer:jsonToRule
   * @fires QueryBuilder.changer:jsonToGroup
   * @fires QueryBuilder.afterSetRules
   */


  QueryBuilder.prototype.setRules = function (data, options) {
    options = $.extend({
      allow_invalid: false
    }, options);

    if ($.isArray(data)) {
      data = {
        condition: this.settings.default_condition,
        rules: data
      };
    }

    if (!data || !data.rules || data.rules.length === 0 && !this.settings.allow_empty) {
      Utils.error('RulesParse', 'Incorrect data object passed');
    }

    this.clear();
    this.setRoot(false, data.data, this.parseGroupFlags(data));
    /**
     * Modifies data before the {@link QueryBuilder#setRules} method
     * @event changer:setRules
     * @memberof QueryBuilder
     * @param {object} json
     * @param {object} options
     * @returns {object}
     */

    data = this.change('setRules', data, options);
    var self = this;

    (function add(data, group) {
      if (group === null) {
        return;
      }

      if (data.condition === undefined) {
        data.condition = self.settings.default_condition;
      } else if (self.settings.conditions.indexOf(data.condition) == -1) {
        Utils.error(!options.allow_invalid, 'UndefinedCondition', 'Invalid condition "{0}"', data.condition);
        data.condition = self.settings.default_condition;
      }

      group.condition = data.condition;
      data.rules.forEach(function (item) {
        var model;

        if (item.rules !== undefined) {
          if (self.settings.allow_groups !== -1 && self.settings.allow_groups < group.level) {
            Utils.error(!options.allow_invalid, 'RulesParse', 'No more than {0} groups are allowed', self.settings.allow_groups);
            self.reset();
          } else {
            model = self.addGroup(group, false, item.data, self.parseGroupFlags(item));

            if (model === null) {
              return;
            }

            add(item, model);
          }
        } else {
          if (!item.empty) {
            if (item.id === undefined) {
              Utils.error(!options.allow_invalid, 'RulesParse', 'Missing rule field id');
              item.empty = true;
            }

            if (item.operator === undefined) {
              item.operator = 'equal';
            }
          }

          model = self.addRule(group, item.data, self.parseRuleFlags(item));

          if (model === null) {
            return;
          }

          if (!item.empty) {
            model.filter = self.getFilterById(item.id, !options.allow_invalid);
          }

          if (model.filter) {
            model.operator = self.getOperatorByType(item.operator, !options.allow_invalid);

            if (!model.operator) {
              model.operator = self.getOperators(model.filter)[0];
            }
          }

          if (model.operator && model.operator.nb_inputs !== 0) {
            if (item.value !== undefined) {
              model.value = item.value;
            } else if (model.filter.default_value !== undefined) {
              model.value = model.filter.default_value;
            }
          }
          /**
           * Modifies the Rule object generated from the JSON
           * @event changer:jsonToRule
           * @memberof QueryBuilder
           * @param {Rule} rule
           * @param {object} json
           * @returns {Rule} the same rule
           */


          if (self.change('jsonToRule', model, item) != model) {
            Utils.error('RulesParse', 'Plugin tried to change rule reference');
          }
        }
      });
      /**
       * Modifies the Group object generated from the JSON
       * @event changer:jsonToGroup
       * @memberof QueryBuilder
       * @param {Group} group
       * @param {object} json
       * @returns {Group} the same group
       */

      if (self.change('jsonToGroup', group, data) != group) {
        Utils.error('RulesParse', 'Plugin tried to change group reference');
      }
    })(data, this.model.root);
    /**
     * After the {@link QueryBuilder#setRules} method
     * @event afterSetRules
     * @memberof QueryBuilder
     */


    this.trigger('afterSetRules');
  };
  /**
   * Performs value validation
   * @param {Rule} rule
   * @param {string|string[]} value
   * @returns {array|boolean} true or error array
   * @fires QueryBuilder.changer:validateValue
   */


  QueryBuilder.prototype.validateValue = function (rule, value) {
    var validation = rule.filter.validation || {};
    var result = true;

    if (validation.callback) {
      result = validation.callback.call(this, value, rule);
    } else {
      result = this._validateValue(rule, value);
    }
    /**
     * Modifies the result of the rule validation method
     * @event changer:validateValue
     * @memberof QueryBuilder
     * @param {array|boolean} result - true or an error array
     * @param {*} value
     * @param {Rule} rule
     * @returns {array|boolean}
     */


    return this.change('validateValue', result, value, rule);
  };
  /**
   * Default validation function
   * @param {Rule} rule
   * @param {string|string[]} value
   * @returns {array|boolean} true or error array
   * @throws ConfigError
   * @private
   */


  QueryBuilder.prototype._validateValue = function (rule, value) {
    var filter = rule.filter;
    var operator = rule.operator;
    var validation = filter.validation || {};
    var result = true;
    var tmp, tempValue;

    if (rule.operator.nb_inputs === 1) {
      value = [value];
    }

    for (var i = 0; i < operator.nb_inputs; i++) {
      if (!operator.multiple && $.isArray(value[i]) && value[i].length > 1) {
        result = ['operator_not_multiple', operator.type, this.translate('operators', operator.type)];
        break;
      }

      switch (filter.input) {
        case 'radio':
          if (value[i] === undefined || value[i].length === 0) {
            if (!validation.allow_empty_value) {
              result = ['radio_empty'];
            }

            break;
          }

          break;

        case 'checkbox':
          if (value[i] === undefined || value[i].length === 0) {
            if (!validation.allow_empty_value) {
              result = ['checkbox_empty'];
            }

            break;
          }

          break;

        case 'select':
          if (value[i] === undefined || value[i].length === 0 || filter.placeholder && value[i] == filter.placeholder_value) {
            if (!validation.allow_empty_value) {
              result = ['select_empty'];
            }

            break;
          }

          break;

        default:
          tempValue = $.isArray(value[i]) ? value[i] : [value[i]];

          for (var j = 0; j < tempValue.length; j++) {
            switch (QueryBuilder.types[filter.type]) {
              case 'string':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['string_empty'];
                  }

                  break;
                }

                if (validation.min !== undefined) {
                  if (tempValue[j].length < parseInt(validation.min)) {
                    result = [this.getValidationMessage(validation, 'min', 'string_exceed_min_length'), validation.min];
                    break;
                  }
                }

                if (validation.max !== undefined) {
                  if (tempValue[j].length > parseInt(validation.max)) {
                    result = [this.getValidationMessage(validation, 'max', 'string_exceed_max_length'), validation.max];
                    break;
                  }
                }

                if (validation.format) {
                  if (typeof validation.format == 'string') {
                    validation.format = new RegExp(validation.format);
                  }

                  if (!validation.format.test(tempValue[j])) {
                    result = [this.getValidationMessage(validation, 'format', 'string_invalid_format'), validation.format];
                    break;
                  }
                }

                break;

              case 'number':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['number_nan'];
                  }

                  break;
                }

                if (isNaN(tempValue[j])) {
                  result = ['number_nan'];
                  break;
                }

                if (filter.type == 'integer') {
                  if (parseInt(tempValue[j]) != tempValue[j]) {
                    result = ['number_not_integer'];
                    break;
                  }
                } else {
                  if (parseFloat(tempValue[j]) != tempValue[j]) {
                    result = ['number_not_double'];
                    break;
                  }
                }

                if (validation.min !== undefined) {
                  if (tempValue[j] < parseFloat(validation.min)) {
                    result = [this.getValidationMessage(validation, 'min', 'number_exceed_min'), validation.min];
                    break;
                  }
                }

                if (validation.max !== undefined) {
                  if (tempValue[j] > parseFloat(validation.max)) {
                    result = [this.getValidationMessage(validation, 'max', 'number_exceed_max'), validation.max];
                    break;
                  }
                }

                if (validation.step !== undefined && validation.step !== 'any') {
                  var v = (tempValue[j] / validation.step).toPrecision(14);

                  if (parseInt(v) != v) {
                    result = [this.getValidationMessage(validation, 'step', 'number_wrong_step'), validation.step];
                    break;
                  }
                }

                break;

              case 'datetime':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['datetime_empty'];
                  }

                  break;
                } // we need MomentJS


                if (validation.format) {
                  if (!('moment' in window)) {
                    Utils.error('MissingLibrary', 'MomentJS is required for Date/Time validation. Get it here http://momentjs.com');
                  }

                  var datetime = moment(tempValue[j], validation.format);

                  if (!datetime.isValid()) {
                    result = [this.getValidationMessage(validation, 'format', 'datetime_invalid'), validation.format];
                    break;
                  } else {
                    if (validation.min) {
                      if (datetime < moment(validation.min, validation.format)) {
                        result = [this.getValidationMessage(validation, 'min', 'datetime_exceed_min'), validation.min];
                        break;
                      }
                    }

                    if (validation.max) {
                      if (datetime > moment(validation.max, validation.format)) {
                        result = [this.getValidationMessage(validation, 'max', 'datetime_exceed_max'), validation.max];
                        break;
                      }
                    }
                  }
                }

                break;

              case 'boolean':
                if (tempValue[j] === undefined || tempValue[j].length === 0) {
                  if (!validation.allow_empty_value) {
                    result = ['boolean_not_valid'];
                  }

                  break;
                }

                tmp = ('' + tempValue[j]).trim().toLowerCase();

                if (tmp !== 'true' && tmp !== 'false' && tmp !== '1' && tmp !== '0' && tempValue[j] !== 1 && tempValue[j] !== 0) {
                  result = ['boolean_not_valid'];
                  break;
                }

            }

            if (result !== true) {
              break;
            }
          }

      }

      if (result !== true) {
        break;
      }
    }

    if ((rule.operator.type === 'between' || rule.operator.type === 'not_between') && value.length === 2) {
      switch (QueryBuilder.types[filter.type]) {
        case 'number':
          if (value[0] > value[1]) {
            result = ['number_between_invalid', value[0], value[1]];
          }

          break;

        case 'datetime':
          // we need MomentJS
          if (validation.format) {
            if (!('moment' in window)) {
              Utils.error('MissingLibrary', 'MomentJS is required for Date/Time validation. Get it here http://momentjs.com');
            }

            if (moment(value[0], validation.format).isAfter(moment(value[1], validation.format))) {
              result = ['datetime_between_invalid', value[0], value[1]];
            }
          }

          break;
      }
    }

    return result;
  };
  /**
   * Returns an incremented group ID
   * @returns {string}
   * @private
   */


  QueryBuilder.prototype.nextGroupId = function () {
    return this.status.id + '_group_' + this.status.group_id++;
  };
  /**
   * Returns an incremented rule ID
   * @returns {string}
   * @private
   */


  QueryBuilder.prototype.nextRuleId = function () {
    return this.status.id + '_rule_' + this.status.rule_id++;
  };
  /**
   * Returns the operators for a filter
   * @param {string|object} filter - filter id or filter object
   * @returns {object[]}
   * @fires QueryBuilder.changer:getOperators
   */


  QueryBuilder.prototype.getOperators = function (filter) {
    if (typeof filter == 'string') {
      filter = this.getFilterById(filter);
    }

    var result = [];

    for (var i = 0, l = this.operators.length; i < l; i++) {
      // filter operators check
      if (filter.operators) {
        if (filter.operators.indexOf(this.operators[i].type) == -1) {
          continue;
        }
      } // type check
      else if (this.operators[i].apply_to.indexOf(QueryBuilder.types[filter.type]) == -1) {
          continue;
        }

      result.push(this.operators[i]);
    } // keep sort order defined for the filter


    if (filter.operators) {
      result.sort(function (a, b) {
        return filter.operators.indexOf(a.type) - filter.operators.indexOf(b.type);
      });
    }
    /**
     * Modifies the operators available for a filter
     * @event changer:getOperators
     * @memberof QueryBuilder
     * @param {QueryBuilder.Operator[]} operators
     * @param {QueryBuilder.Filter} filter
     * @returns {QueryBuilder.Operator[]}
     */


    return this.change('getOperators', result, filter);
  };
  /**
   * Returns a particular filter by its id
   * @param {string} id
   * @param {boolean} [doThrow=true]
   * @returns {object|null}
   * @throws UndefinedFilterError
   */


  QueryBuilder.prototype.getFilterById = function (id, doThrow) {
    if (id == '-1') {
      return null;
    }

    for (var i = 0, l = this.filters.length; i < l; i++) {
      if (this.filters[i].id == id) {
        return this.filters[i];
      }
    }

    Utils.error(doThrow !== false, 'UndefinedFilter', 'Undefined filter "{0}"', id);
    return null;
  };
  /**
   * Returns a particular operator by its type
   * @param {string} type
   * @param {boolean} [doThrow=true]
   * @returns {object|null}
   * @throws UndefinedOperatorError
   */


  QueryBuilder.prototype.getOperatorByType = function (type, doThrow) {
    if (type == '-1') {
      return null;
    }

    for (var i = 0, l = this.operators.length; i < l; i++) {
      if (this.operators[i].type == type) {
        return this.operators[i];
      }
    }

    Utils.error(doThrow !== false, 'UndefinedOperator', 'Undefined operator "{0}"', type);
    return null;
  };
  /**
   * Returns rule's current input value
   * @param {Rule} rule
   * @returns {*}
   * @fires QueryBuilder.changer:getRuleValue
   * @private
   */


  QueryBuilder.prototype.getRuleInputValue = function (rule) {
    var filter = rule.filter;
    var operator = rule.operator;
    var value = [];

    if (filter.valueGetter) {
      value = filter.valueGetter.call(this, rule);
    } else {
      var $value = rule.$el.find(QueryBuilder.selectors.value_container);

      for (var i = 0; i < operator.nb_inputs; i++) {
        var name = Utils.escapeElementId(rule.id + '_value_' + i);
        var tmp;

        switch (filter.input) {
          case 'radio':
            value.push($value.find('[name=' + name + ']:checked').val());
            break;

          case 'checkbox':
            tmp = []; // jshint loopfunc:true

            $value.find('[name=' + name + ']:checked').each(function () {
              tmp.push($(this).val());
            }); // jshint loopfunc:false

            value.push(tmp);
            break;

          case 'select':
            if (filter.multiple) {
              tmp = []; // jshint loopfunc:true

              $value.find('[name=' + name + '] option:selected').each(function () {
                tmp.push($(this).val());
              }); // jshint loopfunc:false

              value.push(tmp);
            } else {
              value.push($value.find('[name=' + name + '] option:selected').val());
            }

            break;

          default:
            value.push($value.find('[name=' + name + ']').val());
        }
      }

      value = value.map(function (val) {
        if (operator.multiple && filter.value_separator && typeof val == 'string') {
          val = val.split(filter.value_separator);
        }

        if ($.isArray(val)) {
          return val.map(function (subval) {
            return Utils.changeType(subval, filter.type);
          });
        } else {
          return Utils.changeType(val, filter.type);
        }
      });

      if (operator.nb_inputs === 1) {
        value = value[0];
      } // @deprecated


      if (filter.valueParser) {
        value = filter.valueParser.call(this, rule, value);
      }
    }
    /**
     * Modifies the rule's value grabbed from the DOM
     * @event changer:getRuleValue
     * @memberof QueryBuilder
     * @param {*} value
     * @param {Rule} rule
     * @returns {*}
     */


    return this.change('getRuleValue', value, rule);
  };
  /**
   * Sets the value of a rule's input
   * @param {Rule} rule
   * @param {*} value
   * @private
   */


  QueryBuilder.prototype.setRuleInputValue = function (rule, value) {
    var filter = rule.filter;
    var operator = rule.operator;

    if (!filter || !operator) {
      return;
    }

    rule._updating_input = true;

    if (filter.valueSetter) {
      filter.valueSetter.call(this, rule, value);
    } else {
      var $value = rule.$el.find(QueryBuilder.selectors.value_container);

      if (operator.nb_inputs == 1) {
        value = [value];
      }

      for (var i = 0; i < operator.nb_inputs; i++) {
        var name = Utils.escapeElementId(rule.id + '_value_' + i);

        switch (filter.input) {
          case 'radio':
            $value.find('[name=' + name + '][value="' + value[i] + '"]').prop('checked', true).trigger('change');
            break;

          case 'checkbox':
            if (!$.isArray(value[i])) {
              value[i] = [value[i]];
            } // jshint loopfunc:true


            value[i].forEach(function (value) {
              $value.find('[name=' + name + '][value="' + value + '"]').prop('checked', true).trigger('change');
            }); // jshint loopfunc:false

            break;

          default:
            if (operator.multiple && filter.value_separator && $.isArray(value[i])) {
              value[i] = value[i].join(filter.value_separator);
            }

            $value.find('[name=' + name + ']').val(value[i]).trigger('change');
            break;
        }
      }
    }

    rule._updating_input = false;
  };
  /**
   * Parses rule flags
   * @param {object} rule
   * @returns {object}
   * @fires QueryBuilder.changer:parseRuleFlags
   * @private
   */


  QueryBuilder.prototype.parseRuleFlags = function (rule) {
    var flags = $.extend({}, this.settings.default_rule_flags);

    if (rule.readonly) {
      $.extend(flags, {
        filter_readonly: true,
        operator_readonly: true,
        value_readonly: true,
        no_delete: true
      });
    }

    if (rule.flags) {
      $.extend(flags, rule.flags);
    }
    /**
     * Modifies the consolidated rule's flags
     * @event changer:parseRuleFlags
     * @memberof QueryBuilder
     * @param {object} flags
     * @param {object} rule - <b>not</b> a Rule object
     * @returns {object}
     */


    return this.change('parseRuleFlags', flags, rule);
  };
  /**
   * Gets a copy of flags of a rule
   * @param {object} flags
   * @param {boolean} [all=false] - return all flags or only changes from default flags
   * @returns {object}
   * @private
   */


  QueryBuilder.prototype.getRuleFlags = function (flags, all) {
    if (all) {
      return $.extend({}, flags);
    } else {
      var ret = {};
      $.each(this.settings.default_rule_flags, function (key, value) {
        if (flags[key] !== value) {
          ret[key] = flags[key];
        }
      });
      return ret;
    }
  };
  /**
   * Parses group flags
   * @param {object} group
   * @returns {object}
   * @fires QueryBuilder.changer:parseGroupFlags
   * @private
   */


  QueryBuilder.prototype.parseGroupFlags = function (group) {
    var flags = $.extend({}, this.settings.default_group_flags);

    if (group.readonly) {
      $.extend(flags, {
        condition_readonly: true,
        no_add_rule: true,
        no_add_group: true,
        no_delete: true
      });
    }

    if (group.flags) {
      $.extend(flags, group.flags);
    }
    /**
     * Modifies the consolidated group's flags
     * @event changer:parseGroupFlags
     * @memberof QueryBuilder
     * @param {object} flags
     * @param {object} group - <b>not</b> a Group object
     * @returns {object}
     */


    return this.change('parseGroupFlags', flags, group);
  };
  /**
   * Gets a copy of flags of a group
   * @param {object} flags
   * @param {boolean} [all=false] - return all flags or only changes from default flags
   * @returns {object}
   * @private
   */


  QueryBuilder.prototype.getGroupFlags = function (flags, all) {
    if (all) {
      return $.extend({}, flags);
    } else {
      var ret = {};
      $.each(this.settings.default_group_flags, function (key, value) {
        if (flags[key] !== value) {
          ret[key] = flags[key];
        }
      });
      return ret;
    }
  };
  /**
   * Translate a label either by looking in the `lang` object or in itself if it's an object where keys are language codes
   * @param {string} [category]
   * @param {string|object} key
   * @returns {string}
   * @fires QueryBuilder.changer:translate
   */


  QueryBuilder.prototype.translate = function (category, key) {
    if (!key) {
      key = category;
      category = undefined;
    }

    var translation;

    if (typeof key === 'object') {
      translation = key[this.settings.lang_code] || key['en'];
    } else {
      translation = (category ? this.lang[category] : this.lang)[key] || key;
    }
    /**
     * Modifies the translated label
     * @event changer:translate
     * @memberof QueryBuilder
     * @param {string} translation
     * @param {string|object} key
     * @param {string} [category]
     * @returns {string}
     */


    return this.change('translate', translation, key, category);
  };
  /**
   * Returns a validation message
   * @param {object} validation
   * @param {string} type
   * @param {string} def
   * @returns {string}
   * @private
   */


  QueryBuilder.prototype.getValidationMessage = function (validation, type, def) {
    return validation.messages && validation.messages[type] || def;
  };

  QueryBuilder.templates.group = '\
<div id="{{= it.group_id }}" class="rules-group-container"> \
  <div class="rules-group-header"> \
    <div class="btn-group pull-right group-actions"> \
      <button type="button" class="btn btn-xs btn-success" data-add="rule"> \
        <i class="{{= it.icons.add_rule }}"></i> {{= it.translate("add_rule") }} \
      </button> \
      {{? it.settings.allow_groups===-1 || it.settings.allow_groups>=it.level }} \
        <button type="button" class="btn btn-xs btn-success" data-add="group"> \
          <i class="{{= it.icons.add_group }}"></i> {{= it.translate("add_group") }} \
        </button> \
      {{?}} \
      {{? it.level>1 }} \
        <button type="button" class="btn btn-xs btn-danger" data-delete="group"> \
          <i class="{{= it.icons.remove_group }}"></i> {{= it.translate("delete_group") }} \
        </button> \
      {{?}} \
    </div> \
    <div class="btn-group group-conditions"> \
      {{~ it.conditions: condition }} \
        <label class="btn btn-xs btn-primary"> \
          <input type="radio" name="{{= it.group_id }}_cond" value="{{= condition }}"> {{= it.translate("conditions", condition) }} \
        </label> \
      {{~}} \
    </div> \
    {{? it.settings.display_errors }} \
      <div class="error-container"><i class="{{= it.icons.error }}"></i></div> \
    {{?}} \
  </div> \
  <div class=rules-group-body> \
    <div class=rules-list></div> \
  </div> \
</div>';
  QueryBuilder.templates.rule = '\
<div id="{{= it.rule_id }}" class="rule-container"> \
  <div class="rule-header"> \
    <div class="btn-group pull-right rule-actions"> \
      <button type="button" class="btn btn-xs btn-danger" data-delete="rule"> \
        <i class="{{= it.icons.remove_rule }}"></i> {{= it.translate("delete_rule") }} \
      </button> \
    </div> \
  </div> \
  {{? it.settings.display_errors }} \
    <div class="error-container"><i class="{{= it.icons.error }}"></i></div> \
  {{?}} \
  <div class="rule-filter-container"></div> \
  <div class="rule-operator-container"></div> \
  <div class="rule-value-container"></div> \
</div>'; // Edited: Added data-tokens property in option tag

  QueryBuilder.templates.filterSelect = '\
{{ var optgroup = null; }} \
<select class="form-control" name="{{= it.rule.id }}_filter"> \
  {{? it.settings.display_empty_filter }} \
    <option value="-1">{{= it.settings.select_placeholder }}</option> \
  {{?}} \
  {{~ it.filters: filter }} \
    {{? optgroup !== filter.optgroup }} \
      {{? optgroup !== null }}</optgroup>{{?}} \
      {{? (optgroup = filter.optgroup) !== null }} \
        <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}"> \
      {{?}} \
	{{?}} \
    <option {{= filter.searchable}} entity-name={{= filter.optgroup}} value-attribute={{= filter.valueAttribute}} title="{{= it.translate(it.settings.optgroups[optgroup]) }} | {{= it.translate(filter.label) }}" data-tokens="{{= it.translate(it.settings.optgroups[optgroup]) }}" value="{{= filter.id }}" {{? filter.icon}}data-icon="{{= filter.icon}}"{{?}}>{{= it.translate(filter.label) }}</option> \
  {{~}} \
  {{? optgroup !== null }}</optgroup>{{?}} \
</select>';
  QueryBuilder.templates.operatorSelect = '\
{{? it.operators.length === 1 }} \
<span> \
{{= it.translate("operators", it.operators[0].type) }} \
</span> \
{{?}} \
{{ var optgroup = null; }} \
<select class="form-control {{? it.operators.length === 1 }}hide{{?}}" name="{{= it.rule.id }}_operator"> \
  {{~ it.operators: operator }} \
    {{? optgroup !== operator.optgroup }} \
      {{? optgroup !== null }}</optgroup>{{?}} \
      {{? (optgroup = operator.optgroup) !== null }} \
        <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}"> \
      {{?}} \
    {{?}} \
    <option value="{{= operator.type }}" {{? operator.icon}}data-icon="{{= operator.icon}}"{{?}}>{{= it.translate("operators", operator.type) }}</option> \
  {{~}} \
  {{? optgroup !== null }}</optgroup>{{?}} \
</select>';
  QueryBuilder.templates.ruleValueSelect = '\
{{ var optgroup = null; }} \
<select class="form-control" name="{{= it.name }}" {{? it.rule.filter.multiple }}multiple{{?}}> \
  {{? it.rule.filter.placeholder }} \
    <option value="{{= it.rule.filter.placeholder_value }}" disabled selected>{{= it.rule.filter.placeholder }}</option> \
  {{?}} \
  {{~ it.rule.filter.values: entry }} \
    {{? optgroup !== entry.optgroup }} \
      {{? optgroup !== null }}</optgroup>{{?}} \
      {{? (optgroup = entry.optgroup) !== null }} \
        <optgroup label="{{= it.translate(it.settings.optgroups[optgroup]) }}"> \
      {{?}} \
    {{?}} \
    <option value="{{= entry.value }}">{{= entry.label }}</option> \
  {{~}} \
  {{? optgroup !== null }}</optgroup>{{?}} \
</select>';
  /**
   * Returns group's HTML
   * @param {string} group_id
   * @param {int} level
   * @returns {string}
   * @fires QueryBuilder.changer:getGroupTemplate
   * @private
   */

  QueryBuilder.prototype.getGroupTemplate = function (group_id, level) {
    var h = this.templates.group({
      builder: this,
      group_id: group_id,
      level: level,
      conditions: this.settings.conditions,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of a group
     * @event changer:getGroupTemplate
     * @memberof QueryBuilder
     * @param {string} html
     * @param {int} level
     * @returns {string}
     */

    return this.change('getGroupTemplate', h, level);
  };
  /**
   * Returns rule's HTML
   * @param {string} rule_id
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleTemplate
   * @private
   */


  QueryBuilder.prototype.getRuleTemplate = function (rule_id) {
    var h = this.templates.rule({
      builder: this,
      rule_id: rule_id,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of a rule
     * @event changer:getRuleTemplate
     * @memberof QueryBuilder
     * @param {string} html
     * @returns {string}
     */

    return this.change('getRuleTemplate', h);
  };
  /**
   * Returns rule's filter HTML
   * @param {Rule} rule
   * @param {object[]} filters
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleFilterTemplate
   * @private
   */


  QueryBuilder.prototype.getRuleFilterSelect = function (rule, filters) {
    var h = this.templates.filterSelect({
      builder: this,
      rule: rule,
      filters: filters,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of the rule's filter dropdown
     * @event changer:getRuleFilterSelect
     * @memberof QueryBuilder
     * @param {string} html
     * @param {Rule} rule
     * @param {QueryBuilder.Filter[]} filters
     * @returns {string}
     */

    return this.change('getRuleFilterSelect', h, rule, filters);
  };
  /**
   * Returns rule's operator HTML
   * @param {Rule} rule
   * @param {object[]} operators
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleOperatorTemplate
   * @private
   */


  QueryBuilder.prototype.getRuleOperatorSelect = function (rule, operators) {
    var h = this.templates.operatorSelect({
      builder: this,
      rule: rule,
      operators: operators,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of the rule's operator dropdown
     * @event changer:getRuleOperatorSelect
     * @memberof QueryBuilder
     * @param {string} html
     * @param {Rule} rule
     * @param {QueryBuilder.Operator[]} operators
     * @returns {string}
     */

    return this.change('getRuleOperatorSelect', h, rule, operators);
  };
  /**
   * Returns the rule's value select HTML
   * @param {string} name
   * @param {Rule} rule
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleValueSelect
   * @private
   */


  QueryBuilder.prototype.getRuleValueSelect = function (name, rule) {
    var h = this.templates.ruleValueSelect({
      builder: this,
      name: name,
      rule: rule,
      icons: this.icons,
      settings: this.settings,
      translate: this.translate.bind(this)
    });
    /**
     * Modifies the raw HTML of the rule's value dropdown (in case of a "select filter)
     * @event changer:getRuleValueSelect
     * @memberof QueryBuilder
     * @param {string} html
     * @param [string} name
     * @param {Rule} rule
     * @returns {string}
     */

    return this.change('getRuleValueSelect', h, name, rule);
  };
  /**
   * Returns the rule's value HTML
   * @param {Rule} rule
   * @param {int} value_id
   * @returns {string}
   * @fires QueryBuilder.changer:getRuleInput
   * @private
   */


  QueryBuilder.prototype.getRuleInput = function (rule, value_id) {
    var filter = rule.filter;
    var validation = rule.filter.validation || {};
    var name = rule.id + '_value_' + value_id;
    var c = filter.vertical ? ' class=block' : '';
    var h = '';
    var placeholder = Array.isArray(filter.placeholder) ? filter.placeholder[value_id] : filter.placeholder;

    if (typeof filter.input == 'function') {
      h = filter.input.call(this, rule, name);
    } else {
      switch (filter.input) {
        case 'radio':
        case 'checkbox':
          Utils.iterateOptions(filter.values, function (key, val) {
            h += '<label' + c + '><input type="' + filter.input + '" name="' + name + '" value="' + key + '"> ' + val + '</label> ';
          });
          break;

        case 'select':
          h = this.getRuleValueSelect(name, rule);
          break;

        case 'textarea':
          h += '<textarea class="form-control" name="' + name + '"';
          if (filter.size) h += ' cols="' + filter.size + '"';
          if (filter.rows) h += ' rows="' + filter.rows + '"';
          if (validation.min !== undefined) h += ' minlength="' + validation.min + '"';
          if (validation.max !== undefined) h += ' maxlength="' + validation.max + '"';
          if (placeholder) h += ' placeholder="' + placeholder + '"';
          h += '></textarea>';
          break;

        case 'number':
          h += '<input class="form-control" type="number" name="' + name + '"';
          if (validation.step !== undefined) h += ' step="' + validation.step + '"';
          if (validation.min !== undefined) h += ' min="' + validation.min + '"';
          if (validation.max !== undefined) h += ' max="' + validation.max + '"';
          if (placeholder) h += ' placeholder="' + placeholder + '"';
          if (filter.size) h += ' size="' + filter.size + '"';
          h += '>';
          break;

        default:
          h += '<input class="form-control" type="text" name="' + name + '"';
          if (placeholder) h += ' placeholder="' + placeholder + '"';
          if (filter.type === 'string' && validation.min !== undefined) h += ' minlength="' + validation.min + '"';
          if (filter.type === 'string' && validation.max !== undefined) h += ' maxlength="' + validation.max + '"';
          if (filter.size) h += ' size="' + filter.size + '"';
          h += '>';
      }
    }
    /**
     * Modifies the raw HTML of the rule's input
     * @event changer:getRuleInput
     * @memberof QueryBuilder
     * @param {string} html
     * @param {Rule} rule
     * @param {string} name - the name that the input must have
     * @returns {string}
     */


    return this.change('getRuleInput', h, rule, name);
  };
  /**
   * @namespace
   */


  var Utils = {};
  /**
   * @member {object}
   * @memberof QueryBuilder
   * @see Utils
   */

  QueryBuilder.utils = Utils;
  /**
   * @callback Utils#OptionsIteratee
   * @param {string} key
   * @param {string} value
   * @param {string} [optgroup]
   */

  /**
   * Iterates over radio/checkbox/selection options, it accept four formats
   *
   * @example
   * // array of values
   * options = ['one', 'two', 'three']
   * @example
   * // simple key-value map
   * options = {1: 'one', 2: 'two', 3: 'three'}
   * @example
   * // array of 1-element maps
   * options = [{1: 'one'}, {2: 'two'}, {3: 'three'}]
   * @example
   * // array of elements
   * options = [{value: 1, label: 'one', optgroup: 'group'}, {value: 2, label: 'two'}]
   *
   * @param {object|array} options
   * @param {Utils#OptionsIteratee} tpl
   */

  Utils.iterateOptions = function (options, tpl) {
    if (options) {
      if ($.isArray(options)) {
        options.forEach(function (entry) {
          if ($.isPlainObject(entry)) {
            // array of elements
            if ('value' in entry) {
              tpl(entry.value, entry.label || entry.value, entry.optgroup);
            } // array of one-element maps
            else {
                $.each(entry, function (key, val) {
                  tpl(key, val);
                  return false; // break after first entry
                });
              }
          } // array of values
          else {
              tpl(entry, entry);
            }
        });
      } // unordered map
      else {
          $.each(options, function (key, val) {
            tpl(key, val);
          });
        }
    }
  };
  /**
   * Replaces {0}, {1}, ... in a string
   * @param {string} str
   * @param {...*} args
   * @returns {string}
   */


  Utils.fmt = function (str, args) {
    if (!Array.isArray(args)) {
      args = Array.prototype.slice.call(arguments, 1);
    }

    console.log('str');
    console.log(str);
    console.log('args');
    console.log(args);
    return str.replace(/{([0-9]+)}/g, function (m, i) {
      return args[parseInt(i)];
    });
  };
  /**
   * Throws an Error object with custom name or logs an error
   * @param {boolean} [doThrow=true]
   * @param {string} type
   * @param {string} message
   * @param {...*} args
   */


  Utils.error = function () {
    var i = 0;
    var doThrow = typeof arguments[i] === 'boolean' ? arguments[i++] : true;
    var type = arguments[i++];
    var message = arguments[i++];
    var args = Array.isArray(arguments[i]) ? arguments[i] : Array.prototype.slice.call(arguments, i);

    if (doThrow) {
      var err = new Error(Utils.fmt(message, args));
      err.name = type + 'Error';
      err.args = args;
      throw err;
    } else {
      console.error(type + 'Error: ' + Utils.fmt(message, args));
    }
  };
  /**
   * Changes the type of a value to int, float or bool
   * @param {*} value
   * @param {string} type - 'integer', 'double', 'boolean' or anything else (passthrough)
   * @returns {*}
   */


  Utils.changeType = function (value, type) {
    if (value === '' || value === undefined) {
      return undefined;
    }

    switch (type) {
      // @formatter:off
      case 'integer':
        if (typeof value === 'string' && !/^-?\d+$/.test(value)) {
          return value;
        }

        return parseInt(value);

      case 'double':
        if (typeof value === 'string' && !/^-?\d+\.?\d*$/.test(value)) {
          return value;
        }

        return parseFloat(value);

      case 'boolean':
        if (typeof value === 'string' && !/^(0|1|true|false){1}$/i.test(value)) {
          return value;
        }

        return value === true || value === 1 || value.toLowerCase() === 'true' || value === '1';

      default:
        return value;
      // @formatter:on
    }
  };
  /**
   * Escapes a string like PHP's mysql_real_escape_string does
   * @param {string} value
   * @returns {string}
   */


  Utils.escapeString = function (value) {
    if (typeof value != 'string') {
      return value;
    }

    return value.replace(/[\0\n\r\b\\\'\"]/g, function (s) {
      switch (s) {
        // @formatter:off
        case '\0':
          return '\\0';

        case '\n':
          return '\\n';

        case '\r':
          return '\\r';

        case '\b':
          return '\\b';

        default:
          return '\\' + s;
        // @formatter:off
      }
    }) // uglify compliant
    .replace(/\t/g, '\\t').replace(/\x1a/g, '\\Z');
  };
  /**
   * Escapes a string for use in regex
   * @param {string} str
   * @returns {string}
   */


  Utils.escapeRegExp = function (str) {
    return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
  };
  /**
   * Escapes a string for use in HTML element id
   * @param {string} str
   * @returns {string}
   */


  Utils.escapeElementId = function (str) {
    // Regex based on that suggested by:
    // https://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/
    // - escapes : . [ ] ,
    // - avoids escaping already escaped values
    return str ? str.replace(/(\\)?([:.\[\],])/g, function ($0, $1, $2) {
      return $1 ? $0 : '\\' + $2;
    }) : str;
  };
  /**
   * Sorts objects by grouping them by `key`, preserving initial order when possible
   * @param {object[]} items
   * @param {string} key
   * @returns {object[]}
   */


  Utils.groupSort = function (items, key) {
    var optgroups = [];
    var newItems = [];
    items.forEach(function (item) {
      var idx;

      if (item[key]) {
        idx = optgroups.lastIndexOf(item[key]);

        if (idx == -1) {
          idx = optgroups.length;
        } else {
          idx++;
        }
      } else {
        idx = optgroups.length;
      }

      optgroups.splice(idx, 0, item[key]);
      newItems.splice(idx, 0, item);
    });
    return newItems;
  };
  /**
   * Defines properties on an Node prototype with getter and setter.<br>
   *     Update events are emitted in the setter through root Model (if any).<br>
   *     The object must have a `__` object, non enumerable property to store values.
   * @param {function} obj
   * @param {string[]} fields
   */


  Utils.defineModelProperties = function (obj, fields) {
    fields.forEach(function (field) {
      Object.defineProperty(obj.prototype, field, {
        enumerable: true,
        get: function () {
          return this.__[field];
        },
        set: function (value) {
          var previousValue = this.__[field] !== null && typeof this.__[field] == 'object' ? $.extend({}, this.__[field]) : this.__[field];
          this.__[field] = value;

          if (this.model !== null) {
            /**
             * After a value of the model changed
             * @event model:update
             * @memberof Model
             * @param {Node} node
             * @param {string} field
             * @param {*} value
             * @param {*} previousValue
             */
            this.model.trigger('update', this, field, value, previousValue);
          }
        }
      });
    });
  };
  /**
   * Main object storing data model and emitting model events
   * @constructor
   */


  function Model() {
    /**
     * @member {Group}
     * @readonly
     */
    this.root = null;
    /**
     * Base for event emitting
     * @member {jQuery}
     * @readonly
     * @private
     */

    this.$ = $(this);
  }

  $.extend(Model.prototype,
  /** @lends Model.prototype */
  {
    /**
     * Triggers an event on the model
     * @param {string} type
     * @returns {$.Event}
     */
    trigger: function (type) {
      var event = new $.Event(type);
      this.$.triggerHandler(event, Array.prototype.slice.call(arguments, 1));
      return event;
    },

    /**
     * Attaches an event listener on the model
     * @param {string} type
     * @param {function} cb
     * @returns {Model}
     */
    on: function () {
      this.$.on.apply(this.$, Array.prototype.slice.call(arguments));
      return this;
    },

    /**
     * Removes an event listener from the model
     * @param {string} type
     * @param {function} [cb]
     * @returns {Model}
     */
    off: function () {
      this.$.off.apply(this.$, Array.prototype.slice.call(arguments));
      return this;
    },

    /**
     * Attaches an event listener called once on the model
     * @param {string} type
     * @param {function} cb
     * @returns {Model}
     */
    once: function () {
      this.$.one.apply(this.$, Array.prototype.slice.call(arguments));
      return this;
    }
  });
  /**
   * Root abstract object
   * @constructor
   * @param {Node} [parent]
   * @param {jQuery} $el
   */

  var Node = function (parent, $el) {
    if (!(this instanceof Node)) {
      return new Node(parent, $el);
    }

    Object.defineProperty(this, '__', {
      value: {}
    });
    $el.data('queryBuilderModel', this);
    /**
     * @name level
     * @member {int}
     * @memberof Node
     * @instance
     * @readonly
     */

    this.__.level = 1;
    /**
     * @name error
     * @member {string}
     * @memberof Node
     * @instance
     */

    this.__.error = null;
    /**
     * @name flags
     * @member {object}
     * @memberof Node
     * @instance
     * @readonly
     */

    this.__.flags = {};
    /**
     * @name data
     * @member {object}
     * @memberof Node
     * @instance
     */

    this.__.data = undefined;
    /**
     * @member {jQuery}
     * @readonly
     */

    this.$el = $el;
    /**
     * @member {string}
     * @readonly
     */

    this.id = $el[0].id;
    /**
     * @member {Model}
     * @readonly
     */

    this.model = null;
    /**
     * @member {Group}
     * @readonly
     */

    this.parent = parent;
  };

  Utils.defineModelProperties(Node, ['level', 'error', 'data', 'flags']);
  Object.defineProperty(Node.prototype, 'parent', {
    enumerable: true,
    get: function () {
      return this.__.parent;
    },
    set: function (value) {
      this.__.parent = value;
      this.level = value === null ? 1 : value.level + 1;
      this.model = value === null ? null : value.model;
    }
  });
  /**
   * Checks if this Node is the root
   * @returns {boolean}
   */

  Node.prototype.isRoot = function () {
    return this.level === 1;
  };
  /**
   * Returns the node position inside its parent
   * @returns {int}
   */


  Node.prototype.getPos = function () {
    if (this.isRoot()) {
      return -1;
    } else {
      return this.parent.getNodePos(this);
    }
  };
  /**
   * Deletes self
   * @fires Model.model:drop
   */


  Node.prototype.drop = function () {
    var model = this.model;

    if (!!this.parent) {
      this.parent.removeNode(this);
    }

    this.$el.removeData('queryBuilderModel');

    if (model !== null) {
      /**
       * After a node of the model has been removed
       * @event model:drop
       * @memberof Model
       * @param {Node} node
       */
      model.trigger('drop', this);
    }
  };
  /**
   * Moves itself after another Node
   * @param {Node} target
   * @fires Model.model:move
   */


  Node.prototype.moveAfter = function (target) {
    if (!this.isRoot()) {
      this.move(target.parent, target.getPos() + 1);
    }
  };
  /**
   * Moves itself at the beginning of parent or another Group
   * @param {Group} [target]
   * @fires Model.model:move
   */


  Node.prototype.moveAtBegin = function (target) {
    if (!this.isRoot()) {
      if (target === undefined) {
        target = this.parent;
      }

      this.move(target, 0);
    }
  };
  /**
   * Moves itself at the end of parent or another Group
   * @param {Group} [target]
   * @fires Model.model:move
   */


  Node.prototype.moveAtEnd = function (target) {
    if (!this.isRoot()) {
      if (target === undefined) {
        target = this.parent;
      }

      this.move(target, target.length() === 0 ? 0 : target.length() - 1);
    }
  };
  /**
   * Moves itself at specific position of Group
   * @param {Group} target
   * @param {int} index
   * @fires Model.model:move
   */


  Node.prototype.move = function (target, index) {
    if (!this.isRoot()) {
      if (typeof target === 'number') {
        index = target;
        target = this.parent;
      }

      this.parent.removeNode(this);
      target.insertNode(this, index, false);

      if (this.model !== null) {
        /**
         * After a node of the model has been moved
         * @event model:move
         * @memberof Model
         * @param {Node} node
         * @param {Node} target
         * @param {int} index
         */
        this.model.trigger('move', this, target, index);
      }
    }
  };
  /**
   * Group object
   * @constructor
   * @extends Node
   * @param {Group} [parent]
   * @param {jQuery} $el
   */


  var Group = function (parent, $el) {
    if (!(this instanceof Group)) {
      return new Group(parent, $el);
    }

    Node.call(this, parent, $el);
    /**
     * @member {object[]}
     * @readonly
     */

    this.rules = [];
    /**
     * @name condition
     * @member {string}
     * @memberof Group
     * @instance
     */

    this.__.condition = null;
  };

  Group.prototype = Object.create(Node.prototype);
  Group.prototype.constructor = Group;
  Utils.defineModelProperties(Group, ['condition']);
  /**
   * Removes group's content
   */

  Group.prototype.empty = function () {
    this.each('reverse', function (rule) {
      rule.drop();
    }, function (group) {
      group.drop();
    });
  };
  /**
   * Deletes self
   */


  Group.prototype.drop = function () {
    this.empty();
    Node.prototype.drop.call(this);
  };
  /**
   * Returns the number of children
   * @returns {int}
   */


  Group.prototype.length = function () {
    return this.rules.length;
  };
  /**
   * Adds a Node at specified index
   * @param {Node} node
   * @param {int} [index=end]
   * @param {boolean} [trigger=false] - fire 'add' event
   * @returns {Node} the inserted node
   * @fires Model.model:add
   */


  Group.prototype.insertNode = function (node, index, trigger) {
    if (index === undefined) {
      index = this.length();
    }

    this.rules.splice(index, 0, node);
    node.parent = this;

    if (trigger && this.model !== null) {
      /**
       * After a node of the model has been added
       * @event model:add
       * @memberof Model
       * @param {Node} parent
       * @param {Node} node
       * @param {int} index
       */
      this.model.trigger('add', this, node, index);
    }

    return node;
  };
  /**
   * Adds a new Group at specified index
   * @param {jQuery} $el
   * @param {int} [index=end]
   * @returns {Group}
   * @fires Model.model:add
   */


  Group.prototype.addGroup = function ($el, index) {
    return this.insertNode(new Group(this, $el), index, true);
  };
  /**
   * Adds a new Rule at specified index
   * @param {jQuery} $el
   * @param {int} [index=end]
   * @returns {Rule}
   * @fires Model.model:add
   */


  Group.prototype.addRule = function ($el, index) {
    return this.insertNode(new Rule(this, $el), index, true);
  };
  /**
   * Deletes a specific Node
   * @param {Node} node
   */


  Group.prototype.removeNode = function (node) {
    var index = this.getNodePos(node);

    if (index !== -1) {
      node.parent = null;
      this.rules.splice(index, 1);
    }
  };
  /**
   * Returns the position of a child Node
   * @param {Node} node
   * @returns {int}
   */


  Group.prototype.getNodePos = function (node) {
    return this.rules.indexOf(node);
  };
  /**
   * @callback Model#GroupIteratee
   * @param {Node} node
   * @returns {boolean} stop the iteration
   */

  /**
   * Iterate over all Nodes
   * @param {boolean} [reverse=false] - iterate in reverse order, required if you delete nodes
   * @param {Model#GroupIteratee} cbRule - callback for Rules (can be `null` but not omitted)
   * @param {Model#GroupIteratee} [cbGroup] - callback for Groups
   * @param {object} [context] - context for callbacks
   * @returns {boolean} if the iteration has been stopped by a callback
   */


  Group.prototype.each = function (reverse, cbRule, cbGroup, context) {
    if (typeof reverse !== 'boolean' && typeof reverse !== 'string') {
      context = cbGroup;
      cbGroup = cbRule;
      cbRule = reverse;
      reverse = false;
    }

    context = context === undefined ? null : context;
    var i = reverse ? this.rules.length - 1 : 0;
    var l = reverse ? 0 : this.rules.length - 1;
    var c = reverse ? -1 : 1;

    var next = function () {
      return reverse ? i >= l : i <= l;
    };

    var stop = false;

    for (; next(); i += c) {
      if (this.rules[i] instanceof Group) {
        if (!!cbGroup) {
          stop = cbGroup.call(context, this.rules[i]) === false;
        }
      } else if (!!cbRule) {
        stop = cbRule.call(context, this.rules[i]) === false;
      }

      if (stop) {
        break;
      }
    }

    return !stop;
  };
  /**
   * Checks if the group contains a particular Node
   * @param {Node} node
   * @param {boolean} [recursive=false]
   * @returns {boolean}
   */


  Group.prototype.contains = function (node, recursive) {
    if (this.getNodePos(node) !== -1) {
      return true;
    } else if (!recursive) {
      return false;
    } else {
      // the loop will return with false as soon as the Node is found
      return !this.each(function () {
        return true;
      }, function (group) {
        return !group.contains(node, true);
      });
    }
  };
  /**
   * Rule object
   * @constructor
   * @extends Node
   * @param {Group} parent
   * @param {jQuery} $el
   */


  var Rule = function (parent, $el) {
    if (!(this instanceof Rule)) {
      return new Rule(parent, $el);
    }

    Node.call(this, parent, $el);
    this._updating_value = false;
    this._updating_input = false;
    /**
     * @name filter
     * @member {QueryBuilder.Filter}
     * @memberof Rule
     * @instance
     */

    this.__.filter = null;
    /**
     * @name operator
     * @member {QueryBuilder.Operator}
     * @memberof Rule
     * @instance
     */

    this.__.operator = null;
    /**
     * @name value
     * @member {*}
     * @memberof Rule
     * @instance
     */

    this.__.value = undefined;
  };

  Rule.prototype = Object.create(Node.prototype);
  Rule.prototype.constructor = Rule;
  Utils.defineModelProperties(Rule, ['filter', 'operator', 'value']);
  /**
   * Checks if this Node is the root
   * @returns {boolean} always false
   */

  Rule.prototype.isRoot = function () {
    return false;
  };
  /**
   * @member {function}
   * @memberof QueryBuilder
   * @see Group
   */


  QueryBuilder.Group = Group;
  /**
   * @member {function}
   * @memberof QueryBuilder
   * @see Rule
   */

  QueryBuilder.Rule = Rule;
  /**
   * The {@link http://learn.jquery.com/plugins/|jQuery Plugins} namespace
   * @external "jQuery.fn"
   */

  /**
   * Instanciates or accesses the {@link QueryBuilder} on an element
   * @function
   * @memberof external:"jQuery.fn"
   * @param {*} option - initial configuration or method name
   * @param {...*} args - method arguments
   *
   * @example
   * $('#builder').queryBuilder({ /** configuration object *\/ });
   * @example
   * $('#builder').queryBuilder('methodName', methodParam1, methodParam2);
   */

  $.fn.queryBuilder = function (option) {
    if (this.length === 0) {
      Utils.error('Config', 'No target defined');
    }

    if (this.length > 1) {
      Utils.error('Config', 'Unable to initialize on multiple target');
    }

    var data = this.data('queryBuilder');
    var options = typeof option == 'object' && option || {};

    if (!data && option == 'destroy') {
      return this;
    }

    if (!data) {
      var builder = new QueryBuilder(this, options);
      this.data('queryBuilder', builder);
      builder.init(options.rules);
    }

    if (typeof option == 'string') {
      return data[option].apply(data, Array.prototype.slice.call(arguments, 1));
    }

    return this;
  };
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder
   */


  $.fn.queryBuilder.constructor = QueryBuilder;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.defaults
   */

  $.fn.queryBuilder.defaults = QueryBuilder.defaults;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.defaults
   */

  $.fn.queryBuilder.extend = QueryBuilder.extend;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.define
   */

  $.fn.queryBuilder.define = QueryBuilder.define;
  /**
   * @function
   * @memberof external:"jQuery.fn"
   * @see QueryBuilder.regional
   */

  $.fn.queryBuilder.regional = QueryBuilder.regional;
  /**
   * @class BtTooltipErrors
   * @memberof module:plugins
   * @description Applies Bootstrap Tooltips on validation error messages.
   * @param {object} [options]
   * @param {string} [options.placement='right']
   * @throws MissingLibraryError
   */

  QueryBuilder.define('bt-tooltip-errors', function (options) {
    if (!$.fn.tooltip || !$.fn.tooltip.Constructor || !$.fn.tooltip.Constructor.prototype.fixTitle) {
      Utils.error('MissingLibrary', 'Bootstrap Tooltip is required to use "bt-tooltip-errors" plugin. Get it here: http://getbootstrap.com');
    }

    var self = this; // add BT Tooltip data

    this.on('getRuleTemplate.filter getGroupTemplate.filter', function (h) {
      var $h = $(h.value);
      $h.find(QueryBuilder.selectors.error_container).attr('data-toggle', 'tooltip');
      h.value = $h.prop('outerHTML');
    }); // init/refresh tooltip when title changes

    this.model.on('update', function (e, node, field) {
      if (field == 'error' && self.settings.display_errors) {
        node.$el.find(QueryBuilder.selectors.error_container).eq(0).tooltip(options).tooltip('hide').tooltip('fixTitle');
      }
    });
  }, {
    placement: 'right'
  });
  /**
   * @class BtSelectpicker
   * @memberof module:plugins
   * @descriptioon Applies Bootstrap Select on filters and operators combo-boxes.
   * @param {object} [options]
   * @param {string} [options.container='body']
   * @param {string} [options.style='btn-inverse btn-xs']
   * @param {int|string} [options.width='auto']
   * @param {boolean} [options.showIcon=false]
   * @throws MissingLibraryError
   */

  QueryBuilder.define('bt-selectpicker', function (options) {
    if (!$.fn.selectpicker || !$.fn.selectpicker.Constructor) {
      Utils.error('MissingLibrary', 'Bootstrap Select is required to use "bt-selectpicker" plugin. Get it here: http://silviomoreto.github.io/bootstrap-select');
    }

    var Selectors = QueryBuilder.selectors; // init selectpicker

    this.on('afterCreateRuleFilters', function (e, rule) {
      rule.$el.find(Selectors.rule_filter).removeClass('form-control').selectpicker(options);
    });
    this.on('afterCreateRuleOperators', function (e, rule) {
      rule.$el.find(Selectors.rule_operator).removeClass('form-control').selectpicker(options);
    }); // update selectpicker on change

    /*this.on('afterUpdateRuleFilter', function(e, rule) {
        var selectObj = rule.$el.find(Selectors.rule_filter);
        
        selectObj.selectpicker('render');
    //// Define select picker custom behaviour ////
        var selectButtonObj = selectObj.next();
        var groupNameObj = selectButtonObj.children('.filter-option-group-name');
        var optgroupName = rule.filter.optgroup;
         if (groupNameObj.length > 0) {
            groupNameObj = $(groupNameObj[0]);
        }
        else {
            groupNameObj = $('<div class="filter-option-group-name"></div>'); // define style
            selectButtonObj.prepend( groupNameObj );
        }
         // To get optgroup name
        // it.translate(it.settings.optgroups[optgroup])
         //this.settings.optgroups[filter.optgroup]
         //console.log(`optgroups ${rule.filter.settings.optgroups[optgroupName]}`);
        //console.log(`optgroups ${rule.filter.settings.optgroups[optgroupName]}`);
        
        //console.log( selectObj );
        //console.log(`opti ${optgroupName}`);
        //console.log(`groupNameObj ${groupNameObj}`);
         //groupNameObj.text('Title');
         // Filter optgroup visibility in selection box //
    });*/

    this.on('afterUpdateRuleOperator', function (e, rule) {
      rule.$el.find(Selectors.rule_operator).selectpicker('render');
    });
    this.on('beforeDeleteRule', function (e, rule) {
      rule.$el.find(Selectors.rule_filter).selectpicker('destroy');
      rule.$el.find(Selectors.rule_operator).selectpicker('destroy');
    });
  }, {
    container: 'body',
    style: 'btn-inverse btn-xs',
    width: 'auto',
    showIcon: false
  });
  /*!
   * jQuery QueryBuilder 2.5.0
   * Locale: English (en)
   * Author: Damien "Mistic" Sorel, http://www.strangeplanet.fr
   * Licensed under MIT (https://opensource.org/licenses/MIT)
   */

  QueryBuilder.regional['en'] = {
    "__locale": "English (en)",
    "__author": "Damien \"Mistic\" Sorel, http://www.strangeplanet.fr",
    "add_rule": "Add rule",
    "add_group": "Add group",
    "delete_rule": "Delete",
    "delete_group": "Delete",
    "conditions": {
      "AND": "AND",
      "OR": "OR"
    },
    "operators": {
      "equal": "equal",
      "not_equal": "not equal",
      "in": "in",
      "not_in": "not in",
      "less": "less",
      "less_or_equal": "less or equal",
      "greater": "greater",
      "greater_or_equal": "greater or equal",
      "between": "between",
      "not_between": "not between",
      "begins_with": "begins with",
      "not_begins_with": "doesn't begin with",
      "contains": "contains",
      "not_contains": "doesn't contain",
      "ends_with": "ends with",
      "not_ends_with": "doesn't end with",
      "is_empty": "is empty",
      "is_not_empty": "is not empty",
      "is_null": "is null",
      "is_not_null": "is not null"
    },
    "errors": {
      "no_filter": "No filter selected",
      "empty_group": "The group is empty",
      "radio_empty": "No value selected",
      "checkbox_empty": "No value selected",
      "select_empty": "No value selected",
      "string_empty": "Empty value",
      "string_exceed_min_length": "Must contain at least {0} characters",
      "string_exceed_max_length": "Must not contain more than {0} characters",
      "string_invalid_format": "Invalid format ({0})",
      "number_nan": "Not a number",
      "number_not_integer": "Not an integer",
      "number_not_double": "Not a real number",
      "number_exceed_min": "Must be greater than {0}",
      "number_exceed_max": "Must be lower than {0}",
      "number_wrong_step": "Must be a multiple of {0}",
      "number_between_invalid": "Invalid values, {0} is greater than {1}",
      "datetime_empty": "Empty value",
      "datetime_invalid": "Invalid date format ({0})",
      "datetime_exceed_min": "Must be after {0}",
      "datetime_exceed_max": "Must be before {0}",
      "datetime_between_invalid": "Invalid values, {0} is greater than {1}",
      "boolean_not_valid": "Not a boolean",
      "operator_not_multiple": "Operator \"{1}\" cannot accept multiple values"
    }
  };
  QueryBuilder.defaults({
    lang_code: 'en'
  });
  /*!
   * jQuery QueryBuilder 2.5.0
   * Locale: Polish (pl)
   * Author: Artur Smolarek
   * Licensed under MIT (https://opensource.org/licenses/MIT)
   */

  QueryBuilder.regional['pl'] = {
    "__locale": "Polish (pl)",
    "__author": "Artur Smolarek",
    "add_rule": "Dodaj regułę",
    "add_group": "Dodaj grupę",
    "delete_rule": "Usuń",
    "delete_group": "Usuń",
    "conditions": {
      "AND": "ORAZ",
      "OR": "LUB"
    },
    "operators": {
      "equal": "równa się",
      "not_equal": "jest różne od",
      "in": "zawiera",
      "not_in": "nie zawiera",
      "less": "mniejsze",
      "less_or_equal": "mniejsze lub równe",
      "greater": "większe",
      "greater_or_equal": "większe lub równe",
      "between": "pomiędzy",
      "not_between": "nie jest pomiędzy",
      "begins_with": "rozpoczyna się od",
      "not_begins_with": "nie rozpoczyna się od",
      "contains": "zawiera",
      "not_contains": "nie zawiera",
      "ends_with": "kończy się na",
      "not_ends_with": "nie kończy się na",
      "is_empty": "jest puste",
      "is_not_empty": "nie jest puste",
      "is_null": "jest niezdefiniowane",
      "is_not_null": "nie jest niezdefiniowane"
    },
    "errors": {
      "no_filter": "Nie wybrano żadnego filtra",
      "empty_group": "Grupa jest pusta",
      "radio_empty": "Nie wybrano wartości",
      "checkbox_empty": "Nie wybrano wartości",
      "select_empty": "Nie wybrano wartości",
      "string_empty": "Nie wpisano wartości",
      "string_exceed_min_length": "Minimalna długość to {0} znaków",
      "string_exceed_max_length": "Maksymalna długość to {0} znaków",
      "string_invalid_format": "Nieprawidłowy format ({0})",
      "number_nan": "To nie jest liczba",
      "number_not_integer": "To nie jest liczba całkowita",
      "number_not_double": "To nie jest liczba rzeczywista",
      "number_exceed_min": "Musi być większe niż {0}",
      "number_exceed_max": "Musi być mniejsze niż {0}",
      "number_wrong_step": "Musi być wielokrotnością {0}",
      "datetime_empty": "Nie wybrano wartości",
      "datetime_invalid": "Nieprawidłowy format daty ({0})",
      "datetime_exceed_min": "Musi być po {0}",
      "datetime_exceed_max": "Musi być przed {0}",
      "boolean_not_valid": "Niepoprawna wartość logiczna",
      "operator_not_multiple": "Operator \"{1}\" nie przyjmuje wielu wartości"
    }
  };
  QueryBuilder.defaults({
    lang_code: 'pl'
  });
  return QueryBuilder;
});

/***/ }),

/***/ 230:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {

"use strict";

;// CONCATENATED MODULE: ./views/pages/map/css/map-modals.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const map_modals = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/css/sidebar.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const sidebar = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/css/legend.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const legend = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/pages/map/css/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
// EXTERNAL MODULE: ./node_modules/ol/ol.css
var ol = __webpack_require__(3618);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/utilities.js
function clusterSettingSliderEventSetup(sliderObj, settingName, callerName = 'onChange') {
  $(sliderObj.input).on('update select-clustering-strategy cluster-strategy-change', function (event, data) {
    sliderObj.update({});
  });

  var eventFunction = async function (data) {
    let value;
    if (sliderObj.options.type === 'double') value = [data.from, data.to];else value = data.from;
    if (settingName === 'range') ArcheoEvents.broadcast(['cluster-setting-change', 'cluster-range-change'], null, {
      setting: settingName,
      value: value
    });else ArcheoEvents.broadcast(['cluster-setting-change'], null, {
      setting: settingName,
      value: value
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
}

function clusterConfigSliderEventSetup(sliderObj, configName, callerName = 'onChange') {
  $(sliderObj.input).on('select-clustering-strategy cluster-strategy-change', function (event, data) {
    sliderObj.update({});
  });

  var eventFunction = async function (data) {
    var config = {};
    if (sliderObj.options.type === 'double') config[configName] = [data.from, data.to];else config[configName] = data.from;
    ArcheoEvents.broadcast('cluster-config-change', null, {
      config: config
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
  sliderObj.update({}); // Initializes session values on cluster source
}

function clusterConfigCheckboxEventSetup(selector, configName) {
  $(selector).on('select-clustering-strategy cluster-strategy-change', function (event, data) {
    $(selector).trigger('update');
  });
  $(selector).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(selector).hasClass('active'); // negation applied intentionally
    else config[configName] = $(selector).hasClass('active');
    ArcheoEvents.broadcast('cluster-config-change', null, {
      config: config
    });
  });
}

function clusterRegionShowCheckboxEventSetup(selector, configName) {
  $(selector).on('select-clustering-strategy cluster-strategy-change', function (event, data) {
    $(selector).trigger('update');
  }); // layer has changed event

  $(selector).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(selector).hasClass('active'); // negation applied intentionally
    else config[configName] = $(selector).hasClass('active');
    ArcheoEvents.broadcast(['cluster-config-change', 'cluster-region-show'], null, {
      config: config
    });
  });
}
/* Gather basic data about all certain type's regions */


function promiseFetchRegionsBasicData(regionsTypeId) {
  return new Promise((resolution, rejection) => {
    let regionsType = ArcheoSession.get().strategy.config.method.region;
    var filters = {
      'this_is_division': {
        'Division': {
          'id': regionsTypeId
        }
      }
    };
    var selectionSet = ['id', 'name(lang: $lang)', 'centroid {x, y}', 'dating'];
    var variablesDeclarations = {
      "$lang": "String"
    };
    let query = GraphQLRequests.createGraphqlQuery('Region', selectionSet, filters, variablesDeclarations);
    var regionsDict = {};
    GraphQLRequests.queryGraphQL(query, response => {
      let regionsDetails = response.data.Region;
      /* Add regions info to the regions dict */

      regionsDetails.forEach(regionInfo => {
        let id = regionInfo.id;
        let centroid = [regionInfo.centroid.x, regionInfo.centroid.y];
        centroid = ArcheoMap.getCoordinatesProjectedToMap(centroid);
        let isThereDatingInfo = ArcheoUtilities.isValid(regionInfo.dating) && ArcheoUtilities.isValid(regionInfo.dating[Object.keys(regionInfo.dating)[0]]);
        let mapRegionInfo = {
          name: regionInfo.name,
          type: regionsTypeId,
          centroid: centroid
        };
        if (isThereDatingInfo) mapRegionInfo.dating = regionInfo.dating;
        ArcheoMap.setMapRegions(id, mapRegionInfo);
      });
      resolution(true);
    }, {
      lang: window.getLang()
    });
  });
}
/* Assign regions ids to objects */


function promiseIncorporatingRegionsIds(regionsTypeId, featuresDict, objectId) {
  return new Promise((resolution, rejection) => {
    let featuresIds = Object.keys(featuresDict);
    var filters = {
      'id_in': featuresIds
    };
    var selectionSet = ['id', 'regionsIds(type: $type)'];
    var variablesDeclarations = {
      "$type": "String"
    };
    let query = GraphQLRequests.createGraphqlQuery(objectId, selectionSet, filters, variablesDeclarations);
    let variables = {
      type: regionsTypeId
    };
    GraphQLRequests.queryGraphQL(query, response => {
      let regionsIds = response.data[objectId];
      /* Incorporate it with features */

      regionsIds.forEach(info => {
        if (info.regionsIds.length > 0) {
          featuresDict[info.id].forEach(f => {
            f.get('properties').regionsIds = info.regionsIds;
            f.set('regionsIds', info.regionsIds, true);
          });
        } else {
          featuresDict[info.id].forEach(f => {
            f.get('properties').regionsIds = [];
            f.set('regionsIds', [], true);
          });
        }
      });
      resolution(true);
    }, variables);
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/clustering.js


function initializeClusteringStrategyEvents() {
  /* Change clustering mode setting */
  // tutaj dodaj, ze jak się zmienia dataset też wywołuj
  $('#clustering-mode-select').on('changed.bs.select', function (event) {
    var $select = $(event.target);
    var values = $select.selectpicker().val();
    let clusterConfig = {
      method: {
        distance: values.filter(strategy => strategy.startsWith('distance'))[0],
        region: values.filter(strategy => strategy.startsWith('region'))[0]
      }
    };
    ArcheoSession.get().strategy.config = { ...ArcheoSession.get().strategy.config,
      ...clusterConfig
    };

    if (ArcheoUtilities.isValid(clusterConfig.method.region)) {
      let regionsTypeId = clusterConfig.method.region.split('__')[1];

      if (regionsTypeId === 'world') {
        ArcheoMap.getAllFeatures().forEach(f => {
          f.set('regionsIds', ['world'], true);
        }); // Dla wszystkich warstw musiałbyś to robić

        ArcheoEvents.broadcast(['cluster-strategy-change'], null, {
          config: clusterConfig
        });
      } else {
        promiseFetchRegionsBasicData(regionsTypeId).then(isFetchingSuccessful => {
          if (isFetchingSuccessful) {
            let featuresDict = ArcheoMap.getAllFeaturesDictGroupedByObjectId();
            let objectsIds = Object.keys(featuresDict);
            let promises = [];
            objectsIds.forEach(objectId => {
              promises.push(promiseIncorporatingRegionsIds(regionsTypeId, featuresDict[objectId], objectId));
            });
            Promise.all(promises).then(successFlags => {
              let didAllSucceeded = true;
              successFlags.forEach(hasSucceeded => {
                if (!hasSucceeded) {
                  didAllSucceeded = false;
                  console.error('[ERROR] Regions have not been fetched');
                  return false;
                }
              });

              if (didAllSucceeded) {
                ArcheoEvents.broadcast(['cluster-strategy-change'], null, {
                  config: clusterConfig
                });
              }
            });
          }
        });
      }
    } else {
      ArcheoEvents.broadcast(['cluster-strategy-change'], null, {
        config: clusterConfig
      });
    }
  });
  /* Change clustering distance setting */

  clusterSettingSliderEventSetup($('#clustering-slider').data("ionRangeSlider"), 'range', 'onFinish');
  /* Change clustering distance setting */

  clusterSettingSliderEventSetup($('#distance-slider').data("ionRangeSlider"), 'distance', 'onFinish');
  /* Change clusters at centroid placement setup */

  clusterConfigCheckboxEventSetup('#cluster-at-centroid', 'useCentroids');
  /* Change clusters at centroid placement setup */

  clusterRegionShowCheckboxEventSetup('#region-show', 'showRegions');
  /*
  "attachRegionToCluster": true,
  "filterRegionsByTime": true,
  "showRegions": true, /// def: false
  "hideUnassignedClusters": true
  */
}

/* harmony default export */ const clustering = (initializeClusteringStrategyEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/clustering/distance-slider.js
function changeClusterConfigEvent() {
  $('#clustering-strategy').on('cluster-strategy-change', function (event, data) {
    var $obj = $(event.target);
    let sliderObj = $obj.find('#clustering-slider').data("ionRangeSlider");
    let distanceSliderObj = $obj.find('#distance-slider').data("ionRangeSlider");

    if (ArcheoUtilities.isValid(sliderObj)) {
      var resolution = ArcheoMap.getMap().getView().getResolution();
      var oldDistance = sliderObj.result.from;
      var oldMinInBetweenDistance = distanceSliderObj.result.from;

      if (!ArcheoUtilities.isValid(data.config.method.distance)) {
        let params = {
          block: true
        };
        sliderObj.update(params);
        distanceSliderObj.update(params);
      } else if (data.config.method.distance.endsWith('relative')) {
        let minDistance = 0;
        let maxDistance = 500;

        if (sliderObj.options.postfix === 'km') {
          oldDistance = oldDistance * 1000 / resolution; // since distance is in kms and resolution is in meters

          oldMinInBetweenDistance = oldMinInBetweenDistance * 1000 / resolution;
        }

        let distance = ArcheoUtilities.limit(oldDistance, minDistance, maxDistance);
        let minInBetweenDistance = ArcheoUtilities.limit(oldMinInBetweenDistance, minDistance, maxDistance);
        let params = {
          min: minDistance,
          max: maxDistance,
          block: false,
          postfix: 'px',
          from: distance
        };
        sliderObj.update({
          from: distance,
          ...params
        });
        distanceSliderObj.update(params);
        distanceSliderObj.update({
          from: minInBetweenDistance,
          from_max: distance
        });
      } else if (data.config.method.distance.endsWith('absolute')) {
        let minDistance = 0;
        let maxDistance = 5000;

        if (sliderObj.options.postfix === 'px') {
          oldDistance = oldDistance * resolution / 1000; // since distance is in kms and resolution is in meters

          oldMinInBetweenDistance = oldMinInBetweenDistance * resolution / 1000;
        }

        let distance = ArcheoUtilities.limit(oldDistance, minDistance, maxDistance);
        let minInBetweenDistance = ArcheoUtilities.limit(oldMinInBetweenDistance, minDistance, maxDistance);
        let params = {
          min: minDistance,
          max: maxDistance,
          block: false,
          postfix: 'km'
        };
        sliderObj.update({
          from: distance,
          ...params
        });
        distanceSliderObj.update(params);
        distanceSliderObj.update({
          from: minInBetweenDistance,
          from_max: distance
        }); // Abs: the range is 5000 (=5km) - 5 000 000 (=5 000 km)
      }
    }
  });
}

function changeClusterRangeEvent() {
  $('#clustering-strategy').on('cluster-range-change', function (event, data) {
    var $obj = $(event.target);

    if (data.setting == 'distance') {
      let distanceSliderObj = $obj.find('#distance-slider').data("ionRangeSlider");
      distanceSliderObj.update({
        from_max: data.value
      });
    }
  });
}

function distanceSliderRangeEvents() {
  changeClusterConfigEvent();
  changeClusterRangeEvent();
}

/* harmony default export */ const distance_slider = (distanceSliderRangeEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/color.js
function changeLayerColorEvent() {
  $('html').on('layer-color-change', '.layer', function (event, data) {
    var $layer = $(event.target);
    var layerId = $layer.attr('id');

    if (data.layerId === layerId) {
      var $el = $layer.find('.accordion-wrapper');
      $el.css('border-color', data.value);
      $el.css('border-image', 'none');
    }
  });
}

function changeLayerGradientEvent() {
  $('html').on('layer-gradient-change', '.layer', function (event, data) {
    var $layer = $(event.target);
    var layerId = $layer.attr('id');

    if (data.layerId === layerId) {
      var $el = $layer.find('.accordion-wrapper');
      $el.css('border-image', data.css);
      $el.css('border-image-slice', '1');
    }
  });
}

function initializeLayerColorChangeEvents() {
  changeLayerColorEvent();
  changeLayerGradientEvent();
}

/* harmony default export */ const color = (initializeLayerColorChangeEvents);
;// CONCATENATED MODULE: ./views/pages/map/data/attributes.json
const attributes_namespaceObject = JSON.parse('{"RemainsAllenDB":{"":{},"sex":{"name":"Sex","selected":false},"haplogroup_y":{"name":"Haplogroup Y","type":"tree","selected":false},"haplogroup_mt":{"name":"Haplogroup Mt","type":"tree","selected":false},"results":{"isOptgroup":true,"name":"Analysis results","options":{"admixture":{"name":"Admixture","type":"admixture","selected":false}}}},"PersonAllenDB":{"":{},"sex":{"name":"Sex","selected":false},"haplogroup_y":{"name":"Haplogroup Y","type":"tree","selected":false},"haplogroup_mt":{"name":"Haplogroup Mt","type":"tree","selected":false}},"PersonEmpopDB":{"":{},"haplogroup_mt":{"name":"Haplogroup Mt","type":"tree","selected":false}}}');
;// CONCATENATED MODULE: ./views/pages/map/data/attributesTypes.json
const attributesTypes_namespaceObject = JSON.parse('{"admixture":{"":{},"admixture_k2":{"name":"Admixture K=2","type":"admixture","selected":false},"admixture_k3":{"name":"Admixture K=3","type":"admixture","selected":false},"admixture_k4":{"name":"Admixture K=4","type":"admixture","selected":false},"admixture_k6":{"name":"Admixture K=6","type":"admixture","selected":false},"admixture_k7":{"name":"Admixture K=7","type":"admixture","selected":false},"admixture_k8":{"name":"Admixture K=8","type":"admixture","selected":false},"admixture_k9":{"name":"Admixture K=9","type":"admixture","selected":false},"admixture_k10":{"name":"Admixture K=10","type":"admixture","selected":false},"admixture_k11":{"name":"Admixture K=11","type":"admixture","selected":false},"admixture_k12":{"name":"Admixture K=12","type":"admixture","selected":false},"admixture_k13":{"name":"Admixture K=13","type":"admixture","selected":false},"admixture_k14":{"name":"Admixture K=14","type":"admixture","selected":false},"admixture_k16":{"name":"Admixture K=16","type":"admixture","selected":false},"admixture_k17":{"name":"Admixture K=17","type":"admixture","selected":false}}}');
;// CONCATENATED MODULE: ./views/pages/map/data/groups.json
const groups_namespaceObject = JSON.parse('{"special":{"isOptgroup":true,"name":"Special attributes","options":{"MISSING":{"name":"missing"},"OTHER":{"name":"other","selected":true}}},"attributes":{"isOptgroup":true,"name":"Data attributes","options":{}}}');
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/utilities.js
/* These are layer types which require substential amount of computation upon renderering */
//var HEAVY_LOAD_TYPES = new Set(['tag']);
function layerConfigSliderEventSetup(sliderObj, layerId, layerType, configName, callerName = 'onChange') {
  $(sliderObj.input).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      //sliderObj.update({});

      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      if (ArcheoUtilities.isArray(sessionValue)) sliderObj.update({
        from: sessionValue[0],
        to: sessionValue[1]
      });else sliderObj.update({
        from: sessionValue
      });
    }
  });

  var eventFunction = async function (data) {
    var config = {};
    if (sliderObj.options.type === 'double') config[configName] = [data.from, data.to];else config[configName] = data.from;
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
}

function layerAngleEventSetup(sliderObj, layerId, layerType, configName, callerName = 'onChange') {
  $(sliderObj.input).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      //sliderObj.update({});

      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      sliderObj.anglePicker("setValue", sessionValue);
    }
  });

  var eventFunction = async function (event, data) {
    var config = {};
    config[configName] = data.value;
    console.log('layerAngleEventSetup');
    console.log(data.value);
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config
    });
  };

  sliderObj.anglePicker({
    change: eventFunction
  });
}

function layerConfigCheckboxEventSetup(checkboxObj, layerId, layerType, configName) {
  $(checkboxObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      /* Synchronize UI with session */
      let sessionValue = ArcheoSession.get().layers[layerId].style[configName];
      if (sessionValue) $(checkboxObj).addClass('active');else $(checkboxObj).removeClass('active'); //$(checkboxObj).trigger('update');
    }
  });
  $(checkboxObj).on('click update', function (event) {
    let config = {};
    if (event.type === 'click')
      /* The class did not managed to switch yet, so the check must be negated for true value */
      config[configName] = !$(checkboxObj).hasClass('active'); // negation applied intentionally
    else config[configName] = $(checkboxObj).hasClass('active');
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config
    });
  });
}

function layerConfigRadiobuttonEventSetup(radiobuttonWrapper, layerId, layerType, configName) {
  $(radiobuttonWrapper).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) $(checkboxObj).find("[checked='']").trigger('update');
  });
  $(radiobuttonWrapper).on('change update', 'input', null, function (event) {
    var $input = $(event.target);
    let config = {};
    config[configName] = $input.attr('value');
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config
    });
  });
}

function layerSettingSliderEventSetup(sliderObj, layerId, layerType, settingName, callerName = 'onChange') {
  $(sliderObj.input).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      sliderObj.update({});
    }
  });

  var eventFunction = async function (data) {
    let value;
    if (sliderObj.options.type === 'double') value = [data.from, data.to];else value = data.from;
    ArcheoEvents.broadcast('layer-setting-change', null, {
      layerId: layerId,
      setting: settingName,
      value: value
    });
  };

  let updateDict = {};
  updateDict[callerName] = eventFunction;
  updateDict.onUpdate = eventFunction;
  sliderObj.update(updateDict);
}

function layerConfigSelectEventSetup(selectObj, layerId, layerType, configName) {
  $(selectObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      selectObj.trigger('changed.bs.select');
    }
  });
  $(selectObj).on('changed.bs.select', function (event) {
    var config = {};
    config[configName] = selectObj.val();
    ArcheoEvents.broadcast('layer-config-change', null, {
      layerId: layerId,
      value: config
    });
  });
}

function layerConfigColorPickEventSetup(colorPickerObj, layerId, notLayerType, callerName = 'move') {
  $(colorPickerObj).on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(notLayerType) || data.value !== notLayerType)) {
      let currentColor = colorPickerObj.spectrum('get');
      colorPickerObj.trigger(`${callerName}.spectrum`, [currentColor]);
    }
  });
  colorPickerObj.on(`${callerName}.spectrum change.spectrum`, function (e, color) {
    let rgbColor = color.toRgbString();
    ArcheoEvents.broadcast('layer-color-change', null, {
      layerId: layerId,
      value: rgbColor
    });
  });
  /* Initialy run event to synchronize UI with layer config */

  $(colorPickerObj).trigger('layer-type-change', [{
    layerId: layerId
  }]);
} // handler:color:change
// handler:drag:end
// layerGradientInput


function layerConfigGradientPickEventSetup(gradientPicker, layerId, layerType) {
  let gradientEl = $(gradientPicker.el);
  gradientEl.on('layer-type-change', function (event, data) {
    if (data.layerId === layerId && (!ArcheoUtilities.exists(layerType) || data.value === layerType)) {
      gradientPicker.change();
    }
  });

  var changeFunction = function (handler) {
    var rgbColors = gradientPicker.getColorValue().split('%, ');
    rgbColors = rgbColors.map(function (el) {
      if (el.includes('rgb')) return el.split(')')[0] + ')';else if (el.includes('#')) return el.split(' ')[0];
    });
    ArcheoEvents.broadcast('layer-gradient-change', null, {
      layerId: layerId,
      value: rgbColors,
      css: gradientPicker.getValue()
    });
  };

  gradientPicker.on(`change`, changeFunction);
  gradientPicker.on(`handler:color:change`, changeFunction);
  gradientPicker.on(`handler:drag:end`, changeFunction);
  gradientPicker.on(`handler:remove`, changeFunction);
  gradientPicker.on(`handler:add`, changeFunction);
}

function sizeSliderSettingSetup($obj, params = {}) {
  return ArcheoUI.initializeSlider($obj, {
    min: 10,
    max: 100,
    from: 20,
    step: 1,
    type: 'single',
    postfix: 'px',
    drag_interval: true,
    ...params
  });
}
/* It operates on cached GeoJSON features */


function getDataSourceAttributeValues(datasetId, layerId, attributeType) {
  let features = getDataSourceFeatures(datasetId);
  var attributesValues = new Set();

  if (attributeType === "admixture") {
    // let componentsCount = features[0].get('properties')[attributeId].value.length;
    // change to decoration 
    let componentsCount = ArcheoMap.setupFeatureAttributesData(features[0], layerId).attributeValue.length;
    let valuesArray = [];

    for (let i = 1; i < componentsCount + 1; ++i) valuesArray.push(`k #${i}`);

    return valuesArray;
  } else {
    features.forEach(feature => {
      // change to decoration 
      let value = ArcheoMap.setupFeatureAttributesData(feature, layerId).attributeValue; //let value = ArcheoUtilities.isObj(attributeProperty) ? attributeProperty.value : null;

      if (ArcheoUtilities.isValid(value) && value !== 'MISSING') attributesValues.add(value);
    });
    return Array.from(attributesValues);
  }
}

function getDataSourceFeatures(datasetId) {
  let features = ArcheoCache.getTemporaryEntry(datasetId);
  return ArcheoMap.readFeaturesAsGeoJSON(features);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/utilities.js
async function promiseIncorporatingAdmixtures(admixtureId, features, objectId) {
  return new Promise(async function (resolution, rejection) {
    let featuresDict = {};
    features.forEach(feature => {
      featuresDict[feature.get('properties').id] = feature;
    });
    let featuresIds = Object.keys(featuresDict);
    var filters = {
      'id_in': featuresIds
    };
    var selectionSet = ['id', 'admixture(type: $type)'];
    var variablesDeclarations = {
      "$type": "String"
    };
    let query = GraphQLRequests.createGraphqlQuery(objectId, selectionSet, filters, variablesDeclarations);
    let admixtureLength = 0;
    GraphQLRequests.queryGraphQL(query, response => {
      let admixtureDetails = response.data[objectId];
      admixtureDetails.forEach(featureInfo => {
        let featureId = featureInfo.id;
        let admixture = featureInfo.admixture;
        featuresDict[featureId].get('properties')[admixtureId] = admixture;
        if (ArcheoUtilities.isValid(admixture)) admixtureLength = admixture.value.length;
      });
      let legend = ArcheoSession.getAttributeLegend(admixtureId);
      let valuesLabels = [];

      if (admixtureLength > 0) {
        /* Determine values labels */
        for (let i = 1; i < admixtureLength + 1; ++i) {
          let valueLabel = `k #${i}`;
          valuesLabels.push(valueLabel);
          if (!(valueLabel in legend)) legend[valueLabel] = {
            name: valueLabel,
            filtered: false,
            color: ArcheoUtilities.randomRGBColorGenerator().toRgbString(),
            group: null
          };
        }

        legend._order = valuesLabels;
      }

      resolution(true);
    }, {
      type: admixtureId
    });
  });
}

async function promiseIncorporatingAttribute(attributeId, features, objectId) {
  return new Promise(async function (resolution, rejection) {
    let featuresDict = {};
    features.forEach(feature => {
      featuresDict[feature.get('properties').id] = feature;
    });
    let featuresIds = Object.keys(featuresDict);
    var filters = {
      'id_in': featuresIds
    };
    var selectionSet = ['id', `${attributeId}(lang: $lang)`];
    var variablesDeclarations = {
      "$lang": "String"
    };
    let query = GraphQLRequests.createGraphqlQuery(objectId, selectionSet, filters, variablesDeclarations);
    GraphQLRequests.queryGraphQL(query, response => {
      let attributeDetails = response.data[objectId];
      attributeDetails.forEach(featureInfo => {
        let featureId = featureInfo.id;
        let attributeInfo = featureInfo[attributeId];
        featuresDict[featureId].get('properties')[attributeId] = attributeInfo;

        if (ArcheoUtilities.isValid(attributeInfo)) {
          /* Update legend */
          let value = attributeInfo.value;
          let legend = ArcheoSession.getAttributeLegend(attributeId); // Register attribute value

          if (!(value in legend)) legend[value] = {
            name: value,
            filtered: false,
            color: ArcheoUtilities.randomRGBColorGenerator().toRgbString(),
            group: null
          };
        }
      });
      resolution(true);
    }, {
      lang: window.getLang()
    });
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/initialize-layer-types-settings.js


function setPointSettingsEvents(elementsDict, layerId) {
  layerConfigCheckboxEventSetup(elementsDict.cardValueCheckbox, layerId, 'point', 'cardinalityByValue');
  layerConfigCheckboxEventSetup(elementsDict.cardSizeCheckbox, layerId, 'point', 'cardinalityBySize');
  layerConfigCheckboxEventSetup(elementsDict.cardColorCheckbox, layerId, 'point', 'cardinalityByColor');
}

function setPointSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Point cardinality by value setting */

  var cardValueCheckboxId = layerId + '_point-card-value';
  var $cardValueCheckbox = newLayerElement.find('#point-card-value');
  $cardValueCheckbox.attr('name', cardValueCheckboxId);
  $cardValueCheckbox.attr('id', cardValueCheckboxId);
  if (layerConfig.style.cardinalityByValue) $cardValueCheckbox.addClass('active');else $cardValueCheckbox.removeClass('active');
  /* Point cardinality by size setting */

  var cardSizeCheckboxId = layerId + '_point-card-size';
  var $cardSizeCheckbox = newLayerElement.find('#point-card-size');
  $cardSizeCheckbox.attr('name', cardSizeCheckboxId);
  $cardSizeCheckbox.attr('id', cardSizeCheckboxId);
  if (layerConfig.style.cardinalityBySize) $cardSizeCheckbox.addClass('active');else $cardSizeCheckbox.removeClass('active');
  /* Point cardinality by color setting */

  var cardColorCheckboxId = layerId + '_point-card-color';
  var $cardColorCheckbox = newLayerElement.find('#point-card-color');
  $cardColorCheckbox.attr('name', cardColorCheckboxId);
  $cardColorCheckbox.attr('id', cardColorCheckboxId);
  if (layerConfig.style.cardinalityByColor) $cardColorCheckbox.addClass('active');else $cardColorCheckbox.removeClass('active');
  setPointSettingsEvents({
    'cardValueCheckbox': $cardValueCheckbox,
    'cardSizeCheckbox': $cardSizeCheckbox,
    'cardColorCheckbox': $cardColorCheckbox
  }, layerId);
}

function setPiechartSettingsEvents(elementsDict, layerId) {
  layerConfigCheckboxEventSetup(elementsDict.cardValueCheckbox, layerId, 'piechart', 'cardinalityByValue');
  layerConfigCheckboxEventSetup(elementsDict.cardSizeCheckbox, layerId, 'piechart', 'cardinalityBySize');
  layerConfigCheckboxEventSetup(elementsDict.othersCheckbox, layerId, 'piechart', 'enableOther');
  layerConfigSliderEventSetup(elementsDict.othersSlider, layerId, 'piechart', 'otherRatio', 'onFinish');
  $(elementsDict.othersCheckbox).on('click update', function (event) {
    let isChecked = $(event.target).hasClass('active');
    elementsDict.othersSlider.update({
      block: isChecked
    });
  });
  layerConfigCheckboxEventSetup(elementsDict.othersCountCheckbox, layerId, 'piechart', 'enableCountOther');
  layerConfigSliderEventSetup(elementsDict.othersCountSlider, layerId, 'piechart', 'otherCount', 'onFinish');
  $(elementsDict.othersCountCheckbox).on('click update', function (event) {
    let isChecked = $(event.target).hasClass('active');
    elementsDict.othersCountSlider.update({
      block: isChecked
    });
  });
}

function setPiechartSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Piechart cardinality by value setting */

  var cardValueCheckboxId = layerId + '_piechart-card-value';
  var $cardValueCheckbox = newLayerElement.find('#piechart-card-value');
  $cardValueCheckbox.attr('name', cardValueCheckboxId);
  $cardValueCheckbox.attr('id', cardValueCheckboxId);

  if (layerConfig.style.cardinalityByValue) {
    $cardValueCheckbox.addClass('active');
  } else $cardValueCheckbox.removeClass('active');
  /* Piechart cardinality by size setting */


  var cardSizeCheckboxId = layerId + '_piechart-card-size';
  var $cardSizeCheckbox = newLayerElement.find('#piechart-card-size');
  $cardSizeCheckbox.attr('name', cardSizeCheckboxId);
  $cardSizeCheckbox.attr('id', cardSizeCheckboxId);
  if (layerConfig.style.cardinalityBySize) $cardSizeCheckbox.addClass('active');else $cardSizeCheckbox.removeClass('active');
  /* Piechart group others checkbox setting */

  var othersCheckboxId = layerId + '_piechart-others-checkbox';
  var $othersCheckbox = newLayerElement.find('#piechart-others-checkbox');
  $othersCheckbox.attr('name', othersCheckboxId);
  $othersCheckbox.attr('id', othersCheckboxId);
  /* Piechart group others slider setting */

  var othersSliderId = layerId + '_piechart-others-slider';
  var $othersSlider = newLayerElement.find('#piechart-others-slider');
  $othersSlider.attr('name', othersSliderId);
  $othersSlider.attr('id', othersSliderId);
  var othersSliderObj = ArcheoUI.initializeSlider($othersSlider, {
    min: .0,
    max: 1.,
    from: layerConfig.style.otherRatio,
    step: 0.01,
    type: 'single',
    extra_classes: 'piechart-others-slider',
    prettify: val => {
      return Math.round(val * 100) + '%';
    }
  });

  if (layerConfig.style.enableOther) {
    $othersCheckbox.addClass('active');
    othersSliderObj.update({
      block: false
    });
  } else {
    $othersCheckbox.removeClass('active');
    othersSliderObj.update({
      block: true
    });
  }
  /* Piechart group others checkbox setting */


  var othersCountCheckboxId = layerId + '_piechart-others-count-checkbox';
  var $othersCountCheckbox = newLayerElement.find('#piechart-others-count-checkbox');
  $othersCountCheckbox.attr('name', othersCountCheckboxId);
  $othersCountCheckbox.attr('id', othersCountCheckboxId);
  /* Piechart group others slider setting */

  var othersCountSliderId = layerId + '_piechart-others-count-slider';
  var $othersCountSlider = newLayerElement.find('#piechart-others-count-slider');
  $othersCountSlider.attr('name', othersCountSliderId);
  $othersCountSlider.attr('id', othersCountSliderId);
  var othersCountSliderObj = ArcheoUI.initializeSlider($othersCountSlider, {
    min: 1,
    max: 100,
    from: layerConfig.style.otherCount,
    step: 1,
    type: 'single',
    extra_classes: 'piechart-others-slider',
    block: true,
    prettify: val => val
  });

  if (layerConfig.style.enableCountOther) {
    $othersCountCheckbox.addClass('active');
    othersCountSliderObj.update({
      block: false
    });
  } else {
    $othersCountCheckbox.removeClass('active');
    othersCountSliderObj.update({
      block: true
    });
  }

  setPiechartSettingsEvents({
    'cardValueCheckbox': $cardValueCheckbox,
    'cardSizeCheckbox': $cardSizeCheckbox,
    'othersCheckbox': $othersCheckbox,
    'othersSlider': othersSliderObj,
    'othersCountCheckbox': $othersCountCheckbox,
    'othersCountSlider': othersCountSliderObj
  }, layerId);
}

function setHeatmapSettingsEvents(elementsDict, layerId) {
  //layerSettingSliderEventSetup(elementsDict.radiusSlider, layerId, 'heatmap', 'radius')
  layerSettingSliderEventSetup(elementsDict.blurSlider, layerId, 'heatmap', 'blur');
}

function setHeatmapSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Heatmap blur setting */

  var blurSliderId = layerId + '_heatmap-blur';
  var $blurSlider = newLayerElement.find('#heatmap-blur');
  $blurSlider.attr('name', blurSliderId);
  $blurSlider.attr('id', blurSliderId);
  var blurSliderObj = sizeSliderSettingSetup($blurSlider, {
    from: layerConfig.style.blur,
    min: 10,
    max: 200
  });
  setHeatmapSettingsEvents({
    'blurSlider': blurSliderObj
  }, layerId);
  /* Initialize blur size */
  // It is initialized inside layerChange function
}

function setTagSettingsEvents(elementsDict, layerId) {
  layerConfigCheckboxEventSetup(elementsDict.cardSizeCheckbox, layerId, 'tag', 'cardinalityBySize');
  layerConfigCheckboxEventSetup(elementsDict.cardColorCheckbox, layerId, 'tag', 'cardinalityByColor');
  layerConfigCheckboxEventSetup(elementsDict.othersCheckbox, layerId, 'tag', 'enableOther');
  layerConfigSliderEventSetup(elementsDict.othersSlider, layerId, 'tag', 'otherRatio', 'onFinish');
  $(elementsDict.othersCheckbox).on('click update', function (event) {
    let isChecked = $(event.target).hasClass('active');
    elementsDict.othersSlider.update({
      block: isChecked
    });
  });
  layerConfigCheckboxEventSetup(elementsDict.othersCountCheckbox, layerId, 'tag', 'enableCountOther');
  layerConfigSliderEventSetup(elementsDict.othersCountSlider, layerId, 'tag', 'otherCount', 'onFinish');
  $(elementsDict.othersCountCheckbox).on('click update', function (event) {
    let isChecked = $(event.target).hasClass('active');
    elementsDict.othersCountSlider.update({
      block: isChecked
    });
  });
}

function setTagSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Tag cardinality by size setting */

  var cardSizeCheckboxId = layerId + '_tag-card-size';
  var $cardSizeCheckbox = newLayerElement.find('#tag-card-size');
  $cardSizeCheckbox.attr('name', cardSizeCheckboxId);
  $cardSizeCheckbox.attr('id', cardSizeCheckboxId);
  if (layerConfig.style.cardinalityBySize) $cardSizeCheckbox.addClass('active');else $cardSizeCheckbox.removeClass('active');
  /* Tag cardinality by color setting */

  var cardColorCheckboxId = layerId + '_tag-card-color';
  var $cardColorCheckbox = newLayerElement.find('#tag-card-color');
  $cardColorCheckbox.attr('name', cardColorCheckboxId);
  $cardColorCheckbox.attr('id', cardColorCheckboxId);
  if (layerConfig.style.cardinalityByColor) $cardColorCheckbox.addClass('active');else $cardColorCheckbox.removeClass('active');
  /* Tag group others checkbox setting */

  var othersCheckboxId = layerId + '_tag-others-checkbox';
  var $othersCheckbox = newLayerElement.find('#tag-others-checkbox');
  $othersCheckbox.attr('name', othersCheckboxId);
  $othersCheckbox.attr('id', othersCheckboxId);
  /* Tag group others slider setting */

  var othersSliderId = layerId + '_tag-others-slider';
  var $othersSlider = newLayerElement.find('#tag-others-slider');
  $othersSlider.attr('name', othersSliderId);
  $othersSlider.attr('id', othersSliderId);
  var othersSliderObj = ArcheoUI.initializeSlider($othersSlider, {
    min: .0,
    max: 1.,
    from: 0.01,
    step: 0.01,
    type: 'single',
    extra_classes: 'piechart-others-slider',
    prettify: val => {
      return Math.round(val * 100) + '%';
    }
  });

  if (layerConfig.style.enableOther) {
    $othersCheckbox.addClass('active');
    othersSliderObj.update({
      block: false
    });
  } else {
    $othersCheckbox.removeClass('active');
    othersSliderObj.update({
      block: true
    });
  }
  /* Tag group others checkbox setting */


  var othersCountCheckboxId = layerId + '_tag-others-count-checkbox';
  var $othersCountCheckbox = newLayerElement.find('#tag-others-count-checkbox');
  $othersCountCheckbox.attr('name', othersCountCheckboxId);
  $othersCountCheckbox.attr('id', othersCountCheckboxId);
  /* Tag group others slider setting */

  var othersCountSliderId = layerId + '_tag-others-count-slider';
  var $othersCountSlider = newLayerElement.find('#tag-others-count-slider');
  $othersCountSlider.attr('name', othersCountSliderId);
  $othersCountSlider.attr('id', othersCountSliderId);
  var othersCountSliderObj = ArcheoUI.initializeSlider($othersCountSlider, {
    min: 1,
    max: 100,
    from: 1,
    step: 1,
    type: 'single',
    extra_classes: 'piechart-others-slider',
    block: true,
    prettify: val => val
  });

  if (layerConfig.style.enableCountOther) {
    $othersCountCheckbox.addClass('active');
    othersCountSliderObj.update({
      block: false
    });
  } else {
    $othersCountCheckbox.removeClass('active');
    othersCountSliderObj.update({
      block: true
    });
  }

  setTagSettingsEvents({
    'cardSizeCheckbox': $cardSizeCheckbox,
    'cardColorCheckbox': $cardColorCheckbox,
    'othersCheckbox': $othersCheckbox,
    'othersSlider': othersSliderObj,
    'othersCountCheckbox': $othersCountCheckbox,
    'othersCountSlider': othersCountSliderObj
  }, layerId);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/initialize-layer.js







function setLayerAccordion(newLayerElement, layerId) {
  /* Assign meta */
  newLayerElement.find('.layer-header > .header-text').html(ArcheoSession.get().layers[layerId].settings.title);
  /* Assign correct id to all accordions */

  newLayerElement.find(`[data-target="#layer-template-accordion"]`).attr('data-target', `#${layerId}-accordion`);
  newLayerElement.find('#layer-template-accordion').attr('id', `${layerId}-accordion`);
}

function setSettingsAccordion(newLayerElement, layerId) {
  newLayerElement.find(`[data-target="#layer-type-settings"]`).attr('data-target', `#${layerId}-accordion-type-settings`);
  newLayerElement.find('#layer-type-settings').attr('id', `${layerId}-accordion-type-settings`);
  newLayerElement.find(`[data-target="#values-settings"]`).attr('data-target', `#${layerId}-accordion-values-settings`);
  newLayerElement.find('#values-settings').attr('id', `${layerId}-accordion-values-settings`);
}

function setGeneralSettingsEvents(elementsDict, layerId) {
  /* Change layer name */
  elementsDict.layerNameTextbox.on('change', function (event) {
    var $textbox = $(event.target);
    var newLayerName = $textbox.val();

    if (ArcheoUtilities.isValidNonEmptyString(newLayerName)) {
      ArcheoSession.get().layers[layerId].settings.title = newLayerName;
      elementsDict.layerHeaderTextElement.html(newLayerName);
      ArcheoEvents.broadcast('layer-setting-change', null, {
        layerId: layerId,
        setting: 'name',
        value: newLayerName
      });
      ArcheoEvents.broadcast('layer-name-change', null, {
        layerId: layerId,
        value: newLayerName
      });
    } else {
      let oldLayerName = ArcheoSession.get().layers[layerId].settings.title;
      $textbox.val(oldLayerName);
    }
  });
  /* Change layer type */

  elementsDict.layerTypeSelect.on('changed.bs.select', function (event) {
    var $select = $(event.target);
    let layerType = $select.val();
    ArcheoSession.get().layers[layerId].type = layerType;
    /* Show layer type settings */

    elementsDict.layerElement.find('.type-settings').addClass('d-none');
    elementsDict.layerElement.find(`.${layerType}-settings`).removeClass('d-none');

    if (layerType === 'heatmap') {
      /* Show proper color settings */
      elementsDict.layerElement.find('.layer-color-input').addClass('d-none');
      elementsDict.layerElement.find('.gradient-input-wrapper').removeClass('d-none');
      /* Change to type's default blending mode */

      elementsDict.layerElement.find('.select-layer-blending-mode').selectpicker('val', 'screen');
    } else {
      /* Show proper color settings */
      elementsDict.layerElement.find('.gradient-input-wrapper').addClass('d-none');
      elementsDict.layerElement.find('.layer-color-input').removeClass('d-none');
      /* Change to type's default blending mode */

      elementsDict.layerElement.find('.select-layer-blending-mode').selectpicker('val', 'normal');
    }

    ArcheoEvents.broadcast('layer-type-change', null, {
      layerId: layerId,
      value: layerType
    });
  }); // promiseIncorporatingAttribute(attributeId, features, objectId)

  const attributeChangeEventFunction = async function (event, data) {
    let layerConfig = ArcheoMap.getLayerConfigById(layerId);
    var $select = $(event.target);
    let attributeId = $select.val();
    let typesWrapper = $select.parent().next();

    if (attributeId in attributesTypes_namespaceObject) {
      typesWrapper.removeClass('d-none');
      ArcheoUI.setSelectpicker(elementsDict.attributeTypeSelect, attributesTypes_namespaceObject[attributeId], true);
      return;
    } else {
      typesWrapper.addClass('d-none');
    }

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      let attributeType = $select.find(`option[value=${attributeId}]`).attr("type") || 'value';
      let attributeTitle = $select.find(`option[value=${attributeId}]`).text();
      ArcheoSession.get().layers[layerId].attributeId = attributeId;
      ArcheoSession.get().layers[layerId].attributeType = attributeType;
      let params = {
        layerId: layerId,
        value: attributeId,
        text: attributeTitle,
        attributeType: attributeType
      };
      /* Gather information required for fetching data from database */

      let datasetId = layerConfig.datasetId;
      let objectId = ArcheoSession.get().datasets[datasetId].objectId;
      let features = ArcheoMap.getDataSourceFeatures(datasetId);
      let isThisAttributeDataAlreadyLoaded = (attributeId in features[0].get('properties'));

      if (attributeType === 'admixture') {
        if (!isThisAttributeDataAlreadyLoaded) {
          promiseIncorporatingAdmixtures(attributeId, features, objectId).then(isDataFetched => {
            if (!isDataFetched) {
              alert("For some reason the admixture data couldn't be fetched. Please, contact the administration.");
            } else {
              ArcheoEvents.broadcast('layer-attribute-change', null, params);
            }
          });
        } else ArcheoEvents.broadcast('layer-attribute-change', null, params);
      } else {
        if (!isThisAttributeDataAlreadyLoaded) {
          promiseIncorporatingAttribute(attributeId, features, objectId).then(isDataFetched => {
            if (!isDataFetched) alert("For some reason the attribute data couldn't be fetched. Please, contact the administration.");else {
              ArcheoEvents.broadcast('layer-attribute-change', null, params);
            }
          });
        } else ArcheoEvents.broadcast('layer-attribute-change', null, params);
      }
    }
  };
  /* Change layer attribute */


  elementsDict.attributeSelect.on('changed.bs.select', attributeChangeEventFunction);
  /* Change layer attribute type if available */

  elementsDict.attributeTypeSelect.on('changed.bs.select', attributeChangeEventFunction);
  /* Change dataset */

  elementsDict.datasetSelect.on('changed.bs.select', function (event, data) {
    let layerConfig = ArcheoMap.getLayerConfigById(layerId);
    var $select = $(event.target);
    let datasetId = $select.val(); //if( ArcheoUtilities.isValidNonEmptyString(datasetId) ) {

    ArcheoSession.get().layers[layerId].datasetId = datasetId;
    ArcheoEvents.broadcast('layer-dataset-change', null, {
      layerId: layerId,
      datasetId: datasetId
    });

    if (ArcheoUtilities.isValidNonEmptyString(datasetId)) {
      let objectId = ArcheoSession.get().datasets[datasetId].objectId;
      ArcheoUI.setSelectpicker(elementsDict.attributeSelect, attributes_namespaceObject[objectId], true);
      elementsDict.attributeSelect.selectpicker('val', layerConfig.attributeId);
    } //}

  });
}

function setGeneralSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Layer name textbox */

  var layerHeaderTextElement = newLayerElement.find('.layer-header > .header-text');
  var layerNameTextboxId = layerId + '_layer-name-textbox';
  var layerNameTextbox = newLayerElement.find('#layer-name-textbox');
  layerNameTextbox.attr('id', layerNameTextboxId);
  var layerTitle = ArcheoSession.get().layers[layerId].settings.title;
  layerNameTextbox.val(layerTitle);
  /* Layer dataset select */

  var datasetSelectId = layerId + '_select-layer-dataset';
  var $datasetSelect = newLayerElement.find('#select-layer-dataset');
  $datasetSelect.attr('id', datasetSelectId);
  let $datasetSelectpicker = $datasetSelect.selectpicker();
  /* Layer attribute select */

  var attributeSelectId = layerId + '_select-attribute';
  var $attributeSelect = newLayerElement.find('#select-attribute');
  $attributeSelect.attr('id', attributeSelectId);
  $attributeSelect.selectpicker();
  /* Layer attribute type select */

  var attributeTypeSelectId = layerId + '_select-attribute-type';
  var $attributeTypeSelect = newLayerElement.find('#select-attribute-type');
  $attributeTypeSelect.attr('id', attributeTypeSelectId);
  $attributeTypeSelect.selectpicker();
  /* Layer type select */

  var layerTypeSelectId = layerId + '_select-layer-type';
  var $layerTypeSelect = newLayerElement.find('#select-layer-type');
  $layerTypeSelect.attr('id', layerTypeSelectId);
  $layerTypeSelect.selectpicker();
  let elements = {
    'layerElement': newLayerElement,
    'layerHeaderTextElement': layerHeaderTextElement,
    'layerNameTextbox': layerNameTextbox,
    'layerTypeSelect': $layerTypeSelect,
    'attributeSelect': $attributeSelect,
    'attributeTypeSelect': $attributeTypeSelect,
    'datasetSelect': $datasetSelect
  };
  setGeneralSettingsEvents(elements, layerId);
  /* Initialize layer type selectpicker */

  $layerTypeSelect.selectpicker('val', layerConfig.type);
  /* Initialize dataset and attribute selectpicker by triggering dataset change event */

  ArcheoEvents.broadcast('dataset-update', null, {
    layerId: layerId
  });
  $datasetSelectpicker.selectpicker('val', layerConfig.datasetId);
  return elements;
}

function setVisibilitySettingsEvents(elementsDict, layerId) {
  /* Change visibility setting */
  elementsDict.layerVisibilityButt.on('click', function (event) {
    /* The button status will be changed only after click event, thus negation */
    var isToggled = !$(event.target).hasClass('active'); // negation applied on purpose

    ArcheoEvents.broadcast(['layer-setting-change', 'layer-visibility-change'], null, {
      layerId: layerId,
      setting: 'visible',
      value: isToggled
    });
  });
  /* Change opacity setting */

  layerConfigSliderEventSetup(elementsDict.opacitySlider, layerId, null, 'drawingAlpha', 'onFinish');
  /* Change blending mode */

  layerConfigSelectEventSetup(elementsDict.layerBlendingModeSelect, layerId, null, 'blendingMode');
  /* Change color */

  layerConfigColorPickEventSetup(elementsDict.layerColorInput, layerId,
  /* notLayerType */
  'heatmap', 'dragstop');
  /* Change gradient */

  layerConfigGradientPickEventSetup(elementsDict.gradientInput, layerId, 'heatmap');
}

function setVisibilitySettings(newLayerElement, layerId) {
  /* Visibility button */
  let layerVisibilityButt = newLayerElement.find('#visibility');
  layerVisibilityButt.attr('id', `${layerId}_visibility`);
  layerVisibilityButt.next().attr('for', `${layerId}_visibility`);
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  if (layerConfig.settings.visible) layerVisibilityButt.addClass('active');else layerVisibilityButt.removeClass('active');
  /* Opacity slider */

  var opacitySliderId = layerId + '_layer-opacity';
  var $opacitySlider = newLayerElement.find('#layer-opacity');
  $opacitySlider.attr('name', opacitySliderId);
  $opacitySlider.attr('id', opacitySliderId);
  var opacitySliderObj = ArcheoUI.initializeSlider($opacitySlider, {
    min: .0,
    max: 1.,
    from: layerConfig.settings.opacity,
    step: 0.01,
    type: 'single',
    prettify: val => {
      return Math.round(val * 100) + '%';
    }
  });
  var layerNumber = ArcheoSession.get().layers._count - 1;
  /* Color */

  var layerColorInputId = layerId + '_layer-color-input';
  var $layerColorInput = newLayerElement.find('#layer-color-input');
  $layerColorInput.attr('id', layerColorInputId);
  if (ArcheoUtilities.isValidNonEmptyString(layerConfig.style.color)) ArcheoUI.initializeColorInput($layerColorInput, {
    color: layerConfig.style.color
  }, layerNumber);else ArcheoUI.initializeColorInput($layerColorInput, {}, layerNumber);
  /* Gradient */

  var layerGradientInputId = layerId + '_layer-gradient-input';
  var $layerGradientInput = newLayerElement.find('#layer-gradient-input');
  $layerGradientInput.attr('id', layerGradientInputId);
  var gradientInputObj;
  if (ArcheoUtilities.isArray(layerConfig.style.color) && layerConfig.style.color.length > 0) gradientInputObj = ArcheoUI.initializeGradientInput($layerGradientInput, {
    gradient: layerConfig.style.color
  }, layerNumber);else gradientInputObj = ArcheoUI.initializeGradientInput($layerGradientInput, {}, layerNumber);
  /* Decide whether show single color or gradient options */

  if (ArcheoUtilities.isArray(layerConfig.style.color)) {
    $layerColorInput.addClass('d-none');
    $layerGradientInput.parent().removeClass('d-none');
  } else {
    $layerColorInput.removeClass('d-none');
    $layerGradientInput.parent().addClass('d-none');
  }
  /* Layer type select */


  var layerBlendingModeSelectId = layerId + '_select-layer-blending-mode';
  var $layerBlendingModeSelect = newLayerElement.find('#select-layer-blending-mode');
  $layerBlendingModeSelect.attr('id', layerBlendingModeSelectId);
  $layerBlendingModeSelect.selectpicker();
  $layerBlendingModeSelect.selectpicker('val', layerConfig.style.blendingMode);
  setVisibilitySettingsEvents({
    'layerElement': newLayerElement,
    'opacitySlider': opacitySliderObj,
    'layerBlendingModeSelect': $layerBlendingModeSelect,
    'layerColorInput': $layerColorInput,
    'gradientInput': gradientInputObj,
    'layerVisibilityButt': layerVisibilityButt
  }, layerId);
}

function setSizeSettingsEvents(elementsDict, layerId) {
  /* Change size setting */
  layerConfigSliderEventSetup(elementsDict.sizeSlider, layerId, null, 'size', 'onFinish'); //layerSettingSliderEventSetup(elementsDict.sizeSlider, layerId, null, 'radius', 'onFinish');

  /* Change font size setting */

  layerConfigSliderEventSetup(elementsDict.fontSlider, layerId, null, 'fontSizeRatio', 'onFinish');
}

function setSizeSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Layer size slider */

  var sizeSliderId = layerId + '_features-size-slider';
  var $sizeSlider = newLayerElement.find('#features-size-slider');
  $sizeSlider.attr('name', sizeSliderId);
  $sizeSlider.attr('id', sizeSliderId);
  var sizeSliderObj = sizeSliderSettingSetup($sizeSlider, {
    from: layerConfig.style.size[0],
    to: layerConfig.style.size[1],
    min: 4,
    max: 100,
    type: 'double'
  });
  /* Font size slider */

  var fontSliderId = layerId + '_font-size-slider';
  var $fontSlider = newLayerElement.find('#font-size-slider');
  $fontSlider.attr('name', fontSliderId);
  $fontSlider.attr('id', fontSliderId);
  var fontSliderObj = sizeSliderSettingSetup($fontSlider, {
    from: layerConfig.style.fontSizeRatio,
    step: 0.01,
    min: 0,
    max: 3,
    type: 'single',
    postfix: ''
  });
  setSizeSettingsEvents({
    'sizeSlider': sizeSliderObj,
    'fontSlider': fontSliderObj
  }, layerId);
}

function setPositionSettingsEvents(elementsDict, layerId) {
  /* Change feature angle setting */
  layerAngleEventSetup(elementsDict.anglepicker, layerId, null, 'angle');
  /* Change feature offset setting */

  layerConfigSliderEventSetup(elementsDict.offsetSlider, layerId, null, 'positionOffsetRatio', 'onFinish');
}

function setPositionSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Layer size slider */

  var anglepickerId = layerId + '_anglepicker';
  var $anglepicker = newLayerElement.find('#anglepicker');
  $anglepicker.attr('name', anglepickerId);
  $anglepicker.attr('id', anglepickerId);
  /* Initialize it with value */

  if (layerConfig.style.angle === '') {
    let layerNumber = ArcheoSession.get().layers._count - 1;
    layerConfig.style.angle = layerNumber * 45;
  }

  var anglepickerObj = $anglepicker.anglePicker({
    flat: true,
    value: layerConfig.style.angle,
    enableCenter: true,
    centerSize: 20,
    size: 75,
    handleSize: 15,
    handleType: "default",
    snap: 5,
    showValue: true,
    start: -90,
    showValueAlwaysEnabled: true
  });
  /* Font size slider */

  var offsetSliderId = layerId + '_feature-offset-slider';
  var $offsetSlider = newLayerElement.find('#feature-offset-slider');
  $offsetSlider.attr('name', offsetSliderId);
  $offsetSlider.attr('id', offsetSliderId);
  var offsetSliderObj = sizeSliderSettingSetup($offsetSlider, {
    from: layerConfig.style.positionOffsetRatio,
    step: 0.05,
    min: -10,
    max: 10,
    type: 'single',
    postfix: ''
  });
  setPositionSettingsEvents({
    'anglepicker': anglepickerObj,
    'offsetSlider': offsetSliderObj
  }, layerId);
}

function setWeightSettingsEvents(elementsDict, layerId) {
  /* Change size setting */
  layerConfigSliderEventSetup(elementsDict.scalingFactorSlider, layerId, null, 'weightScalingFactor', 'onFinish');
  layerConfigSliderEventSetup(elementsDict.growthFactorSlider, layerId, null, 'weightGrowthFactor', 'onFinish');
  layerConfigSelectEventSetup(elementsDict.weightGrowthSelect, layerId, null, 'weightGrowth');
  layerConfigSelectEventSetup(elementsDict.standMethodSelect, layerId, null, 'standardisationMethod');
  layerConfigRadiobuttonEventSetup(elementsDict.displayRadiobutton, layerId, null, 'valueDisplay');
}

function setWeightSettings(newLayerElement, layerId) {
  let layerConfig = ArcheoMap.getLayerConfigById(layerId);
  /* Weight display mode */

  var displayRadiobuttonId = layerId + '_weight-value-display';
  var $displayRadiobutton = newLayerElement.find('#weight-value-display');
  $displayRadiobutton.attr('name', displayRadiobuttonId);
  $displayRadiobutton.attr('id', displayRadiobuttonId);
  $displayRadiobutton.find('input').attr('name', displayRadiobuttonId);
  $displayRadiobutton.find(`input[value=${layerConfig.style.valueDisplay}]`).click();
  /* Weight scaling factor slider */

  var scalingFactorSliderId = layerId + '_weight-scaling-factor';
  var $scalingFactorSlider = newLayerElement.find('#weight-scaling-factor');
  $scalingFactorSlider.attr('name', scalingFactorSliderId);
  $scalingFactorSlider.attr('id', scalingFactorSliderId);
  var scalingFactorSliderObj = sizeSliderSettingSetup($scalingFactorSlider, {
    from: layerConfig.style.weightScalingFactor,
    min: -30,
    max: 30.0,
    step: 0.01,
    postfix: '',
    prettify: function (value) {
      return ArcheoMap.transformWeightFactor(parseFloat(value)).toString();
    }
  });
  /* Weight growth factor slider */

  var growthFactorSliderId = layerId + '_weight-growth-factor';
  var $growthFactorSlider = newLayerElement.find('#weight-growth-factor');
  $growthFactorSlider.attr('name', growthFactorSliderId);
  $growthFactorSlider.attr('id', growthFactorSliderId);
  var growthFactorSliderObj = sizeSliderSettingSetup($growthFactorSlider, {
    from: layerConfig.style.weightGrowthFactor,
    min: -30,
    max: 30.0,
    step: 0.01,
    postfix: '',
    prettify: function (value) {
      return ArcheoMap.transformWeightFactor(parseFloat(value)).toString();
    }
  });
  /* Weight growth select */

  var standMethodSelectId = layerId + '_select-stand-method';
  var $standMethodSelect = newLayerElement.find('#select-stand-method');
  $standMethodSelect.attr('id', standMethodSelectId);
  $standMethodSelect.selectpicker();
  $standMethodSelect.selectpicker('val', layerConfig.style.standardisationMethod);
  /* Weight growth select */

  var weightGrowthSelectId = layerId + '_select-weight-growth';
  var $weightGrowthSelect = newLayerElement.find('#select-weight-growth');
  $weightGrowthSelect.attr('id', weightGrowthSelectId);
  $weightGrowthSelect.selectpicker();
  $weightGrowthSelect.selectpicker('val', layerConfig.style.weightGrowth);
  setWeightSettingsEvents({
    'scalingFactorSlider': scalingFactorSliderObj,
    'growthFactorSlider': growthFactorSliderObj,
    'weightGrowthSelect': $weightGrowthSelect,
    'standMethodSelect': $standMethodSelect,
    'displayRadiobutton': $displayRadiobutton
  }, layerId);
}

function setLayerTypeSettings(newLayerElement, layerId) {
  setPointSettings(newLayerElement, layerId);
  setPiechartSettings(newLayerElement, layerId);
  setHeatmapSettings(newLayerElement, layerId);
  setTagSettings(newLayerElement, layerId);
}

function getDataAttributesIds(valuesSelect) {
  return $.map($(valuesSelect).find('optgroup[label="Data attributes"] option'), el => {
    return $(el).attr('value');
  });
}

function setValuesSettingsEvents(elementsDict, layerId) {
  /* Values select */
  elementsDict.valuesSelect.on('changed.bs.select', function (event) {
    var $select = $(event.target);
    var values = $select.selectpicker().val(); //ArcheoCache.setDatasetLayerSetting('attribute-values-set', layerId, values);
    //ArcheoSession.get().layers._count
    // it will be removed, as attibutes values filter will be global

    ArcheoEvents.broadcast('layer-value-change', null, {
      layerId: layerId,
      values: values,
      dataAttributesCount: getDataAttributesIds(elementsDict.valuesSelect).length
    });
  });
  elementsDict.valuesSelect.on('layer-attribute-change layer-attribute-initialization filter-attribute-change', function (event, data) {
    let layerConfig = ArcheoSession.get().layers[layerId];
    var attributeId = layerConfig.attributeId;
    var attributeType = layerConfig.attributeType;
    let datasetId = layerConfig.datasetId;
    let doesFilterChangeConcernsThisLayer = event.type === 'filter-attribute-change' && data.attributeId === attributeId;

    if (data.layerId === layerId || doesFilterChangeConcernsThisLayer === true) {
      // Reset value //
      if (ArcheoUtilities.isValidNonEmptyString(attributeId) && ArcheoUtilities.isValidNonEmptyString(datasetId)) {
        var attributesDict = ArcheoUtilities.deepCloneObject(groups_namespaceObject);
        var attributeValues = getDataSourceAttributeValues(datasetId, layerId, data.attributeType);
        attributeValues.forEach(function (value) {
          attributesDict.attributes.options[value] = {
            name: value
          };
        });
        ArcheoUI.setSelectpicker(elementsDict.valuesSelect, attributesDict, true, false);
        let componentValues = layerConfig.style.componentValues;
        var selected;

        if (event.type === 'layer-attribute-initialization') {
          if (componentValues.data === 'selectAll') {
            selected = getDataAttributesIds(elementsDict.valuesSelect);
          } else {
            selected = Object.keys(componentValues.data);
          }
        } else if (event.type === 'layer-attribute-change') {
          selected = getDataAttributesIds(elementsDict.valuesSelect);
          componentValues.data = "selectAll";
        } else if (event.type === 'filter-attribute-change') {
          let currentComponents = layerConfig.style.componentValues.data;
          if (currentComponents === 'selectAll') selected = getDataAttributesIds(elementsDict.valuesSelect);else {
            selected = Object.keys(layerConfig.style.componentValues.data);
          }
        }

        if (ArcheoUtilities.isValid(componentValues.special.MISSING)) selected.push('MISSING');
        if (ArcheoUtilities.isValid(componentValues.special.OTHER)) selected.push('OTHER');
        elementsDict.valuesSelect.selectpicker('val', selected);
      }
    }
  });
}

function setValuesSettings(newLayerElement, layerId) {
  /* Attribute name select */
  var valuesSelectId = layerId + '_select-value';
  var $valuesSelect = newLayerElement.find('.select-value');
  $valuesSelect.attr('id', valuesSelectId);
  $valuesSelect.selectpicker();
  setValuesSettingsEvents({
    'valuesSelect': $valuesSelect
  }, layerId);
}

function setCloneEvents(elementsDict, layerId) {
  /* Values select */
  elementsDict.cloneButton.on('click', function (event) {
    var $button = $(event.target);
    ArcheoSession.cloneLayer(layerId);
  });
}

function setCloneSettings(newLayerElement, layerId) {
  var $cloneButton = newLayerElement.find('.clone-button');
  setCloneEvents({
    'cloneButton': $cloneButton
  }, layerId);
}

function createLayerElement(layerId, hideLayer) {
  let newLayerElement = $(`#layer-template`).clone();
  newLayerElement.addClass('layer');

  if (hideLayer) {
    newLayerElement.find('.layer-header').addClass('collapsed');
    newLayerElement.children('.collapse').removeClass('show');
  }
  /* Assign new dataset id */


  newLayerElement.attr('id', layerId);
  newLayerElement.appendTo('#layers-container');
  setCloneSettings(newLayerElement, layerId);
  let generalElements = setGeneralSettings(newLayerElement, layerId);
  setValuesSettings(newLayerElement, layerId);
  /* Initialize filter values */

  ArcheoEvents.broadcast('layer-attribute-initialization', null, {
    layerId: layerId,
    attributeType: ArcheoSession.get().layers[layerId].attributeType
  });
  /* Initialize dataset and attribute selection */

  generalElements.datasetSelect.trigger('changed.bs.select', {
    initialize: true
  });
  setVisibilitySettings(newLayerElement, layerId);
  setLayerTypeSettings(newLayerElement, layerId);
  setPositionSettings(newLayerElement, layerId);
  setSizeSettings(newLayerElement, layerId);
  setWeightSettings(newLayerElement, layerId);
  setLayerAccordion(newLayerElement, layerId);
  setSettingsAccordion(newLayerElement, layerId);
  newLayerElement.css('display', 'block');
  /* Update LateX */
  //MathJax.typesetPromise();
}

function initializeLayer(layerId) {
  var hideLayer = Object.keys(ArcheoMap.getMapLayers()).length > 0;
  createLayerElement(layerId, hideLayer);
}

function broadcastLayerCreation(layerId, delayTime = null) {
  return ArcheoEvents.broadcast('layer-add', '#new-layer-button', {
    layerId: layerId,
    settings: ArcheoSession.get().layers[layerId].settings
  }, delayTime);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/layers/new-layer/new-layer.js


function initializeNewLayerButtonEvents() {
  let session = ArcheoSession.get();
  $('#new-layer-button').on('dataset-add dataset-remove', function (event) {
    let datasetsCount = session.datasets._count;
    if (datasetsCount > 0) $('#new-layer-button').removeAttr('disabled');else $('#new-layer-button').attr("disabled", true);
  });
  $('#new-layer-button').on('click', function () {
    var layerId = ArcheoSession.addLayer();
    broadcastLayerCreation(layerId);
    initializeLayer(layerId);
  });
}

/* harmony default export */ const new_layer = (initializeNewLayerButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/time/index.js
function onTimelineUpdate(selector = "#timeline") {
  $(selector).on('time-filter-update', function (event, data) {
    let timelineInfo = ArcheoSession.get().filters.timeline;
    $(event.target).data("ionRangeSlider").update({
      min: timelineInfo.minYear,
      max: timelineInfo.maxYear,
      from: timelineInfo.yearFrom,
      to: timelineInfo.yearTo,
      isTrigger: event.isTrigger
    });
  });
}

function initializeTimelineSettingsEvents() {
  $('#time-filter').on('time-filter-update', function (event) {
    let $min = $(event.target).find('#filter-min-max .input-years-from input');
    let $max = $(event.target).find('#filter-min-max .input-years-to input');
    let timelineInfo = ArcheoSession.get().filters.timeline;
    $min.val(timelineInfo.minYear);
    $max.val(timelineInfo.maxYear);
    $min.trigger('change');
    $max.trigger('change');
    let $from = $(event.target).find('#filter-from-to .input-years-from input');
    let $to = $(event.target).find('#filter-from-to .input-years-to input');
    $from.attr('min', timelineInfo.minYear);
    $from.attr('max', timelineInfo.maxYear);
    $to.attr('min', timelineInfo.minYear);
    $to.attr('max', timelineInfo.maxYear);
    $from.val(timelineInfo.yearFrom);
    $to.val(timelineInfo.yearTo);
    $from.trigger('change');
    $to.trigger('change');
    let minMaxedFrom = $from.attr('value');
    let minMaxedTo = $to.attr('value');
    timelineInfo.yearFrom = minMaxedFrom;
    timelineInfo.yearTo = minMaxedTo;
  });
  $('#filter-min-max input').on('change', function (event) {
    var timelineInfo = ArcheoSession.get().filters.timeline;

    if (!ArcheoUtilities.isValid(event.isTrigger)) {
      let fromValue = $('#filter-min-max .input-years-from input').attr('value');
      let toValue = $('#filter-min-max .input-years-to input').attr('value');
      timelineInfo.minYear = fromValue;
      timelineInfo.maxYear = toValue;
      ArcheoEvents.broadcast('time-filter-update', null, {}, 100);
    }
  });
  $('#filter-from-to input').on('change', function (event) {
    var timelineInfo = ArcheoSession.get().filters.timeline;

    if (!ArcheoUtilities.isValid(event.isTrigger)) {
      let fromValue = $('#filter-from-to .input-years-from input').attr('value');
      let toValue = $('#filter-from-to .input-years-to input').attr('value');
      timelineInfo.yearFrom = fromValue;
      timelineInfo.yearTo = toValue;
      ArcheoEvents.broadcast('time-filter-update', null, {}, 100);
    }
  });
}

function initializePresetTimeButtonEvents() {
  $('#present-switch').on('click', function (event) {
    let $obj = $(event.target);
    let value = $obj.prop('checked');
    var timelineInfo = ArcheoSession.get().filters.timeline;
    timelineInfo.showPresent = value;
    ArcheoEvents.broadcast('time-filter-update', null, {}, 100);
  });
  $('#present-switch').parent().on('click', function (event) {
    $('#present-switch').trigger('click');
  });
  /* Initialize switch state */

  let doShowPresent = ArcheoSession.get().filters.timeline.showPresent;
  if (doShowPresent !== $('#present-switch').prop('checked')) $('#present-switch').parent().click();
}

function initializeTimelineEvents(selector = "#timeline") {
  onTimelineUpdate(selector);
  initializeTimelineSettingsEvents();
  initializePresetTimeButtonEvents();
}

/* harmony default export */ const time = (initializeTimelineEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/filters/attribute/index.js



/*
let legend = ArcheoSession.getAttributeLegend(admixtureId);

let valuesLabels = [];
if(admixtureLength > 0) {

	for(let i = 1; i < admixtureLength + 1; ++i) {
		let valueLabel = `k #${i}`;
		valuesLabels.push( valueLabel );

		if( !(valueLabel in legend) )
			legend[ valueLabel ] = { 
				name: valueLabel,
				filtered: false,
				color: ArcheoUtilities.randomRGBColorGenerator().toRgbString(),
				group: null
			}
	}	

	legend._order = valuesLabels;
}
*/

function updateAttributeValuesSelect() {
  let $selectAttribute = $('#select-filter-attribute');
  let $selectAttributeType = $('#select-filter-attribute-type');
  let selectedAttributeId = $selectAttribute.val();
  let selectedAttributeTypeId = $selectAttributeType.val();
  let chosenAttributeId = ArcheoSession.get().filters.attributes.attributeId;
  if (selectedAttributeId === chosenAttributeId) $selectAttribute.trigger('update');else if (selectedAttributeTypeId === chosenAttributeId) $selectAttributeType.trigger('update');
}

function addGroupToLegend(legend, groupName) {
  if (!(groupName in legend)) {
    legend[groupName] = {
      name: groupName,
      filtered: false,
      color: ArcheoUtilities.randomRGBColorGenerator().toRgbString(),
      group: null
    };
  }
}

function initializeNewGroupButton() {
  let $newGroupButton = $('#attribute-filter-new-group-button');
  let $newGroupTextbox = $('#attribute-filter-new-group');
  let $selectValues = $('#select-filter-attribute-values');
  let $groupsSelect = $('#select-filter-groups');
  let $groupErrorText = $('#new-group-error-text'); // ArcheoSession.get().filters.attributes.attributeId = 'attributeId';
  // ArcheoSession.get().filters.attributes.attributeType = 'attributeType';

  $newGroupButton.on('click', function (event) {
    let attributeId = ArcheoSession.get().filters.attributes.attributeId;
    let attributeType = ArcheoSession.get().filters.attributes.attributeType;
    let legend = ArcheoSession.getAttributeLegend(attributeId);
    let groupCreationUseRegex = ArcheoSession.get().filters.attributes.groupCreationUseRegex;
    let groupName = $newGroupTextbox.val();
    /* Add new group */

    if (ArcheoUtilities.isValidNonEmptyString(groupName)) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)');

      if ($selectedOptions.length > 0) {
        if (groupCreationUseRegex) {
          let groupSet = new Set([]);
          $groupErrorText.text('');

          try {
            $selectedOptions.each(index => {
              let value = $($selectedOptions[index]).val();
              let matchResult = value.match(new RegExp(`(${groupName})`));

              if (ArcheoUtilities.isValid(matchResult)) {
                let groupMatchedName = matchResult[0];
                groupSet.add(groupMatchedName);
                /* Create new legend entry for the group, if it does not exists already */

                addGroupToLegend(legend, groupMatchedName);
                /* Assign attributes to the group */

                if (value !== groupMatchedName && value in legend) legend[value].group = groupMatchedName;
              }
            });
          } catch (error) {
            $groupErrorText.text(`Invalid regex. Error message: ${error}`);
            return;
          }
          /* Register potentially new group's name */


          groupSet.forEach(group => {
            if (!legend._groups.has(group)) {
              legend._groups.push(group);
            }
          });
        } else {
          if (!legend._groups.has(groupName)) {
            /* Register new group's name */
            $groupErrorText.text('');

            legend._groups.push(groupName);
            /* Create new legend entry for the group, if it does not exists already */


            addGroupToLegend(legend, groupName);
            /* Assign attributes to the group */

            $selectedOptions.each(index => {
              let value = $($selectedOptions[index]).val();
              if (value !== groupName && value in legend) legend[value].group = groupName;
            });
          } else {
            $groupErrorText.text('Group of such name already exists. Please, try another one.');
            return;
          }
        }
        /* Reload groups select */


        let groupsDict = {};

        legend._groups.forEach(group => {
          groupsDict[group] = legend[group];
        });

        ArcheoUI.setSelect($groupsSelect, groupsDict);
        /* Reload attribute values select */

        updateAttributeValuesSelect();
      } else {
        $groupErrorText.text('To create a group you must select attributes, which will be assigned to it.');
      }
    } else {
      $groupErrorText.text('You must provide group\'s name.');
    }

    ArcheoEvents.broadcast('filter-attribute-change', null, {
      attributeId: attributeId,
      attributeType: attributeType
    });
  });
}

function initializeAttriutesSelectButtons() {
  let $selectAllButt = $('#attribute-filter-select-all');
  let $unselectAllButt = $('#attribute-filter-unselect-all');
  let $selectValues = $('#select-filter-attribute-values');

  let filterButtonFunction = function (doSelect) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');

      if (doSelect) {
        $selectedOptions.attr('selected', 'selected');
      } else {
        $selectedOptions.removeAttr('selected');
      }
    };
  };

  $selectAllButt.on('click', filterButtonFunction(true));
  $unselectAllButt.on('click', filterButtonFunction(false));
}

function initializeAttriutesFilterButtons() {
  let $filterAllButt = $('#attribute-filter-filter-all');
  let $unfilterAllButt = $('#attribute-filter-unfilter-all');
  let $selectValues = $('#select-filter-attribute-values');

  let filterButtonFunction = function (doFilterOut) {
    return function (event) {
      let $selectedOptions = $selectValues.find('option:not(.hidden)');
      let attributeId = $selectValues.attr('attributeId');
      let attributeType = $selectValues.attr('attributeType');
      let legend = ArcheoSession.getAttributeLegend(attributeId);
      if (doFilterOut) $selectedOptions.addClass('filtered');else $selectedOptions.removeClass('filtered');
      $selectedOptions.each(index => {
        let value = $($selectedOptions[index]).val();
        legend[value].filtered = doFilterOut;
      });
      ArcheoEvents.broadcast('filter-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType
      });
    };
  };

  $filterAllButt.on('click', filterButtonFunction(true));
  $unfilterAllButt.on('click', filterButtonFunction(false));
}

function initializeUseRegexEvent() {
  let $attributeRegexCheckbox = $('#attribute-filter-regex');
  let $attributeSearch = $('#filter-attribute-search');
  $attributeRegexCheckbox.on('click', function (event) {
    let value = !$attributeRegexCheckbox.hasClass('active'); // negation applied intentionally

    if (value) {
      $attributeSearch.attr('placeholder', "Search attributes by regex");
      $attributeSearch.val('');
      ArcheoSession.get().filters.attributes.attributeSearchUseRegex = true;
    } else {
      $attributeSearch.attr('placeholder', "Search attributes");
      $attributeSearch.val('');
      ArcheoSession.get().filters.attributes.attributeSearchUseRegex = false;
    }
  });
  let $groupRegexCheckbox = $('#group-creation-regex');
  let $newGroupCreation = $('#attribute-filter-new-group');
  $groupRegexCheckbox.on('click', function (event) {
    let value = !$groupRegexCheckbox.hasClass('active'); // negation applied intentionally

    if (value) {
      $newGroupCreation.attr('placeholder', "Regex of a new group");
      $newGroupCreation.val('');
      ArcheoSession.get().filters.attributes.groupCreationUseRegex = true;
    } else {
      $newGroupCreation.attr('placeholder', "Name of a new group");
      $newGroupCreation.val('');
      ArcheoSession.get().filters.attributes.groupCreationUseRegex = false;
    }
  });
  let $groupFilterRegexCheckbox = $('#group-filter-regex');
  let $groupSearch = $('#filter-group-search');
  $groupFilterRegexCheckbox.on('click', function (event) {
    let value = !$groupFilterRegexCheckbox.hasClass('active'); // negation applied intentionally

    if (value) {
      $groupSearch.attr('placeholder', "Search groups by regex");
      $groupSearch.val('');
      ArcheoSession.get().filters.attributes.groupSearchUseRegex = true;
    } else {
      $groupSearch.attr('placeholder', "Search groups");
      $groupSearch.val('');
      ArcheoSession.get().filters.attributes.groupSearchUseRegex = false;
    }
  });
}

function initializeFilteringEvents() {
  let filteringFunction = function ($selectValues) {
    return function (event) {
      let $selectedOptions = $selectValues.find(':selected:not(.hidden)');
      let attributeId = ArcheoSession.get().filters.attributes.attributeId;
      let attributeType = ArcheoSession.get().filters.attributes.attributeType;
      let legend = ArcheoSession.getAttributeLegend(attributeId);
      let selectedCount = $selectedOptions.length;
      let filteredCount = $selectedOptions.filter('.filtered').length;

      if (filteredCount / selectedCount >= 0.5) {
        $selectedOptions.removeClass('filtered');
        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          legend[value].filtered = false;
        });
      } else {
        $selectedOptions.addClass('filtered');
        $selectedOptions.each(index => {
          let value = $($selectedOptions[index]).val();
          legend[value].filtered = true;
        });
      }

      ArcheoEvents.broadcast('filter-attribute-change', null, {
        attributeId: attributeId,
        attributeType: attributeType
      });
    };
  };

  let $selectAttributeValues = $('#select-filter-attribute-values');
  $selectAttributeValues.on('dblclick update', filteringFunction($selectAttributeValues));
  let $selectGroups = $('#select-filter-groups');
  $selectGroups.on('dblclick update', filteringFunction($selectGroups));
}

function initializeSearchEvents() {
  let searchEventFunction = function (useRegexKey, $selectValues) {
    return function (event) {
      let searchValue = $(event.target).val();
      $selectValues.find('option').filter(async function (index) {
        let $this = $(this);
        let optionValue = $this.val();
        let isMatched;

        try {
          if (ArcheoSession.get().filters.attributes[useRegexKey]) isMatched = optionValue.match(new RegExp(`${searchValue}`));else isMatched = optionValue.match(new RegExp(`^${ArcheoUtilities.escapeRegex(searchValue)}`));
        } catch (error) {
          isMatched = false;
        }

        if (!isMatched) $this.addClass('hidden');else $this.removeClass('hidden');
      });
    };
  };

  let $selectAttributesValues = $('#select-filter-attribute-values');
  let $attributesSearch = $('#filter-attribute-search');
  $attributesSearch.on('input', searchEventFunction('attributeSearchUseRegex', $selectAttributesValues));
  let $selectGroups = $('#select-filter-groups');
  let $groupsSearch = $('#filter-group-search');
  $groupsSearch.on('input', searchEventFunction('groupSearchUseRegex', $selectGroups));
}

function initializeAttributeSelectEvents() {
  let $selectAttribute = $('#select-filter-attribute');
  let $selectAttributeType = $('#select-filter-attribute-type');
  let $selectValues = $('#select-filter-attribute-values');

  const attributeChangeEventFunction = async function (event) {
    //alert('SELECT UUU');
    var $select = $(event.target);
    let attributeId = $select.val();
    let attributeType = $select.find(':selected').attr('type');
    let typesWrapper = $select.parent().next();

    if (attributeId in attributesTypes_namespaceObject) {
      typesWrapper.removeClass('d-none');
      ArcheoUI.setSelectpicker($selectAttributeType, attributesTypes_namespaceObject[attributeId], true);
      return;
    } else {
      typesWrapper.addClass('d-none');
    }

    if (ArcheoUtilities.isValidNonEmptyString(attributeId)) {
      let datasetsIds = ArcheoSession.get().datasets._order;

      let promises = [];
      datasetsIds.forEach(datasetId => {
        let features = ArcheoMap.getDataSourceFeatures(datasetId);
        let objectId = ArcheoSession.get().datasets[datasetId].objectId;

        if (attributeId in attributes_namespaceObject[objectId]) {
          let isThisAttributeDataAlreadyLoaded = (attributeId in features[0].get('properties'));

          if (!isThisAttributeDataAlreadyLoaded) {
            if (attributeType === 'admixture') {
              promises.push(promiseIncorporatingAdmixtures(attributeId, features, objectId));
            } else {
              promises.push(promiseIncorporatingAttribute(attributeId, features, objectId));
            }
          }
        }
      });
      Promise.all(promises).then(successFlags => {
        let areAllSuccessful = true;
        successFlags.forEach(isSuccess => {
          areAllSuccessful = areAllSuccessful && isSuccess;
        });

        if (areAllSuccessful) {
          let attributes = ArcheoSession.getAttributeLegend(attributeId, true);
          /* Filter out grouped attributes */

          attributes = ArcheoUtilities.filterObject(attributes, ([key]) => !ArcheoUtilities.isValid(attributes[key].group));
          console.log('SELECT attributes');
          console.log(attributes);
          ArcheoUI.setSelect($selectValues, attributes);
          $selectValues.attr('attributeId', attributeId);
          $selectValues.attr('attributeType', attributeType);
          ArcheoSession.get().filters.attributes.attributeId = attributeId;
          ArcheoSession.get().filters.attributes.attributeType = attributeType;
        } else alert("For some reason the attribute data couldn't be fetched. Please, contact the administration.");
      });
    }
  };
  /* Change layer attribute */


  $selectAttribute.on('changed.bs.select update', attributeChangeEventFunction);
  /* Change layer attribute type if available */

  $selectAttributeType.on('changed.bs.select update', attributeChangeEventFunction);
}

function initializeAttributeFilterEvents() {
  initializeAttributeSelectEvents();
  initializeSearchEvents();
  initializeFilteringEvents();
  initializeUseRegexEvent();
  initializeAttriutesSelectButtons();
  initializeAttriutesFilterButtons();
  initializeNewGroupButton();
}

/* harmony default export */ const attribute = (initializeAttributeFilterEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/right-sidebar/index.js







function initializeRightSidebarUIEvents() {
  time("#timeline");
  clustering();
  distance_slider();
  color();
  new_layer();
  attribute();
}

/* harmony default export */ const right_sidebar = (initializeRightSidebarUIEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets-select.js
function initializeDatasetSelectEvents() {
  $('#select-query-dataset').on('changed.bs.select update', function (event) {
    let $obj = $(event.target).find(':selected');
    let datasetName = $obj.text();
    let datasetId = $obj.val();
    let entity = $obj.attr('entity');
    let database = $obj.attr('database');
    ArcheoEvents.broadcast('selected-dataset-update', '#select-query-dataset', {
      datasetName: datasetName,
      datasetId: datasetId,
      entity: entity,
      database: database
    });
    let queryTemplate = {
      'database': database,
      'objects': entity.toLowerCase(),
      'filters': {},
      'lang': document.documentElement.lang
    };
    $('#query-call-textarea').val(JSON.stringify(queryTemplate, null, 1));
  });
  /* Trigger it once for default filters query */

  $('#select-query-dataset').trigger('update');
}

/* harmony default export */ const datasets_select = (initializeDatasetSelectEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/filters-button.js
function initializeQueryFiltersButtonEvents() {
  $('#query-filters-button').on('query-builder-update selected-dataset-update', function (event) {
    let $button = $(event.target);
    let rulesCount = $('#query-builder').find('.rule-value-container').not(':empty').length;
    $button.find('.items-count').text(rulesCount);
  });
  $('#query-filters-button').trigger('selected-entity-update');
}

/* harmony default export */ const filters_button = (initializeQueryFiltersButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets/update-layers.js
function updateLayersOnDatasetChange() {
  $('html').on('dataset-update', '.layer', function (event, data) {
    var $layer = $(event.target);
    var layerId = $layer.attr('id');

    if (!ArcheoUtilities.isValid(data.layerId) || data.layerId === layerId) {
      var $obj = $layer.find('select.select-layer-dataset');
      let datasetIds = ArcheoSession.get().datasets._order || [];
      let datasetDict = {};
      let layersSelectedDatasetId = ArcheoSession.get().layers[layerId].datasetId;
      let doesLayerSelectedDatasetStillExist = false;
      datasetIds.forEach(datasetId => {
        let datasetName = ArcheoSession.get().datasets[datasetId].name;
        datasetDict[datasetId] = {
          name: datasetName //subtext: entityTitle // i could change it to years range and features count

        };

        if (datasetId === layersSelectedDatasetId) {
          datasetDict[datasetId].selected = true;
          doesLayerSelectedDatasetStillExist = true;
        }
      });
      ArcheoUI.setSelectpicker($obj, datasetDict, true, true);
      if (!doesLayerSelectedDatasetStillExist) $obj.trigger('changed.bs.select');
    }
  });
}

function initializeDatasetEvents() {
  updateLayersOnDatasetChange();
}

/* harmony default export */ const update_layers = (initializeDatasetEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets/new-dataset/initialize-dataset.js
/* It operates on raw GraphQL output */
function getDatasetDating(features) {
  var dating = [Infinity, -Infinity];

  if (ArcheoUtilities.isValid(features[0].get('properties').dating)) {
    features.forEach(record => {
      dating[0] = Math.min(dating[0], record.get('properties').dating.year_start);
      dating[1] = Math.max(dating[1], record.get('properties').dating.year_end);
    });
    return dating;
  }

  return undefined;
}

function getMapFeatures(queryString) {
  return new Promise((resolution, rejection) => {
    GraphQLRequests.queryAPI(queryString, data => {
      resolution(data);
    }); //, {lang: 'en'});
  }).then(data => {
    /* Reset query error text */
    $('#query-call-error-text').text('');
    let features = ArcheoMap.createFeatures(data, ArcheoSession.get().map.dataProjection, ArcheoSession.get().map.mapProjection);
    return features;
  });
  /*.catch((error) => {
  $('#query-call-error-text').text(`Error has occurred. Please make sure that copy-pasted query is formatted correctly. If the error persists, please contact the administration. Error message:\n\n${error.message}`);
  return false;
  });*/
}

function initializeDownloadButton(newDatasetElement, datasetId) {
  /* Visibility button */
  let downloadButt = newDatasetElement.find('#file_download');
  downloadButt.attr('id', `${datasetId}_file_download`);
  downloadButt.next().attr('for', `${datasetId}_file_download`);
  downloadButt.on('click', function (event) {
    var datasetName = ArcheoSession.get().datasets[datasetId].name;
    var objectsIds = [];
    let datasetsFeaturesToDownload = ArcheoCache.getTemporaryEntry('datasetsFeaturesToDownload');
    var features = ArcheoCache.getTemporaryEntry(datasetId);
    features = ArcheoMap.readFeaturesAsGeoJSON(features);
    features.forEach(feature => {
      objectsIds.push(feature.get('properties').id);
    });
    datasetsFeaturesToDownload[datasetId] = objectsIds;
    $('#downloadTitle').text(`Download dataset ${datasetName} features`);
    $('#download-modal').modal('show');
  });
}

function createDatasetElement(datasetId) {
  let newDatasetElement = $(`#dataset-template`).clone();
  /* Assign new dataset id */

  newDatasetElement.attr('id', datasetId);
  newDatasetElement.find('.accordion-header').attr('data-target', `#${datasetId}-accordion`);
  newDatasetElement.find('.collapse').attr('id', `${datasetId}-accordion`);
  /* Initialize elements */

  initializeDownloadButton(newDatasetElement, datasetId);
  /* Assign meta */

  newDatasetElement.find('.accordion-header .header-text').html(ArcheoSession.get().datasets[datasetId].name);
  let dating = ArcheoSession.get().datasets[datasetId].dating;
  if (ArcheoUtilities.isValid(dating)) newDatasetElement.find('.meta-dating').html(dating[0] + ' | ' + dating[1]);else newDatasetElement.find('.meta-dating').html('Present');
  newDatasetElement.appendTo('#datasets-container');
  newDatasetElement.css('display', 'block');
}

async function fetchNewDataset(datasetId) {
  let queryString = ArcheoSession.get().datasets[datasetId].query;
  let features = await getMapFeatures(queryString);
  console.log('detfched features');
  console.log(features);
  console.log('fetched datasetId');
  console.log(datasetId);

  if (ArcheoUtilities.isValid(features)) {
    /* Save to the cache loaded features */
    let geojsonFeatures = ArcheoMap.parseFeaturesToGeoJSON(features);
    /*
    console.log('geojsonFeatures');
    console.log(geojsonFeatures);
    */

    ArcheoCache.setTemporaryEntry(datasetId, geojsonFeatures);
    let dating = getDatasetDating(features);
    ArcheoSession.get().datasets[datasetId].dating = dating;
    ArcheoSession.get().datasets[datasetId].isPresent = ArcheoUtilities.isValid(dating);
    console.log('0 fetchNewDataset');
    return true;
  }

  return false;
}

function broadcastDatasetCreation(datasetId) {
  createDatasetElement(datasetId);
  ArcheoEvents.broadcast("dataset-add", '#query', {
    datasetId: datasetId
  });
  ArcheoEvents.broadcast("dataset-update", '#layer-template', {
    datasetId: datasetId
  });
}


;// CONCATENATED MODULE: ./views/pages/map/data/entityDictionary.json
const entityDictionary_namespaceObject = JSON.parse('{"AADR v44.3":{"remains":"RemainsAllenDB","person":"PersonAllenDB"},"EMPOP v4/R13":{"person":"PersonEmpopDB"}}');
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/datasets/new-dataset/new-dataset.js



function initializeQueryButtonEvents() {
  $('#query').on('click', async function () {
    let queryString = $('#query-call-textarea').val();
    var queryObject = JSON.parse(queryString);
    var entityName = queryObject.objects;
    var databaseName = queryObject.database;
    var objectId = entityDictionary_namespaceObject[databaseName][entityName];
    let datasetId = ArcheoSession.addDataset(objectId, databaseName, entityName, queryString);
    if ((await fetchNewDataset(datasetId)) === false) ArcheoSession.removeDataset(datasetId);else broadcastDatasetCreation(datasetId);
  });
}

/* harmony default export */ const new_dataset = (initializeQueryButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/left-sidebar/index.js





function initializeLeftSidebarUIEvents() {
  /* Datasets */
  update_layers();
  /* Other */

  datasets_select();
  filters_button();
  new_dataset();
}

/* harmony default export */ const left_sidebar = (initializeLeftSidebarUIEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/query-builder-submit.js
function submitQueryBuilderFiltersEvent() {
  $('#submit-rules').on('click', function () {
    let rulesObj = $('#query-builder').queryBuilder('getGraphQL');

    if (ArcheoUtilities.isValid(rulesObj)) {
      let filtersJSON = JSON.stringify(rulesObj, null, 1);
      $('#query-call-textarea').val(filtersJSON);
      $('#query-builder-modal').modal('hide');
      ArcheoEvents.broadcast('query-builder-update', '#submit-rules');
    }
  });
}

/* harmony default export */ const query_builder_submit = (submitQueryBuilderFiltersEvent);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/sidebars-handles.js
function initializeSidebardsHandlesEvents() {
  $(".sidebar-trigger").click(function () {
    let $sidebarWrapper = $(this).parent();

    if ($sidebarWrapper.hasClass('left')) {
      $('#content-wrapper').toggleClass("active-left");
    } else if ($sidebarWrapper.hasClass('right')) {
      $('#content-wrapper').toggleClass("active-right");
    }
    /* Trigger event for legend positioning fix */


    $sidebarWrapper.one("transitionend webkitTransitionEnd oTransitionEnd", function () {
      ArcheoEvents.broadcast('panel-activated');
    });
    $sidebarWrapper.toggleClass("active");
    $(this).find(".sidebar-arrow").toggleClass("active");
  });
}

/* harmony default export */ const sidebars_handles = (initializeSidebardsHandlesEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/legend.js



function initializeMapLegend() {
  ArcheoLegend.initialize(attributes_namespaceObject, attributesTypes_namespaceObject);
}

/* harmony default export */ const ui_legend = (initializeMapLegend);
// EXTERNAL MODULE: ./node_modules/file-saver/dist/FileSaver.min.js
var FileSaver_min = __webpack_require__(4616);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/download-button.js

const queriesData = {
  "Remains": {
    "selectionSet": ["download"]
  },
  "Person": {
    "selectionSet": ["download"]
  },
  "default": {
    "variablesDeclarations": {
      "$lang": "String"
    }
  }
};
const csvFileColumns = ['sample_id', 'sex', 'population_name', 'dating_from', 'dating_to', 'haplogroup_y', 'haplogroup_mt', 'place_name', 'is_archaeological_site', 'latitude', 'longitude'];

function queryDownload(entityName, featuresIds, datasetName) {
  return new Promise((resolution, rejection) => {
    let entityQueriesData = GraphQLRequests.getEntityQueryData(queriesData, entityName);
    let filters = {
      id_in: featuresIds
    };
    let query = GraphQLRequests.createGraphqlQuery(entityName, entityQueriesData['selectionSet'], filters //entityQueriesData['variablesDeclarations'] //{'$lang': 'String'}
    );
    console.log('download query');
    console.log(query); //queryDownload(query, fileType, successCallback,

    GraphQLRequests.queryGraphQL(query, response => {
      console.log('response');
      console.log(response);
      let filePart = response.data[entityName];
      console.log('filePart');
      console.log(filePart);
      resolution({
        filePart: filePart,
        datasetName: datasetName
      });
    });
  });
}

function initializeDownloadButtonEvents() {
  $('#download-button').on('click', function (event) {
    var fileType = $('#download-filetype :checked').attr('value');
    let datasetsFeaturesToDownload = ArcheoCache.getTemporaryEntry('datasetsFeaturesToDownload');
    let datasetsIds = Object.keys(datasetsFeaturesToDownload);
    let promises = [];
    datasetsIds.forEach(datasetId => {
      let entityName = ArcheoSession.get().datasets[datasetId].entityName;
      let datasetName = ArcheoSession.get().datasets[datasetId].name;
      let featuresIds = datasetsFeaturesToDownload[datasetId];
      promises.push(queryDownload(entityName, featuresIds, datasetName));
      console.log('entityName');
      console.log(entityName);
      console.log('featuresIds');
      console.log(featuresIds);
    });
    Promise.all(promises).then(datas => {
      var fileContent = [];

      if (fileType === 'JSON') {
        datas.forEach(data => {
          let filePart = data.filePart;
          let datasetName = data.datasetName;
          filePart.forEach(feature => {
            fileContent.push({ ...feature.download,
              dataset_name: datasetName
            });
          });
        });
        var blob = new Blob([JSON.stringify(fileContent, null, 1)], {
          type: "text/plain;charset=utf-8"
        });
        (0,FileSaver_min.saveAs)(blob, "data.json");
      } else if (fileType === 'CSV') {
        fileContent = ['dataset_name\t' + csvFileColumns.join('\t')];
        datas.forEach(data => {
          let filePart = data.filePart;
          let datasetName = data.datasetName;
          filePart.forEach(feature => {
            var line = [datasetName];
            csvFileColumns.forEach(col => {
              line.push(feature.download[col]);
            });
            fileContent.push(line.join('\t'));
          });
        });
        var file = new File([fileContent.join('\n')], "data.csv", {
          type: "text/csv;charset=utf-8"
        });
        (0,FileSaver_min.saveAs)(file);
      }
    }); //$('#query-builder-modal').modal('hide');
  });
}

/* harmony default export */ const download_button = (initializeDownloadButtonEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/ui/index.js







function initializeUIEvents() {
  left_sidebar();
  right_sidebar();
  query_builder_submit();
  sidebars_handles();
  ui_legend();
  download_button();
}

/* harmony default export */ const ui = (initializeUIEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/utilities.js
function loadAllData(datasetId) {
  // dataSource
  var features = ArcheoCache.getTemporaryEntry(datasetId);
  features = ArcheoMap.readFeaturesAsGeoJSON(features);
  ArcheoMap.setDataSourceFeatures(datasetId, features);
}


;// CONCATENATED MODULE: ./views/pages/map/js/events/map/dataset.js


function dataSourcesTimeFilteringEvent() {
  $('#map').on('time-filter-update', function (event, data) {
    ArcheoLegend.clearLegend();
    ArcheoMap.triggerLayerStyleFunction();
    ArcheoMap.triggerClusterFilters();
  });
}

function addDataSourceEvent() {
  $('#map').on('dataset-add', function (event, data) {
    /* Create map source object */
    var isPresent = ArcheoSession.get().datasets[data.datasetId].isPresent;
    ArcheoMap.addSource(data.datasetId);
    loadAllData(data.datasetId);
  });
}

function dataset_initializeDatasetEvents() {
  dataSourcesTimeFilteringEvent();
  addDataSourceEvent();
}

/* harmony default export */ const dataset = (dataset_initializeDatasetEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/interaction.js
/*
import {
  getSourceConfigProperty
} from 'JsSnippets/archeo-utilities/index.js';
*/
//import ArcheoMap from 'JsSnippets/archeo-map/index';
//import {showMapModal, hideAllMapModals} from '../../map-modals';
var selectedFeature = null;

function redrawMapOnWindowSize(map, timeInterval = 300) {
  $(window).resize(function () {
    var mapObj = ArcheoMap.getMap();
    setTimeout(function () {
      map.updateSize();
    }, timeInterval);
  });
}
/*
// It should be remade to hover //
function highlightFeatureAndShowModalOnSelect(map) {

	map.on('click', function(e) {
	//var mapObj = getMap();
	var mapObj = e.map; //getMap(); // ??????

	var clickedFeature = null;
	mapObj.forEachFeatureAtPixel(e.pixel, function(feature, layer) {
		clickedFeature = feature;
		//var entityType = ArcheoMap.getLayerDataSourceConfig(layer).entityType;

		hideAllMapModals();
		showMapModal('placeholder', feature);

		return true;
	});

	if(selectedFeature !== null) {
		if(clickedFeature !== null && selectedFeature !== clickedFeature) {
		ArcheoMap.setFeatureDecoration(clickedFeature, {'isHighlit': true});
		ArcheoMap.resetFeatureDecoration(selectedFeature, 'selected');
		selectedFeature = clickedFeature;
		} else {
		ArcheoMap.resetFeatureDecoration(selectedFeature, 'selected');
		}
	}
	});
}
*/

/*function attributeColorChangeOnClick() {
	$('html').on('click', '.legend-symbol.point', function(e) {

	});
}*/


function initializeInteractionEvents() {
  var mapObj = ArcheoMap.getMap(); // or it should be el?

  redrawMapOnWindowSize(mapObj); //highlightFeatureAndShowModalOnSelect( mapObj );
}

/* harmony default export */ const interaction = (initializeInteractionEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/layer.js
/* Change layer appearance events */
function changeLayerTypeEvent() {
  $('#map').on('layer-type-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    let layerType = data.value; //let oldLayerType = data.value;
    // provide dataset if present

    ArcheoMap.changeLayer(layer, {
      layerId: layer.get('layerId'),
      layerType: layerType
    });
    /* Update objects filtering */

    ArcheoLegend.clearLegend();
  });
}

function changeLayerAttributeEvent() {
  $('#map').on('layer-attribute-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    var attributeId = data.value;
    var attributeName = data.text;
    var attributeType = data.attributeType;
    ArcheoMap.setLayerConfig(layer, {
      attributeId: attributeId,
      attributeName: attributeName
    });
  });
}

function changeLayerValueEvent() {
  $('#map').on('layer-value-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    let layerStyle = ArcheoMap.getLayerStyleById(data.layerId);
    let layerConfig = ArcheoMap.getLayerConfigById(data.layerId);
    layerStyle.componentValues.data = {};
    layerStyle.componentValues.special = {};
    data.values.forEach(value => {
      if (value === 'OTHER' || value === 'MISSING') layerStyle.componentValues.special[value] = true;else layerStyle.componentValues.data[value] = true;
    });
    let selectedDataAttributesCount = Object.keys(layerStyle.componentValues.data).length;
    /* Save it only for result numerical types */

    if (layerConfig.attributeType === 'admixture') {
      let selectedValuesLabels = Object.keys(layerStyle.componentValues.data);
      selectedValuesLabels = selectedValuesLabels.sort((a, b) => {
        let aNum = a.split('#')[1];
        let bNum = b.split('#')[1];
        return aNum - bNum;
      });
      /* Get indices of selected components in properites value arrays */

      /* -1, as it starts from 1 */

      layerStyle.componentValues.valuesMask = selectedValuesLabels.map(value => parseInt(value.split('#')[1]) - 1);
      layerStyle.componentValues.valuesMaskLabels = selectedValuesLabels;
    }

    if (data.dataAttributesCount === selectedDataAttributesCount) layerStyle.componentValues.data = 'selectAll';
    /* Update objects filtering */

    ArcheoLegend.clearLegend();
    ArcheoMap.triggerLayerStyleFunction(layer);
    ArcheoMap.triggerClusterFilters(layer);
  });
}

function addLayerEvent() {
  $('#map').on('layer-add', function (event, data) {
    let layerId = data.layerId;
    let layerTitle = ArcheoSession.get().layers[layerId].name;
    /* Create map layer object */

    ArcheoMap.addLayer(layerId, {
      declutter: true,
      title: layerTitle,
      ...data.settings
    });
  });
}

function changeLayerDataSetEvent() {
  $('#map').on('layer-dataset-change', function (event, data) {
    let layerId = data.layerId;
    let datasetId = data.datasetId;
    ArcheoMap.setLayerDataSource(layerId, datasetId);
  });
}

function changeLayerSettingEvent() {
  $('#map').on('layer-setting-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);
    if (ArcheoUtilities.isValid(layer)) layer.set(data.setting, data.value, false);
  });
}

function changeLayerConfigEvent() {
  $('#map').on('layer-config-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);

    if (ArcheoUtilities.isValid(layer)) {
      ArcheoMap.setLayerStyle(layer, data.value);
      if (ArcheoMap.getLayerConfig(layer).type === 'heatmap') ArcheoMap.triggerClusterFilters(layer);else ArcheoMap.triggerLayerStyleFunction(layer);
    }
  });
}

function layer_changeLayerColorEvent() {
  $('#map').on('layer-color-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);

    if (ArcheoUtilities.isValid(layer)) {
      ArcheoMap.setLayerStyle(layer, {
        color: data.value
      });
      /* Update objects filtering */

      ArcheoMap.triggerLayerStyleFunction(layer);
    }
  });
}

function layer_changeLayerGradientEvent() {
  $('#map').on('layer-gradient-change', function (event, data) {
    let layer = ArcheoMap.getLayer(data.layerId);

    if (ArcheoUtilities.isValid(layer)) {
      layer.set('gradient', data.value, false);
    }
  });
}

function sortMapLayersOnElementsSort() {
  /* On layers sort - change z-index setting */
  $('#layers-container').on('sortbeforestop', function (event, ui) {
    var layersOrder = $(event.target).sortable('toArray');
    layersOrder.forEach((layerId, index) => {
      let zIndex = index + 1000; // ogarnij heatmapę

      ArcheoEvents.broadcast('layer-setting-change', null, {
        layerId: layerId,
        setting: 'zIndex',
        value: zIndex
      });
    });
  });
}

function initializeLayersEvents() {
  addLayerEvent();
  changeLayerTypeEvent();
  changeLayerAttributeEvent();
  changeLayerValueEvent();
  changeLayerSettingEvent();
  changeLayerConfigEvent();
  layer_changeLayerColorEvent();
  layer_changeLayerGradientEvent();
  changeLayerDataSetEvent();
  sortMapLayersOnElementsSort();
}

/* harmony default export */ const map_layer = (initializeLayersEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/clustering.js
/*** Cluster events ***/
function changeClusterStrategyEvent() {
  $('#map').on('cluster-strategy-change', function (event, data) {
    let layersDic = ArcheoMap.getMapLayers();
    /* Only for those visible */

    Object.keys(layersDic).forEach(layerId => {
      let layer = layersDic[layerId];
      let clusterSource = layer.getSource();
      if (ArcheoUtilities.isValid(clusterSource)) clusterSource.refresh(); // Fix for the animated clusters //

      layer.oldcluster.clear();
      ArcheoMap.triggerClusterFilters(layer);
    });
  });
}

function clustering_changeClusterConfigEvent() {
  $('#map').on('cluster-config-change', function (event, data) {
    let layersDic = ArcheoMap.getMapLayers();
    ArcheoSession.get().strategy.config = { ...ArcheoSession.get().strategy.config,
      ...data.config
    };
    Object.keys(layersDic).forEach(layerId => {
      let layer = layersDic[layerId];
      /* Fix for the animated clusters */

      layer.oldcluster.clear();
      ArcheoMap.triggerLayerStyleFunction(layer);
    });
  });
}

function changeClusterSettingEvent() {
  $('#map').on('cluster-setting-change', function (event, data) {
    let layersDic = ArcheoMap.getMapLayers();
    ArcheoSession.get().strategy.config[data.setting] = data.value;
    Object.keys(layersDic).forEach(layerId => {
      let layer = layersDic[layerId];
      let clusterSource = layer.getSource();

      if (ArcheoUtilities.isValid(clusterSource)) {
        layer.oldcluster.clear();
        if (data.setting == 'range') clusterSource.setDistance(data.value);else if (data.setting == 'distance') clusterSource.setMinDistance(data.value);
      }
    });
  });
}

function changeClusterRegionShowEvent() {
  /*
  var filters = {'id_in': featuresIds};
  	var selectionSet = [ 'id', 'regionsIds(type: $type)' ];
  	var variablesDeclarations = { "$type": "String" };
  		let query = GraphQLRequests.createGraphqlQuery(
  		objectId, 
  		selectionSet,
  		filters,
  		variablesDeclarations
  	);
  		let variables = {
  		type: regionsTypeId
  	};
   
  	GraphQLRequests.queryGraphQL(query, (response) => {
  
  		let regionsIds = response.data[objectId];
  		let uniqueRegionsIds = new Set();
  */
  $('#map').on('cluster-region-show', function (event, data) {
    let regionsLayer = ArcheoMap.getRegionsLayer();
    regionsLayer.getSource().clear();

    if (data.config.showRegions) {
      let regionsDict = ArcheoMap.getMapRegions();
      regionsLayer.getSource().clear();
      let regionIds = Object.keys(regionsDict);
      regionIds.forEach(regionId => {
        let regionInfo = regionsDict[regionId];
        if (!ArcheoUtilities.isValid(regionInfo.polygon)) ArcheoMap.fetchAndAddRegionPolygon(regionId, regionsLayer);else regionsLayer.getSource().addFeature(regionInfo.polygon);
      });
    } else {
      regionsLayer.getSource().clear();
    }
  });
}

function selectClusterStrategyEvent() {
  $('#clustering-strategy').on('layer-add', function (event, data) {
    ArcheoEvents.broadcast('select-clustering-strategy', null, {}); // Trigger settings //

    $('#clustering-slider').data("ionRangeSlider").update({});
    $('#distance-slider').data("ionRangeSlider").update({});
  });
}

function initializeClusteringEvents() {
  clustering_changeClusterConfigEvent();
  changeClusterStrategyEvent();
  changeClusterSettingEvent();
  changeClusterRegionShowEvent();
  selectClusterStrategyEvent();
}

/* harmony default export */ const map_clustering = (initializeClusteringEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/attributes.js
function attributeColorChangeOnClick() {
  var $picker = $('#legend-color-picker');
  /* Initialize common color picker */

  var $spectrum = ArcheoUI.initializeColorInput($picker, {//replacerClassName: 'd-none'
    //color: handler.getColor(),
    //palette: defaultColorsForGradients
    // appendTo
  });
  $('#legend').on('mousedown', '.legend-symbol', null, function (event) {
    //$picker.spectrum("show");
    //$picker.spectrum('show');
    //var e = new jQuery.Event("click");
    //e.pageX = 10;
    //e.pageY = 10;
    //$('#legend-color-picker').trigger('click');
    //$('#legend-color-picker').trigger('click');
    //$('#legend-color-picker')[0].trigger('show.spectrum');
    $spectrum.spectrum('show');
    $spectrum.trigger('click');
    $spectrum.trigger('show.spectrum');
    return true;
  }); //$('#legend-color-picker').trigger('click');

  /*$picker.on('dragstop.spectrum change.spectrum', function(e, color) {
      let colorString = color.toRgbString();
      
      var $el = $(e.target);
       $el.css('background-color', colorString);
  });
  */
}

function initializeAttributesEvents() {
  attributeColorChangeOnClick();
}

/* harmony default export */ const attributes = (initializeAttributesEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/filters.js
function changeAttributeFilterEvent() {
  $('#map').on('filter-attribute-change', function (event, data) {
    //let layer = ArcheoMap.getLayer( data.layerId );
    ArcheoMap.triggerClusterFilters();
  });
}

function initializeFilterEvents() {
  changeAttributeFilterEvent();
}

/* harmony default export */ const filters = (initializeFilterEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/map/index.js







function initializeMapEvents() {
  dataset();
  interaction();
  map_layer();
  map_clustering();
  attributes();
  filters();
}

/* harmony default export */ const map = (initializeMapEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/events/index.js



function initializePageEvents() {
  map();
  ui();
}

/* harmony default export */ const events = (initializePageEvents);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/map.js
/*function resetLayersActiveAttribute(layerId) {
  updateLayersActiveAttribute(layerId, '', '');
}*/

/*
function setupEvents(map) {
	map.once('postrender', function(event) {
	  initializeMapEvents();
	  initializeDatasetEvents();
	  initializeLayersEvents();
    initializeClusteringEvents();
	});
}  
*/

/*

            "position": [19.657016, 52.205848],
            "zoom": 4,
            "dataProjection": "EPSG:4326",
            "mapProjection": "EPSG:3857",
            "baseLayers": {}

*/
function initializeInteractiveMap(lang) {
  let mapInfo = ArcheoSession.get().map;
  var mapConfig = {
    mapInitialCenter: mapInfo.position,
    dataProjection: mapInfo.dataProjection,
    mapProjection: mapInfo.mapProjection,
    mapInitialZoom: mapInfo.zoom,
    mapDOMObjectId: "map",
    // #map
    baseMapName: 'Light',
    controlsNames: 'all',
    interactionsNames: 'all'
  };
  var map = ArcheoMap.initializeMap(mapConfig, lang); //setupEvents(map);
}

/* harmony default export */ const elements_map = (initializeInteractiveMap);
;// CONCATENATED MODULE: ./views/mixins-pug/timeline/script.js
function initializeTimelineSlider(selector, params = null) {
  var $timeline = $(selector);
  if (params === null) params = {};
  $timeline.ionRangeSlider({
    type: "double",
    grid: true,
    drag_interval: true,
    min_interval: null,
    max_interval: null,
    hide_min_max: true,
    onStart: function (data) {
      var zeroElement = $('.irs-grid-text').filter(function () {
        return $(this).text() == '0';
      });
      zeroElement.addClass('zero_year');
    },
    prettify: ArcheoUtilities.getFormattedYear,
    keyboard: true,
    skin: "flat",
    ...params
  });
  return $timeline.data("ionRangeSlider");
}


;// CONCATENATED MODULE: ./views/pages/map/js/elements/timeline.js


function initializeTimeline(selector = "#timeline") {
  let timelineInfo = ArcheoSession.get().filters.timeline;
  var $timelineRangeObj = initializeTimelineSlider(selector, {
    min: timelineInfo.minYear,
    max: timelineInfo.maxYear,
    from: timelineInfo.yearFrom,
    to: timelineInfo.yearTo
  });
  $timelineRangeObj.update({
    onChange: async function (data) {
      ArcheoSession.get().filters.timeline.yearFrom = data.from;
      ArcheoSession.get().filters.timeline.yearTo = data.to;
      ArcheoEvents.broadcast('time-filter-update', selector, {}, 100);
    }
  }); //$(selector).trigger('time-filter-update');
}

/* harmony default export */ const timeline = (initializeTimeline);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/sidebars.js
function initializeSidebars() {
  $(".sidebar").mCustomScrollbar({
    theme: "minimal",
    scrollInertia: 150,
    mouseWheel: {
      disableOver: ["select", "option", "textarea", "a", "li", "ul"],
      deltaFactor: 60 // px

    }
  });
}

/* harmony default export */ const sidebars = (initializeSidebars);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/present-switch.js
function initializePresentSwitch() {
  let timelineWrapper = $('#timeline-wrapper');
  let irsLineHeight = timelineWrapper.find('.irs-line').height();
  let irsHeight = timelineWrapper.find('.irs-line').parent().height();
  let switchWrapperSelector = $('#present-switch-wrapper');
  switchWrapperSelector.css('height', timelineWrapper.height());
  let switchSelector = switchWrapperSelector.find('.toggle');
  let fixCenteringPosition = 2;
  /* Fix positioning */

  switchSelector.css('top', irsHeight - fixCenteringPosition);
  switchSelector.css('height', irsLineHeight);
}

/* harmony default export */ const present_switch = (initializePresentSwitch);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/time-filter.js
function initializeTimeFilter(lang) {
  var $timefilter = $("#time-filter");
  var timelineMinMax = [ArcheoSession.get().filters.timeline.minYear, ArcheoSession.get().filters.timeline.maxYear];
  /* Hook used UI elements to their events */

  ArcheoUI.initializeRangeSpinner($timefilter.find('#filter-from-to'), timelineMinMax, true, window.getLang());
  ArcheoUI.initializeRangeSpinner($timefilter.find('#filter-min-max'), timelineMinMax, true, window.getLang()); //initializeTimeFilterEvents();
  //$timefilter.trigger('time-filter-update');
}

/* harmony default export */ const time_filter = (initializeTimeFilter);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/layers-container.js
function initializeLayersContainer() {
  $('#layers-container').sortable({
    placeholder: "sortable-placeholder",
    handle: ".handle",
    delay: 250,
    opacity: 0.7
  });
  $('#layer-trash').droppable({
    accept: "#layers-container > li",
    classes: {
      "ui-droppable-active": "ui-state-highlight"
    },
    drop: function (event, ui) {
      let $layer = ui.draggable;
      let layerId = $layer.prop('id');
      /* Remove layer from map */

      ArcheoMap.removeLayer(layerId);
      /* Remove layer from cache */

      ArcheoCache.removeLayer(layerId);
      /* Remove layer from session */

      ArcheoSession.removeLayer(layerId);
      /* Remove layer from interface */

      $layer.remove();
    }
  });
}

/* harmony default export */ const layers_container = (initializeLayersContainer);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/clustering.js
function initializeClusteringStrategy() {
  /* Layer name textbox */
  var clusteringNameTextbox = $('#clustering-name-textbox');
  var clusteringTitle = ArcheoSession.get().strategy.name;
  clusteringNameTextbox.val(clusteringTitle);
  let strategyInfo = ArcheoSession.get().strategy.config;
  /* Features clustering mode select */

  var $clusteringModeSelect = $('#clustering-mode-select');
  $clusteringModeSelect.selectpicker();
  if (ArcheoUtilities.isValid(strategyInfo.method.distance)) $clusteringModeSelect.selectpicker('val', strategyInfo.method.distance);
  if (ArcheoUtilities.isValid(strategyInfo.method.region)) $clusteringModeSelect.selectpicker('val', strategyInfo.method.region);
  /* Features clustering range slider */

  var $rangeSlider = $('#clustering-slider');
  var rangeSliderObj = ArcheoUI.initializeSlider($rangeSlider, {
    min: 1,
    max: 5000,
    from: strategyInfo.range,
    step: 1,
    type: 'single',
    postfix: 'km'
  });
  /* Features cluster placement in centroid option */

  var $centroidCheckbox = $('#cluster-at-centroid');
  $centroidCheckbox.attr("checked", strategyInfo.clusterAtCentroid); // strategyInfo

  /* Features cluster in-between distance slider */

  var $distanceRangeSlider = $('#distance-slider');
  var distanceRangeSliderObj = ArcheoUI.initializeSlider($distanceRangeSlider, {
    min: 0,
    max: 5000,
    from: strategyInfo.distance,
    from_max: 1000,
    step: 1,
    type: 'single',
    postfix: 'km'
  });
  /* Regions appearance */

  var $regionShowCheckbox = $('#region-show');
  $regionShowCheckbox.attr("checked", strategyInfo.showRegions); //+icon-checkbox('features-region-label', 'simple', "attach region label to cluster", true)
  //+icon-checkbox('features-region-time', 'simple', "allow to filter regions by time", true)
  //+icon-checkbox('features-region-unassgned', 'simple', "hide unassigned clusters", false)
}

/* harmony default export */ const right_sidebar_clustering = (initializeClusteringStrategy);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/attribute-filter.js


function initializeRegexCheckboxes() {
  let $regex = $("#attribute-filter-regex");
  let $search = $("#filter-attribute-search");
  let useRegex = ArcheoSession.get().filters.attributes.attributeSearchUseRegex;

  if (useRegex) {
    $regex.addClass('active');
    $search.attr('placeholder', 'Search attributes by regex');
  } else {
    $regex.removeClass('active');
    $search.attr('placeholder', 'Search attributes');
  }

  let $groupCreationRegexCheckbox = $('#group-creation-regex');
  let $newGroupCreation = $('#attribute-filter-new-group');
  let useGroupsCreationRegex = ArcheoSession.get().filters.attributes.groupSearchUseRegex;

  if (useGroupsCreationRegex) {
    $groupCreationRegexCheckbox.addClass('active');
    $newGroupCreation.attr('placeholder', 'Regex of a new group');
  } else {
    $groupCreationRegexCheckbox.removeClass('active');
    $newGroupCreation.attr('placeholder', 'Name of a new group');
  }

  let $groupFilterRegexCheckbox = $('#group-filter-regex');
  let $groupFilterSearch = $('#filter-group-search');
  let useGroupsFilterRegex = ArcheoSession.get().filters.attributes.groupSearchUseRegex;

  if (useGroupsFilterRegex) {
    $groupFilterRegexCheckbox.addClass('active');
    $groupFilterSearch.attr('placeholder', 'Search groups by regex');
  } else {
    $groupFilterRegexCheckbox.removeClass('active');
    $groupFilterSearch.attr('placeholder', 'Search groups');
  }
}
/*
"attributeId": "",
"attributeSearchUseRegex": false,
*/


function initializeAttributeSelect() {
  let $selectAttribute = $('#select-filter-attribute');
  let allAttributes = {};
  Object.keys(attributes_namespaceObject).forEach(objectId => {
    allAttributes = ArcheoUtilities.deepExtend(allAttributes, attributes_namespaceObject[objectId]);
  });
  ArcheoUI.setSelectpicker($selectAttribute, allAttributes, true);
}

function initializeAttributeFilter() {
  initializeAttributeSelect();
  initializeRegexCheckboxes();
}

/* harmony default export */ const attribute_filter = (initializeAttributeFilter);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/right-sidebar/index.js





function initializeRightSidebarElements() {
  time_filter();
  layers_container();
  right_sidebar_clustering();
  attribute_filter();
}

/* harmony default export */ const elements_right_sidebar = (initializeRightSidebarElements);
// EXTERNAL MODULE: ./node_modules/jQuery-QueryBuilder/dist/js/query-builder.js
var query_builder = __webpack_require__(1923);
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/query-normalization.js
function createFilter(node) {
  var entity = node.field;
  var relationOperator = node.data.relation_operator;
  var property = node.data.attributes;
  var operator = property === 'relationship' ? 'exists' : node.operator;
  var value = node.value;
  if (ArcheoUtilities.isArray(value)) value = value.slice(0); // copies the object

  /* Fix for custom operators */

  operator = operator.split('__');
  operator = operator[operator.length - 1];
  node = {
    "entity": entity,
    "property": property,
    "operator": operator,
    "value": value
  };

  if (ArcheoUtilities.isValidNonEmptyString(relationOperator)) {
    node.relation_operator = relationOperator;
  }

  return node;
}

function traverseRules(node, translatedNode) {
  if ('rules' in node) {
    // It is group then
    var rulesList = [{}];
    translatedNode[node.condition] = rulesList;

    for (var i = 0; i < node.rules.length; ++i) {
      let newTranslatedNode = {};
      let newNode = node.rules[i];
      traverseRules(newNode, newTranslatedNode);
      rulesList.push(newTranslatedNode);
    }
    /* If no AND filters concatenation were performed */


    if (Object.keys(rulesList[0]).length === 0) rulesList.shift();
  } else {
    var filter = createFilter(node);
    Object.assign(translatedNode, filter);
  }
}

function getNormalizedQuery(rules) {
  if (!ArcheoUtilities.isValid(rules)) //throw Error(`Error during query translation. Expected \'object\' type, received \'${typeof rules}\'`);
    return {};else {
    var graphQLFilters = {};
    traverseRules(rules, graphQLFilters);
    return graphQLFilters;
  }
}

/* harmony default export */ const query_normalization = (getNormalizedQuery);
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/events.js



function createInitializeSearchableEvent($builderEl, lang) {
  $builderEl.on('afterCreateRuleInput.queryBuilder', function (e, rule) {
    // never display error for my custom filter
    let inputEl = rule.$el.find('.rule-value-container input.searcher');
    let filterEl = rule.$el.find('.rule-filter-container > .dropdown > select option:selected');
    let entityName = filterEl.attr('entity-name');
    let valueAttribute = filterEl.attr('value-attribute');
    let queryAttribute = filterEl.attr('label-attribute');
    let detailsAttribute = filterEl.attr('details-attribute');
    let isSearchable = ArcheoUtilities.exists(filterEl.attr('searchable')); //dropdownObj.selectpicker('render');

    if (isSearchable) {
      ArcheoSearcher.initialize(inputEl, entityName, valueAttribute, queryAttribute, detailsAttribute, lang);
    }
    /* Render custom selects */


    rule.$el.find('.rule-value-container select').selectpicker('render');
  });
}

function createRulesTranslationEvent($builderEl, lang) {
  $builderEl.queryBuilder.extend({
    getGraphQL: function () {
      var rules = this.getRules();
      var entityName = '';
      var databaseName = '';
      /*let languageCode = this.settings.lang_code;
      	let entity = $builderEl.attr('entity');
      	return rulesTranslator(rules, entity, languageCode);*/

      let $datasetSelect = $('#select-query-dataset :selected');
      let queryTemplate = {
        'database': $datasetSelect.attr('database'),
        'objects': $datasetSelect.attr('entity').toLowerCase(),
        'filters': query_normalization(rules),
        'lang': document.documentElement.lang
      };
      return queryTemplate; //return rules;
    }
  });
}

function hookEventsForUIElements($builderEl, lang) {
  $builderEl.on('afterCreateRuleInput.queryBuilder', function (e, rule) {
    if (rule.filter.plugin == 'selectpicker') {
      rule.$el.find('.rule-value-container').find('.bootstrap-select').removeClass('form-control');
    }

    if (rule.filter.queryAttribute == 'date') {
      if (rule.operator.type === 'between' || rule.operator.type === 'inrange') {
        let session = ArcheoSession.get();
        let timelineMinMax = [session.filters.timeline.minYear, session.filters.timeline.maxYear];
        ArcheoUI.initializeRangeSpinner(rule.$el, timelineMinMax, true, lang);
      } else {
        ArcheoUI.initializeYearInput(rule.$el, true, true, lang);
      }
    }
  });
}

function removeUnnecessaryDividers($builderEl, lang) {
  $builderEl.on('afterInit.queryBuilder', function (e) {
    var filters = $(e.target)[0].queryBuilder.settings.filters.filter(function (el, i, a) {
      return el.depth > 0;
    });
    var optgroups = filters.map(function (filter) {
      return filter.optgroup;
    });
    var optgroupsDic = $(e.target)[0].queryBuilder.settings.optgroups;
    $(e.target).on('shown.bs.select', '.bootstrap-select > select', function () {
      optgroups.forEach(function (optgroup) {
        let label = optgroupsDic[optgroup][lang];
        $(`.bootstrap-select .dropdown-header > span:contains('${label}')`).parent().prev('.dropdown-divider').css("display", "none");
      });
    });
  });
}

function cacheEvents($builderEl, lang) {
  $builderEl.on('selected-dataset-update', function (event, datasetInfo) {
    $builderEl.queryBuilder('destroy');
    createQueryBuilder($builderEl, lang, datasetInfo);
  });
}

function initializeQueryBuilderEvents($builderEl, lang) {
  hookEventsForUIElements($builderEl, lang);
  createInitializeSearchableEvent($builderEl, lang);
  createRulesTranslationEvent($builderEl, lang);
  removeUnnecessaryDividers($builderEl, lang);
  cacheEvents($builderEl, lang);
}


;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/customOperators.js
/* harmony default export */ const customOperators = ([{
  type: 'inrange',
  nb_inputs: 1,
  multiple: false,
  optgroup: 'date_interval',
  apply_to: ['number']
}, {
  type: 'between',
  nb_inputs: 1,
  multiple: false,
  optgroup: 'date_interval',
  apply_to: ['number']
}, {
  type: 'part_of',
  nb_inputs: 1,
  multiple: false,
  apply_to: ['string']
}, {
  type: 'not_part_of',
  nb_inputs: 1,
  multiple: false,
  apply_to: ['number']
}, {
  type: 'distance_less',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'distance_less_or_equal',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'distance_greater',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'distance_greater_or_equal',
  nb_inputs: 1,
  apply_to: ['number']
}, {
  type: 'timepoint__less',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__less_or_equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__greater',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__greater_or_equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'timepoint__not_equal',
  nb_inputs: 1,
  apply_to: ['number'],
  optgroup: 'date_timepoint'
}, {
  type: 'boolean_does',
  nb_inputs: 1,
  apply_to: ['boolean']
}]);
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/customTemplates.js
// Edited: Added data-tokens property in option tag 
/* harmony default export */ const customTemplates = ({
  filterSelect: '\
		{{ var optgroup = null; }} \
		<select class="form-control" name="{{= it.rule.id }}_filter"> \
		{{? it.settings.display_empty_filter }} \
			<option value="-1">{{= it.settings.select_placeholder }}</option> \
		{{?}} \
		{{~ it.filters: filter }} \
			{{? optgroup !== filter.optgroup }} \
			{{? optgroup !== null }}</optgroup>{{?}} \
			{{? (optgroup = filter.optgroup) !== null }} \
				<optgroup label=" \
				{{? filter.root === true }} \
				<span> \
				{{??}} \
				<span style=\'padding-left: {{= filter.depth * 2 }}em\'> \
				{{?}} \
				{{? filter.depth === 0 }} \
				<i class=\'material-icons\'>east</i> \
				{{??}} \
				<i class=\'material-icons\'>subdirectory_arrow_right</i> \
				{{?}} \
				{{= it.translate(it.settings.optgroups[optgroup]) }}</span>"> \
			{{?}} \
			{{?}} \
			<option {{~ filter.tags: tag }} {{= tag}} {{~}} entity-name={{= filter.field}} value-attribute={{= filter.valueAttribute}} label-attribute={{= filter.queryAttribute}} details-attribute={{= filter.detailsAttribute}} title="<span class=\'right-separator\'>{{= it.translate(it.settings.optgroups[optgroup]) }}</span>{{= it.translate(filter.label) }}&nbsp;" data-tokens="{{= it.translate(it.settings.optgroups[optgroup]) }}" value="{{= filter.id }}" {{? filter.icon}}data-icon="{{= filter.icon}}"{{?}} data-content="<span style=\'padding-left: {{= filter.depth * 2 }}em\'>{{= it.translate(filter.label) }}</span>">{{= it.translate(filter.label) }}</option> \
		{{~}} \
		{{? optgroup !== null }}</optgroup>{{?}} \
		</select>'
});
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/filterFunctions.js
function getRelationFilterValue(ruleContainer) {
  return ruleContainer.find('select.relation-filter').val() || '';
}

/* harmony default export */ const filterFunctions = ({
  // Suitable for: date, age
  from_to: {
    valueGetter: function (rule) {
      var attributeName = rule.filter.valueAttribute;
      var values = [];
      /*var attributes = [];
       attributes = [ 
      attributeName + 'From', 
      attributeName + 'To' 
      ];*/

      let ruleContainer = rule.$el.find('.rule-value-container');

      if (rule.operator.type == 'between' || rule.operator.type == 'inrange') {
        values = [ruleContainer.find('.input-years-from input.attribute-value').getDateNumberValue(), ruleContainer.find('.input-years-to input.attribute-value').getDateNumberValue()];
        /*values = [{
        	year: ruleContainer.find('.input-years-from input.attribute-value').getDateNumberValue()
        },{
        	year: ruleContainer.find('.input-years-to input.attribute-value').getDateNumberValue()
        }];	*/
      } else {
        values = ruleContainer.find('input.attribute-value').getDateNumberValue();
      }

      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        //translatable: rule.filter.tags.has("translatable"),
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');

      if (rule.operator.type == 'between' || rule.operator.type == 'inrange') {
        let $fromInput = ruleContainer.find('.input-years-from input.attribute-value');
        $fromInput.val(value[0]);
        $fromInput.change();
        let $toInput = ruleContainer.find('.input-years-to input.attribute-value');
        $toInput.val(value[1]);
        $toInput.change();
      } else {
        let $input = ruleContainer.find('input.attribute-value');
        $input.val(value);
        $input.change();
        rule.$el.find('.rule-value-container > :first').change();
      }
    },
    default_operator: 'between'
  },
  coordinates: {
    valueGetter: function (rule) {
      let attributeName = rule.filter.valueAttribute;
      let distance = parseFloat(rule.$el.find('.rule-value-container .distance.attribute-value').val());
      let distanceInMeters = distance * 1000;
      let ruleContainer = rule.$el.find('.rule-value-container');
      let values = {
        point: {
          latitude: parseFloat(ruleContainer.find('.latitude.attribute-value').val()),
          longitude: parseFloat(ruleContainer.find('.longitude.attribute-value').val())
        },
        distance: distanceInMeters
      };
      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        //translatable: rule.filter.tags.has("translatable"),
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');
      ruleContainer.find('.latitude.attribute-value').val(value.point.latitude).trigger('change');
      ruleContainer.find('.longitude.attribute-value').val(value.point.longitude).trigger('change');
      ruleContainer.find('.distance.attribute-value').val(value.distance).trigger('change');
    },
    default_operator: 'less',
    default_value: {
      point: {
        latitude: '',
        longitude: ''
      },
      distance: ''
    }
  },
  // ,
  default: {
    valueGetter: function (rule) {
      let attributeName = rule.filter.valueAttribute;
      let operation = rule.operator.type;
      let values = [];
      let ruleContainer = rule.$el.find('.rule-value-container');
      let inputElement = ruleContainer.find('input.attribute-value,select.attribute-value');
      /*if( rule.filter.tags.has("searchable") ) {
      	if( inputElement.attr('searched-value') )
      		values.push( inputElement.attr('searched-value') );
      } else {*/

      if (operation == 'in' || operation == 'not_in') {
        let inputValue = inputElement.val();
        let separator = rule.filter.value_separator; // values.push( inputValue.split(separator) );

        values = inputValue.split(separator);
      } else {
        // values.push( inputElement.val() );
        values = inputElement.val();
      } //}


      ArcheoUtilities.parseValues(values, rule.filter.type);
      rule.filter.data = {
        attributes: attributeName,
        //translatable: rule.filter.tags.has("translatable"),
        relation_operator: getRelationFilterValue(ruleContainer)
      };
      return values; // values;
    },
    valueSetter: function (rule, value) {
      let ruleContainer = rule.$el.find('.rule-value-container');
      ruleContainer.find('input.attribute-value,select.attribute-value').val(value).trigger('change');
    },
    default_operator: 'equal',
    //default_value: '',
    validation: {
      callback: (value, rule) => {
        for (var i = 0; i < value.length; ++i) if (!ArcheoUtilities.isValidNonEmptyString(value[i])) return `Please input correct value of the type \"${rule.filter.type}\"`;

        return true;
      }
    }
  }
});
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/operatorsSets.json
const operatorsSets_namespaceObject = JSON.parse('{"fL":["equal","not_equal","contains","not_contains","begins_with","not_begins_with","in","not_in"],"Ys":["equal","not_equal"],"G_":["equal","not_equal","part_of","not_part_of"],"t4":["between","inrange","timepoint__less","timepoint__less_or_equal","timepoint__greater","timepoint__greater_or_equal","timepoint__equal","timepoint__not_equal"],"Rx":["between","less","less_or_equal","greater","greater_or_equal","equal","not_equal"],"xm":["distance__less","distance__less_or_equal","distance__greater","distance__greater_or_equal"]}');
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getAttributesTemplates.js


/* harmony default export */ function getAttributesTemplates(langDict, validators, customInputs) {
  var defaultSetting = {
    tags: [],
    valueAttribute: '""',
    queryAttribute: '""',
    detailsAttribute: '""',
    value_separator: ',',
    depth: 0,
    root: false
  };
  return {
    number_date: { // wczytać z serwera zakresy
      ...defaultSetting,
      label: langDict.attributes.date,
      operators: operatorsSets_namespaceObject.t4,
      type: 'integer',
      valueAttribute: 'time_period',
      //queryAttribute: 'time_period',
      input: customInputs.from_to,
      ...filterFunctions.from_to,
      validation: {
        callback: validators.min_max_number(window.metadata.TimePeriod.minYear, window.metadata.TimePeriod.maxYear)
      }
    },
    tree_name: { ...defaultSetting,
      label: langDict.attributes.name,
      type: 'string',
      input: 'text',
      valueAttribute: 'name',
      //'treeIndex',
      queryAttribute: 'name',
      input: customInputs.default,
      operators: operatorsSets_namespaceObject.G_,
      ...filterFunctions.default,
      validation: {
        callback: validators.tree()
      },
      tags: ['searchable']
    },
    text_name: { ...defaultSetting,
      label: langDict.attributes.name,
      type: 'string',
      valueAttribute: 'name',
      queryAttribute: 'name',
      input: customInputs.default,
      operators: operatorsSets_namespaceObject.fL,
      ...filterFunctions.default,
      validation: {
        callback: validators.min_max_length(1, 1000)
      },
      tags: ['translatable']
    },
    relation_exists: { ...defaultSetting,
      label: langDict.others.relation_exists,
      type: 'boolean',
      input: 'select',
      values: langDict.values.relation_existence,
      valueAttribute: 'relationship',
      //queryAttribute: 'relationship',
      input: customInputs.relation_exists,
      operators: ["boolean_does"],
      ...filterFunctions.default //tags: ['translatable']

    },
    select_name: { ...defaultSetting,
      label: langDict.attributes.name,
      type: 'string',
      input: customInputs.select,
      valueAttribute: 'name',
      queryAttribute: 'name',
      operators: operatorsSets_namespaceObject.Ys,
      ...filterFunctions.default,
      validation: {
        callback: validators.min_max_length(1, 1000)
      },
      tags: ['translatable'],
      plugin: 'selectpicker',
      plugin_config: {
        style: 'btn-inverse btn-xs'
      }
    },
    text_id: { ...defaultSetting,
      label: langDict.attributes.id,
      type: 'string',
      input: 'text',
      valueAttribute: 'id',
      queryAttribute: 'id',
      input: customInputs.default,
      operators: operatorsSets_namespaceObject.fL,
      ...filterFunctions.default
    },
    point_coords: { ...defaultSetting,
      label: langDict.attributes.coordinates,
      type: 'double',
      valueAttribute: 'coordinates',
      //queryAttribute: 'coordinates',
      input: customInputs.point,
      operators: operatorsSets_namespaceObject.xm,
      ...filterFunctions.coordinates,
      validation: {
        callback: validators.coordinates()
      }
    }
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getValidators.js
/* harmony default export */ function getValidators(langDict) {
  return {
    'min_max_length': (min, max) => {
      return (value, rule) => {
        ArcheoUtilities.parseValues(value, rule.filter.type);
        if (value.length < min || value.length > max) return langDict.errors.min_max_length_exceeds.format(min, max);
        return true;
      };
    },
    'min_max_number': (min, max) => {
      return (value, rule) => {
        if (value.length == 2) if (value[0] > value[1]) return langDict.errors.min_max_number_order;

        for (var i = 0; i < value.length; ++i) if (value[i] < min || value[i] > max) return langDict.errors.min_max_number_exceeds.format(min, max);

        return true;
      };
    },
    'coordinates': () => {
      return (value, rule) => {
        ArcheoUtilities.parseValues(value, rule.filter.type);
        let maxDistanceInMeters = 1000000000;
        if (value.point.latitude === '' || value.point.longitude === '' || value.distance === '') return langDict.errors.coordinates_empty;else if (value.point.latitude < -90 || value.point.latitude > 90) {
          return langDict.errors.coordinates_lat;
        } else if (value.point.longitude < -180 || value.point.longitude > 180) {
          return langDict.errors.coordinates_long;
        } else if (value.distance < 0 || value.distance >= maxDistanceInMeters) {
          return langDict.errors.coordinates_dist;
        }
        return true;
      };
    },
    'tree': () => {
      return (value, rule) => {
        if (ArcheoUtilities.isEmpty(value)) return langDict.errors.tree_not_selected;
        return true;
      };
    }
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getCustomInputs.js
function getRelationFilter(rule, langDict) {
  if (rule.filter.tags.has("relations_filter")) return `
		<span>&nbsp;and&nbsp;</span>
		<select class="selectpicker relation-filter" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
			${langDict.values.relation_operator.map(item => "<option value=\"" + item.value + "\">" + item.label + "</option>")}
		</select>
		<span>of the related nodes must match.</span>
		`;else return '';
} // a.map((i) => '<span>ciastek ' + i + '</span>').join('')


/* harmony default export */ function getCustomInputs(langDict) {
  let customInputs = {
    'default': (rule, name) => {
      // .format(rule.filter.label)
      return `
			<input class="attribute-value form-control-sm plain-text-input" type="text" autocomplete="off" placeholder="${langDict.placeholders.default}"/>
			${getRelationFilter(rule, langDict)}
			`;
    },

    /* With values from meta */
    'select': (rule, name) => {
      return `
			<select class="selectpicker attribute-value" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
				${rule.filter.values.map(item => "<option value=\"" + item + "\">" + item + "</option>")}
			</select>
			${getRelationFilter(rule, langDict)}
			`;
    },
    'relation_exists': (rule, name) => {
      return `
			<select class="selectpicker attribute-value" data-style="btn-inverse btn-xs" data-icon-base="Material Icons" virtual-scroll=100>
				${langDict.values.relation_existence.map(item => "<option value=\"" + item.value + "\">" + item.label + "</option>")}
			</select>
			`;
    },
    'search': (rule, name) => {
      return `
			<div style="display: inline-block">
				<div class="input-group searcher-wrapper">
					<input class="attribute-value form-control plain-text-input searcher" type="text" value="" aria-label="search" placeholder="${langDict.placeholders.search}">
					<div class="input-group-append">
						<i class="material-icons">search</i>
					</div>
				</div>
			</div>
			${getRelationFilter(rule, langDict)}
			`;
    },
    'point': (rule, name) => {
      return `
				<input placeholder="Latitude" class="attribute-value form-control latitude plain-number-input" id="${name}_latitude" name="${name}_1" type="number" value="" min="-90" max="90" step="0.000001" />
				<input placeholder="Longitude" class="attribute-value form-control longitude plain-number-input" id="${name}_longitude" name="${name}_2" type="number" value="" min="-180" max=180 step="0.000001" />
				<input placeholder="Radius (km)" class="attribute-value form-control distance plain-number-input" id="${name}_distance" name="${name}_3" type="number" value="" min="0" max="1000000" step="1" />
				${getRelationFilter(rule, langDict)}
			`;
    },
    'from_to': (rule, name) => {
      let additionalClass = rule.filter.tags.has("contemporary") ? 'contemporary' : '';

      if (rule.operator.type == 'between' || rule.operator.type == 'inrange') {
        return `
				<div id=${name}_range class="years-range-spinner d-flex">
					<span class="input-years-from w-100 ${additionalClass}">
						<input class="attribute-value form-control-sm plain-text-input" type="text" value="0" autocomplete="off" is_year=""/>
					</span>
					<hr class="range-line w-25"/>
					<span class="input-years-to w-100 ${additionalClass}">
						<input class="attribute-value form-control-sm plain-text-input" type="text" value="0" autocomplete="off" is_year=""/>
					</span>
				</div>
				${getRelationFilter(rule, langDict)}
				`;
      } else {
        return `
					<span class="input-years-to w-100 ${additionalClass}">
						<input class="attribute-value form-control-sm plain-text-input" type="text" value="0" autocomplete="off" is_year=""/>
					</span>
					${getRelationFilter(rule, langDict)}
				`;
      }
    }
  };
  return customInputs;
} //input.input-years-from
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/config/getDatasetFilters.js




/* harmony default export */ function getDatasetFilters(langDict) {
  const validators = getValidators(langDict);
  const customInputs = getCustomInputs(langDict);
  const attributesTemplates = getAttributesTemplates(langDict, validators, customInputs);
  var currentYear = new Date().getFullYear();
  return {
    'RemainsAllenDB': [//'remains': [
    { ...attributesTemplates.text_id,
      optgroup: 'remains',
      field: 'remains',
      id: 'remains_id',
      root: true
    },
    /* description */
    //],
    //'genetical_sex': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_relationship',
      depth: 1
    }, { ...attributesTemplates.select_name,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_name',
      values: window.metadata.Sex.name,
      tags: ['translatable'],
      depth: 1
    }, //'hy': [ relation_exists
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_relationship',
      depth: 1
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, //],
    //'hmt': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_relationship',
      depth: 1
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, //],
    //'dating': [
    { ...attributesTemplates.number_date,
      optgroup: 'dating',
      field: 'dating',
      id: 'dating_time_period',
      depth: 1
    }, //'dating_type': [
    { ...attributesTemplates.select_name,
      label: langDict.attributes.type,
      optgroup: 'dating_type',
      field: 'dating_type',
      id: 'dating_type_name',
      values: window.metadata.DatingType.name,
      tags: ['translatable'],
      depth: 2
    }, //],
    //'phase': [
    { // multiple rels?
      ...attributesTemplates.select_name,
      label: langDict.attributes.function,
      optgroup: 'use_phase',
      field: 'use_phase_function',
      id: 'use_phase_function_name',
      values: window.metadata.UsePhaseFunction.name,
      tags: ['translatable']
    }, { ...attributesTemplates.number_date,
      optgroup: 'use_phase',
      field: 'use_phase',
      id: 'usephase_year'
    }, //'period': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'archaeological_period',
      field: 'archaeological_period',
      id: 'archaeological_period_relationship',
      depth: 1
    }, { ...attributesTemplates.tree_name,
      optgroup: 'archaeological_period',
      field: 'archaeological_period',
      id: 'archaeological_period_name',
      tags: ['searchable', 'relations_filter'],
      input: customInputs.search,
      depth: 1
    }, //'site': [
    { ...attributesTemplates.text_name,
      optgroup: 'archaeological_site',
      field: 'archaeological_site',
      id: 'archaeological_site_name',
      tags: ['translatable']
    }, { ...attributesTemplates.point_coords,
      optgroup: 'archaeological_site',
      field: 'archaeological_site',
      id: 'archaeological_site_coordinates'
    }, //'politregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'political_region',
      field: 'political_region',
      id: 'political_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 1
    }, //],
    //'sample': [
    { ...attributesTemplates.text_id,
      optgroup: 'sample',
      field: 'sample',
      id: 'sample_id'
    }, //'result_type': [
    { ...attributesTemplates.select_name,
      optgroup: 'result_type',
      //'archaeological_period',
      field: 'result_type',
      //'archaeological_period',
      id: 'result_type_name',
      //'archaeological_period_name',
      tags: ['relations_filter'],
      values: window.metadata.ResultType.name,
      depth: 1
    }, //'source': [
    { ...attributesTemplates.text_name,
      label: langDict.attributes.source_name,
      optgroup: 'source',
      field: 'source',
      id: 'source_name',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, { ...attributesTemplates.number_date,
      valueAttribute: 'date',
      queryAttribute: 'date',
      label: langDict.attributes.source_date,
      operators: operatorsSets_namespaceObject.Rx,
      validation: {
        callback: validators.min_max_number(2000, currentYear)
      },
      optgroup: 'source',
      field: 'source',
      tags: ['contemporary'],
      id: 'source_date',
      depth: 1
    }, // Author
    { ...attributesTemplates.text_name,
      label: langDict.attributes.name,
      optgroup: 'source_author',
      field: 'source_author',
      id: 'source_author_name',
      tags: ['searchable', 'relations_filter'],
      input: customInputs.search,
      depth: 2
    }],
    'PersonAllenDB': [//'person': [
    { ...attributesTemplates.text_id,
      optgroup: 'person',
      field: 'person',
      id: 'person_id',
      root: true
    },
    /* description */
    //],
    //'genetical_sex': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_relationship',
      depth: 1
    }, { ...attributesTemplates.select_name,
      optgroup: 'genetical_sex',
      field: 'genetical_sex',
      id: 'genetical_sex_name',
      values: window.metadata.Sex.name,
      tags: ['translatable'],
      depth: 1
    }, //'hy': [ relation_exists
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_relationship',
      depth: 1
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_y',
      field: 'haplogroup_y',
      id: 'haplogroup_y_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, //],
    //'hmt': [
    { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_relationship',
      depth: 1
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, //'site': [
    { ...attributesTemplates.text_name,
      optgroup: 'place',
      field: 'place',
      id: 'place_name',
      tags: ['translatable']
    }, { ...attributesTemplates.point_coords,
      optgroup: 'place',
      field: 'place',
      id: 'place_coordinates'
    }, //'politregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'political_region',
      field: 'political_region',
      id: 'political_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 1
    }, //],
    //'sample': [
    { ...attributesTemplates.text_id,
      optgroup: 'sample',
      field: 'sample',
      id: 'sample_id'
    }, //'source': [
    { ...attributesTemplates.text_name,
      label: langDict.attributes.source_name,
      optgroup: 'source',
      field: 'source',
      id: 'source_name',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, { ...attributesTemplates.number_date,
      label: langDict.attributes.source_date,
      operators: operatorsSets_namespaceObject.Rx,
      validation: {
        callback: validators.min_max_number(2000, currentYear)
      },
      optgroup: 'source',
      field: 'source',
      tags: ['contemporary'],
      id: 'source_time_period',
      depth: 1
    }, // Author
    { ...attributesTemplates.text_name,
      label: langDict.attributes.name,
      optgroup: 'source_author',
      field: 'source_author',
      id: 'source_author_name',
      tags: ['searchable', 'relations_filter'],
      input: customInputs.search,
      depth: 2
    }],
    'PersonEmpopDB': [//'person': [
    { ...attributesTemplates.text_id,
      optgroup: 'person',
      field: 'person',
      id: 'person_id',
      root: true
    }, { ...attributesTemplates.relation_exists,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_relationship',
      depth: 1
    }, { ...attributesTemplates.tree_name,
      optgroup: 'haplogroup_mt',
      field: 'haplogroup_mt',
      id: 'haplogroup_mt_name',
      detailsAttribute: 'synonym',
      tags: ['searchable'],
      input: customInputs.search,
      depth: 1
    }, //'place': [
    { ...attributesTemplates.point_coords,
      optgroup: 'place',
      field: 'place',
      id: 'place_coordinates'
    }, //'politregion': [
    { ...attributesTemplates.text_name,
      optgroup: 'political_region',
      field: 'political_region',
      id: 'political_region_name',
      tags: ['searchable', 'translatable'],
      input: customInputs.search,
      depth: 1
    }, //],
    //'sample': [
    { ...attributesTemplates.text_id,
      optgroup: 'sample',
      field: 'sample',
      id: 'sample_id'
    }]
  };
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/getEntitiesOptgroups.js
/* harmony default export */ function getEntitiesOptgroups() {
  var dict = {
    "person": {
      "pl": "Osoba",
      "en": "Person"
    },
    "remains": {
      "pl": "Szczątki",
      "en": "Remains"
    },
    "genetical_sex": {
      "pl": "Płeć genetyczna",
      "en": "Genetical sex"
    },
    "archaeological_period": {
      "pl": "Okresy archeologiczne",
      "en": "Archaeological periods"
    },
    "archaeological_site": {
      "pl": "Stanowisko archeologiczne",
      "en": "Archaeological site"
    },
    "place": {
      "pl": "Miejsce próbkowania",
      "en": "Place of sampling"
    },
    "use_phase": {
      "pl": "Faza użytkowania",
      "en": "Use phase"
    },
    "sample": {
      "pl": "Próbka",
      "en": "Sample"
    },
    "haplogroup_mt": {
      "pl": "Haplogrupa Mt",
      "en": "Haplogroup Mt"
    },
    "haplogroup_y": {
      "pl": "Haplogrupa Y",
      "en": "Haplogroup Y"
    },
    "political_region": {
      "pl": "Region polityczny",
      "en": "Political region"
    },
    "dating": {
      "pl": "Datowanie",
      "en": "Dating"
    },
    "source": {
      "pl": "Źródło",
      "en": "Source"
    },
    "source_author": {
      "pl": "Współautorzy",
      "en": "Co-authors"
    },
    "dating_type": {
      "pl": "Metoda datowania",
      "en": "Dating method"
    },
    "result_type": {
      "pl": "Rodzaj wyników analizy",
      "en": "Results of the analysis"
    }
  };
  var suffix = "<span class='badge badge-success'>entity</span>&nbsp;";
  var prefix = "";
  ArcheoUtilities.traverseObj(dict, (obj, key, val) => {
    obj[key] = typeof val === 'string' ? suffix + val + prefix : val;
  });
  return dict;
}
;
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/operatorsOptgroups.json
const operatorsOptgroups_namespaceObject = JSON.parse('{"date_interval":{"pl":"Przedział czasu","en":"Time period"},"date_timepoint":{"pl":"Punkt czasowy","en":"Time point"}}');
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/data/getLang.js
/* harmony default export */ function data_getLang() {
  var dict = {
    "en": {
      "operators": {
        "inrange": "in range of",
        "part_of": "part of",
        "not_part_of": "is not part of",
        "distance__less": "distance to point less than",
        "distance__less_or_equal": "distance to point less or equal to",
        "distance__greater": "distance from point greater than",
        "distance__greater_or_equal": "distance from point greater or equal to",
        "timepoint__less": "less",
        "timepoint__less_or_equal": "less or equal",
        "timepoint__greater": "greater",
        "timepoint__greater_or_equal": "greater or equal",
        "timepoint__equal": "equal",
        "timepoint__not_equal": "not equal",
        "boolean_does": "does"
      },
      "values": {
        "boolean": ["true", "false"],
        "relation_operator": [{
          "value": "some",
          "label": "some"
        }, {
          "value": "none",
          "label": "none"
        }, {
          "value": "every",
          "label": "every"
        }],
        "relation_existence": [{
          "value": true,
          "label": "exist"
        }, {
          "value": false,
          "label": "not exist"
        }]
      },
      "errors": {
        "min_max_length_exceeds": "Length of inputed value exceeds permitable length of {0} to {1} characters.",
        "min_max_number_order": "Second value should be greater than the first one",
        "min_max_number_exceeds": "Inputted value exceeds permitable value range of {0} to {1}.",
        "coordinates_empty": "All values must be provided",
        "coordinates_lat": "Latitude should have value between -90 and 90",
        "coordinates_long": "Longitude should have value between -180 and 180",
        "coordinates_dist": "Distance must be defined in range 0-1000000",
        "tree_not_selected": "You must select an item from the search results"
      },
      "attributes": {
        "date": "Time period",
        "name": "Name",
        "id": "ID",
        "years_old": "Age",
        "type": "Type",
        "coordinates": "Coordinates",
        "function": "Function",
        "level": "Level",
        "source_name": "Title",
        "source_author": "Co-author",
        "source_date": "Publication date",
        "result_type": "Results of the analysis"
      },
      "placeholders": {
        "select": "--- not chosen ---",
        "search": "Search for property...",
        "default": "Type in property value..."
      },
      "others": {
        "relation_exists": "<span class='badge badge-secondary'>relationship&nbsp;<span style='font-size: 1.3em;' class='material-icons'>help</span></span>"
      }
    },
    "pl": {
      "operators": {
        "inrange": "jest w zasięgu",
        "part_of": "należy do",
        "not_part_of": "nie należy do",
        "distance__less": "distance to point is less than",
        "distance__less_or_equal": "distance to point is less or equal to",
        "distance__greater": "distance from point is greater than",
        "distance__greater_or_equal": "distance from point is greater or equal to",
        "boolean_does": ""
      },
      "values": {
        "boolean": ["prawda", "fałsz"],
        "some": "co najmniej jeden",
        "none": "żaden",
        "every": "każdy",
        "exist": "istnieje",
        "not_exist": "nie istnieje"
      },
      "errors": {
        "min_max_length_exceeds": "Length of inputted value exceeds permitable length of {0} to {1} characters.",
        "min_max_number_order": "Second value should be greater than the first one",
        "min_max_number_exceeds": "Inputted value exceeds permitable value range of {0} to {1}.",
        "coordinates_lat": "Latitude should have value between -90 and 90",
        "coordinates_long": "Longitude should have value between -180 and 180",
        "coordinates_dist": "Distance must be defined in range 0-1000000",
        "tree_not_selected": "You must select an item from the search results"
      },
      "placeholders": {
        "select": "--- nie wybrano ---",
        "search": "Szukaj atrybutu {0}...",
        "default": "Podaj wartość atrybutu {0}..."
      },
      "attributes": {
        "dating": "Okres czasu",
        "name": "Nazwa",
        "id": "ID",
        "years_old": "Wiek",
        "division": "Jednostka administracyjna",
        "type": "Rodzaj",
        "coordinates": "Współrzędne",
        "function": "Funkcja",
        "level": "Poziom",
        "source_name": "Tytuł",
        "source_autor": "Współautor",
        "source_date": "Data publikacji",
        "result_type": "Rodzaj wyników analizy"
      },
      "others": {
        "relation_exists": "<span class='badge badge-secondary'>relacja&nbsp;<span style='font-size: 1.3em;' class='material-icons'>help</span></span>"
      }
    }
  };
  /* For all languages ... */

  for (var lang in dict) {
    var suffix = "<span class='badge badge-primary'>property</span>&nbsp;";
    var prefix = "";
    /* Apply attributes badges */

    ArcheoUtilities.traverseObj(dict[lang].attributes, (obj, key, val) => {
      obj[key] = typeof val === 'string' ? suffix + val + prefix : val;
    });
  }

  return dict;
}
;// CONCATENATED MODULE: ./views/mixins-pug/query-builder/script.js
//import queryBuilder from 'jQuery-QueryBuilder/dist/js/query-builder';
// ol/Map
 //import 'jQuery-QueryBuilder/src/main';
//import 'jQuery-QueryBuilder/src';

 //registerBuilderModule($); // Initialize it global jQuery









function createQueryBuilder(builderEl, lang, datasetInfo) {
  /*
  datasetName: datasetName,
  datasetId: datasetId,
  entity: entity
  */
  const langDict = data_getLang()[lang];
  const datasetFilters = getDatasetFilters(langDict);
  builderEl.queryBuilder({
    plugins: {
      //'bt-tooltip-errors',
      'bt-selectpicker': {
        liveSearch: true,
        liveSearchNormalize: true,
        style: 'btn-inverse btn-xs'
      } //'not-group',
      //'unique-filter',
      //'filter-description',
      //'sortable'

    },
    operators: [...customOperators, 'equal', 'not_equal', 'contains', 'not_contains', 'less', 'less_or_equal', 'in', 'not_in', 'greater', 'greater_or_equal', 'begins_with', 'not_begins_with'],
    filters: datasetFilters[datasetInfo.datasetId],
    optgroups: { ...getEntitiesOptgroups(),
      ...operatorsOptgroups_namespaceObject
    },
    //rules: rules,
    lang_code: lang,
    default_condition: 'AND',
    display_errors: true,
    allow_empty: false,
    allow_groups: 4,
    select_placeholder: langDict.placeholders.select,
    lang: langDict,
    templates: customTemplates
  });
  builderEl.attr('entity', datasetInfo.entity);
}

function initializeQueryBuilder(selector, lang) {
  const builderEl = $(selector);
  initializeQueryBuilderEvents(builderEl, lang); //createQueryBuilder(builderEl, lang);
}


/*
$('#btn-reset').on('click', function() {
    queryBuilder('reset');
});

$('#btn-set').on('click', function() {
    queryBuilder('setRules', rules_widgets);
});

$('#btn-get').on('click', function() {
    var result = queryBuilder('getRules');
    if (!$.isEmptyObject(result)) {
    }
});
*/
;// CONCATENATED MODULE: ./views/pages/map/js/elements/left-sidebar/datasets-container.js
function initializeDatasetsContainer() {
  //initializeAppearanceDatasetEvents();
  $('#datasets-container').sortable({
    placeholder: "sortable-placeholder",
    handle: ".handle",
    delay: 250,
    opacity: 0.7
  });
  $('#dataset-trash').droppable({
    accept: "#datasets-container > li",
    classes: {
      "ui-droppable-active": "ui-state-highlight"
    },
    drop: function (event, ui) {
      let $dataset = ui.draggable;
      let datasetId = $dataset.prop('id');
      /* Remove layer from session */

      ArcheoSession.removeDataset(datasetId);
      ArcheoEvents.broadcast("dataset-update", '#layer-template');
      /* Remove layer from cache */

      ArcheoCache.removeDataset(datasetId);
      /* Remove layer from interface */

      $dataset.remove();
    }
  });
}

/* harmony default export */ const datasets_container = (initializeDatasetsContainer);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/left-sidebar/index.js



function initializeLeftSidebarElements() {
  initializeQueryBuilder('#query-builder', getLang());
  datasets_container();
}

/* harmony default export */ const elements_left_sidebar = (initializeLeftSidebarElements);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/feature-modal.js
function initializeFeaturesModal() {
  $("#features-map-modal").dialog({
    autoOpen: false,
    show: {
      effect: "fade",
      duration: 500
    },
    hide: {
      effect: "fade",
      duration: 500
    }
  });
  $(".map-modal").mCustomScrollbar({
    theme: "minimal-dark",
    scrollbarPosition: "outside"
  });
}

/* harmony default export */ const feature_modal = (initializeFeaturesModal);
;// CONCATENATED MODULE: ./views/pages/map/js/elements/index.js








function initializePageElements() {
  elements_map();
  timeline('#timeline');
  sidebars();
  present_switch();
  elements_left_sidebar();
  elements_right_sidebar();
  ArcheoUI.initializeYearTexts();
  feature_modal();
}

/* harmony default export */ const js_elements = (initializePageElements);
;// CONCATENATED MODULE: ./views/pages/map/js/session/data/lang_defaults.js
/* harmony default export */ const lang_defaults = ({
  "en": {
    "_meta": {
      "name": "Default",
      "description": "This is a default session of the interactive map application.",
      "lang": "en",
      "creationDate": null,
      "dataKeys": ["datasets", "layers", "strategies", "filters", "legend", "features", "map"]
    },
    "datasets": {
      "_order": [],
      "_count": 0
    },
    "layers": {
      "_order": [],
      "_count": 0
    },
    "strategy": {
      "name": "Default strategy",
      "config": {
        "range": 1000,
        "distance": 0,
        "clusterAtCentroid": true,
        "showRegions": false,
        "method": {
          "distance": "distance__absolute",
          "region": null
        }
      }
    },
    "filters": {
      "timeline": {
        "yearFrom": -33000,
        "yearTo": -27000,
        "minYear": window.metadata.TimePeriod.minYear,
        "maxYear": window.metadata.TimePeriod.maxYear,
        "showPresent": true
      },
      "attributes": {
        "attributeId": "",
        "attributeType": "",
        "attributeSearchUseRegex": false,
        "groupCreationUseRegex": false,
        "groupSearchUseRegex": false
      }
    },
    "legend": {
      "attributes": {
        "OTHER": "rgba(126,126,126,1.0)",
        "MISSING": "rgba(0,0,0,1.0)"
      },
      "regions": {}
    },
    "map": {
      "position": [19.657016, 52.205848],
      "zoom": 4,
      "dataProjection": "EPSG:4326",
      "mapProjection": "EPSG:3857",
      "baseLayers": {}
    }
  }
});
;// CONCATENATED MODULE: ./views/pages/map/js/session/data/saved.js
/* harmony default export */ const saved = ({
  "_meta": {
    "name": "Default",
    "description": "This is a default session of the interactive map application.",
    "lang": "en",
    "creationDate": null,
    "dataKeys": ["datasets", "layers", "strategies", "filters", "legend", "features", "map"]
  },
  "datasets": {
    "_order": ["dataset_1"],
    "_count": 1,
    "dataset_1": {
      "name": "Dataset #1",
      "objectId": "RemainsAllenDB",
      "databaseName": "AADR v44.3",
      "entityName": "Remains",
      "query": '{"database":"AADR v44.3","objects":"remains","filters":{},"lang":"en"}',
      "dating": [-33000, 2000],
      "isPresent": false
    }
  },
  "layers": {
    "_order": ["layer_def"],
    "_count": 1,
    "layer_def": {
      "layerId": "layer_def",
      "type": "piechart",
      "datasetId": "dataset_1",
      "attributeId": "haplogroup_y",
      "attributeName": "Haplogroup Y",
      "attributeType": "tree",
      "style": {
        "angle": 0,
        "positionOffsetRatio": 3.0,
        "displayLabelProperty": true,
        "cardinalityByValue": true,
        "cardinalityBySize": true,
        "cardinalityByColor": false,
        "size": [16, 40],
        "blur": 10,
        // 70
        "fontSizeRatio": 1.5,
        "weightGrowth": "linear",
        "weightGrowthFactor": 2,
        "weightScalingFactor": 2,
        "standardisationMethod": "max",
        "valueDisplay": "count",
        "blendingMode": "normal",
        "drawingAlpha": 0.6,
        "color": "#9f7cc2",
        "componentValues": {
          "valuesLabels": null,
          "valuesMask": null,
          "special": {
            "OTHER": true
          },
          "data": "selectAll"
        },
        "enableOther": true,
        "otherRatio": 0.02,
        "enableCountOther": false,
        "otherCount": 2
      },
      "settings": {
        "zIndex": 1000,
        "opacity": 1.0,
        "visible": true,
        "title": "Layer default"
      }
    }
  },
  "strategy": {
    "name": "Default strategy",
    "config": {
      "range": 1000,
      "distance": 0,
      "clusterAtCentroid": true,
      "showRegions": false,
      "method": {
        "distance": "distance__absolute",
        "region": null
      }
    } //config

  },
  "filters": {
    "timeline": {
      "yearFrom": -33000,
      "yearTo": -27000,
      "minYear": -36000,
      "maxYear": 2000,
      "showPresent": false
    },
    "attributes": {
      "attributeId": "haplogroup_y",
      "attributeType": "tree",
      "attributeSearchUseRegex": false,
      "groupCreationUseRegex": false,
      "groupSearchUseRegex": false
    }
  },
  "legend": {
    "attributes": {
      "OTHER": "rgba(126,126,126,1.0)",
      "MISSING": "rgba(0,0,0,1.0)"
    },
    "regions": {}
  },
  "features": {},
  "map": {
    "position": [19.657016, 52.205848],
    "zoom": 4,
    "dataProjection": "EPSG:4326",
    "mapProjection": "EPSG:3857",
    "baseLayers": {}
  }
});
;// CONCATENATED MODULE: ./views/pages/map/js/session/data/layer_default.js
/* harmony default export */ const layer_default = ({
  /* Source oprtions, need to reassign them */
  //"entityType": "",	
  //"iconUrl": "",
  "positionOffsetRatio": 3.0,
  "displayLabelProperty": true,

  /* Point-based representations settings */
  "cardinalityByValue": true,
  "cardinalityBySize": true,
  "cardinalityByColor": false,

  /* Size settings */
  "size": [16, 40],
  "fontSizeRatio": 1.0,

  /* Weight settings */
  "weightGrowth": "linear",
  // ["linear", "polynomial", exponential]
  "weightGrowthFactor": 1.0,
  "weightScalingFactor": 1.0,
  "standardisationMethod": "max",
  // ["none", "total", "max"]
  "valueDisplay": "count",
  // ["count", "weight"]
  "blur": 70,

  /* Blending modes */
  "blendingMode": "normal",
  "drawingAlpha": 1.0,
  "color": '',
  "angle": '',

  /* Features visibility/filtering; Could be only for heatmap and points */
  "componentValues": {
    "valuesLabels": null,
    "valuesMask": null,
    "special": {
      "OTHER": true
    },
    "data": "selectAll"
  },

  /* Piecharts/Tags settings */
  "enableOther": true,
  "otherRatio": 0.01,
  "enableCountOther": false,
  "otherCount": 1
});
;// CONCATENATED MODULE: ./views/pages/map/js/session/index.js




function registerSessionFunctions() {
  ArcheoSession.addDataset = function (objectId, databaseName, entityName, queryString) {
    let datasetsNumber = ArcheoSession.get().datasets._count + 1 || 1;
    let datasetId = `${objectId}_${datasetsNumber}`;
    ArcheoSession.get().datasets[datasetId] = {
      name: databaseName.capitalize() + " #" + datasetsNumber,
      objectId: objectId,
      databaseName: databaseName,
      entityName: entityName,
      query: queryString
    };

    ArcheoSession.get().datasets._order.push(datasetId);

    ArcheoSession.get().datasets._count += 1;
    return datasetId;
  };

  ArcheoSession.removeDataset = function (datasetId) {
    delete ArcheoSession.get().datasets[datasetId];

    ArcheoSession.get().datasets._order.removeEl(datasetId);

    ArcheoSession.get().datasets._count -= 1;
  };

  ArcheoSession.loadDatasets = function () {
    return new Promise(function (resolution, rejection) {
      // Create datasets
      let datasetsIds = ArcheoSession.get().datasets._order;

      let promises = [];

      if (datasetsIds.length > 0) {
        datasetsIds.forEach(function (datasetId) {
          promises.push(new Promise(async function (resolution, rejection) {
            let isFetched = await fetchNewDataset(datasetId);
            if (isFetched === true) broadcastDatasetCreation(datasetId);
            resolution(isFetched);
          }));
        });
      }

      Promise.all(promises).then(results => {
        resolution();
      });
    });
  };

  ArcheoSession.getDefaultLayerConfig = function () {
    return ArcheoUtilities.deepCloneObject(layer_default);
  };

  ArcheoSession.addLayer = function (layerId = null) {
    var layerNumber = ArcheoSession.get().layers._count + 1 || 1;

    var zIndex = 1000 + ArcheoSession.get().layers._count;

    if (layerId === null) layerId = 'layer_' + layerNumber;
    ArcheoSession.get().layers[layerId] = {
      layerId: layerId,
      type: '',
      datasetId: '',
      attributeId: '',
      attributeName: '',
      attributeType: '',
      //attributeValue: '',
      style: { ...ArcheoSession.getDefaultLayerConfig()
      },
      settings: {
        zIndex: zIndex,
        opacity: 1.0,
        visible: true,
        title: "Layer #" + layerNumber
      }
    };
    ArcheoCache.getTemporaryEntry('styleCache')[layerId] = {};
    ArcheoCache.getTemporaryEntry('featuresClusters')[layerId] = {};
    /* Create cache entry for layer clusters */

    ArcheoCache.setSessionEntry(layerId, {}, 'object'); // Since clusters are features as well, they could be parsed as geojson, excluding their features

    ArcheoSession.get().layers._order.push(layerId);

    ArcheoSession.get().layers._count += 1;
    return layerId;
  };

  ArcheoSession.cloneLayer = function (layerId) {
    var clonedLayerConfig = ArcheoSession.get().layers[layerId];
    var newLayerId = layerId + '_copy';
    ArcheoSession.get().layers[newLayerId] = ArcheoUtilities.deepCloneObject(clonedLayerConfig);
    ArcheoSession.get().layers[newLayerId].settings.title += ' (copy)';
    ArcheoCache.getTemporaryEntry('styleCache')[newLayerId] = {};
    ArcheoCache.getTemporaryEntry('featuresClusters')[newLayerId] = {};
    ArcheoCache.setSessionEntry(newLayerId, {}, 'object');

    ArcheoSession.get().layers._order.push(newLayerId);

    ArcheoSession.get().layers._count += 1;
    broadcastLayerCreation(newLayerId);
    initializeLayer(newLayerId);
    return newLayerId;
  };

  ArcheoSession.removeLayer = function (layerId) {
    delete ArcheoSession.get().layers[layerId];

    ArcheoSession.get().layers._order.removeEl(layerId);

    ArcheoSession.get().layers._count -= 1;
  };

  ArcheoSession.loadLayers = function () {
    return new Promise((resolution, rejection) => {
      // Create datasets
      let layersIds = ArcheoSession.get().layers._order;

      if (layersIds.length > 0) {
        layersIds.forEach(async function (layerId) {
          broadcastLayerCreation(layerId);
          initializeLayer(layerId);
        });
      }

      resolution();
    });
  };

  ArcheoSession.getAttributeLegend = function (attributeId, getOnlyAttributes = false) {
    let legend = ArcheoSession.get().legend.attributes;
    if (!(attributeId in legend)) legend[attributeId] = {
      '_groups': []
    };
    legend = legend[attributeId];
    if (getOnlyAttributes) legend = ArcheoUtilities.filterObject(legend, ([key]) => !key.startsWith('_'));
    return legend;
  }; // "baseLayers": {} add baseLayer?: name, id?, color, isVisible, config {} // e.g. for basemap
  // nie, zrobię to na sztywno, ale bedzie w configu

}

function sessionInitialization() {
  let session = ArcheoSession.get();
  ArcheoSession.loadDatasets().then(() => {
    ArcheoSession.loadLayers();
  });
}


;// CONCATENATED MODULE: ./views/pages/map/js/cache/index.js
function registerCacheFunctions() {
  ArcheoCache.removeLayer = function (layerId) {
    delete ArcheoCache.getTemporaryEntry('styleCache')[layerId];
    delete ArcheoCache.getTemporaryEntry('featuresClusters')[layerId];
    delete ArcheoCache.getTemporaryEntry('layers')[layerId];
  };

  ArcheoCache.removeDataset = function (datasetId) {
    delete ArcheoCache.getTemporaryEntry('sources')[datasetId];
  };
}

function cacheInitialization() {
  ArcheoCache.setTemporaryEntry('datasetsFeaturesToDownload', {});
  ArcheoCache.setTemporaryEntry('styleCache', {});
  ArcheoCache.setTemporaryEntry('featuresClusters', {});
  ArcheoCache.setTemporaryEntry('layers', {});
  ArcheoCache.setTemporaryEntry('sources', {});
  ArcheoCache.setTemporaryEntry('selectedFeatures', {});
  ArcheoCache.setTemporaryEntry('map', null);
  ArcheoCache.setTemporaryEntry('baseLayers', {
    'vectorDraggable': null,
    'regionsLayer': null
  });
}


/*

    if( ! ArcheoUtilities.exists( document.documentElement.lang ) )
		document.documentElement.lang = 'en';

	window.getLang = () => { return document.documentElement.lang };

*/
;// CONCATENATED MODULE: ./views/pages/map/js/events/broadcastRoutes.json
const broadcastRoutes_namespaceObject = JSON.parse('{"map-content-update":["#legend-content"],"selected-dataset-update":["#query-builder","#query-filters-button"],"time-filter-update":["#legend-content","#time-filter","#timeline","#map"],"query-builder-update":["#query-filters-button"],"dataset-add":[".layer","#map","#new-layer-button"],"dataset-update":[".layer"],"dataset-remove":["#new-layer-button"],"layer-add":["#map","#legend-layers","#clustering-strategy"],"layer-remove":["#map","#new-layer-button","#legend-layers"],"layer-type-change":["#map","select.select-attribute",".layer .setting","#legend-layers"],"layer-attribute-change":["#map","select.select-value"],"layer-attribute-initialization":["select.select-value"],"layer-value-change":["#map"],"layer-config-change":["#map"],"layer-color-change":["#map",".layer","#legend-layers"],"layer-gradient-change":["#map",".layer","#legend-layers"],"layer-visibility-change":["#legend-layers"],"layer-dataset-change":["#map"],"layer-setting-change":["#map"],"layer-name-change":["#legend-layers"],"cluster-config-change":["#clustering-strategy",".layer","#map"],"cluster-strategy-change":["#clustering-strategy",".layer","#map","#cluster-at-centroid","#region-show"],"cluster-region-show":["#map"],"cluster-setting-change":[".layer","#map"],"cluster-range-change":["#clustering-strategy"],"panel-activated":["#legend-wrapper"],"select-clustering-strategy":["#clustering-strategy",".clustering-strategy select",".clustering-strategy input",".clustering-strategy button"],"filter-attribute-change":["select.select-value","#map"]}');
;// CONCATENATED MODULE: ./views/mixins-pug/toggle-arrow/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const toggle_arrow_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/accordion-header/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const accordion_header_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/icon-text-list/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const icon_text_list_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/icon-radiobuttons/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const icon_radiobuttons_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/dropdown/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const dropdown_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/custom-button/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const custom_button_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/years-range-spinner/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const years_range_spinner_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/spectrum-color-input/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const spectrum_color_input_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/icon-checkbox/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const icon_checkbox_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/textbox/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const textbox_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
;// CONCATENATED MODULE: ./views/mixins-pug/switch/style.scss
// extracted by mini-css-extract-plugin
/* harmony default export */ const switch_style = ({"palette_primary_color":"#13446f","pallette_primary_color_light":"#26537a","pallette_primary_color_lightest":"#c5d1dc","pallette_primary_color_dark":"#113d64","pallette_primary_color_darkest":"#0d304e","pallette_secondary_color":"#ffad42","pallette_secondary_color_darker":"#d4861f","palette_tertiary_color_light":"#afafaf","palette_tertiary_color_lightest":"#ddd","palette_tertiary_color_lighter":"#cecece","palette_tertiary_color":"#474747","palette_tertiary_color_dark":"#2c2c2c","text_color_light":"#e6e6e6","text_color_dark":"#222","text_color_dark_faded":"#646464","background_color_light":"#eee","background_color_lightest":"#f7f7f7","present_time_color_array_string":"119,0,255,1","text_color_light_faded":"#d2d2d2"});
// EXTERNAL MODULE: ./views/pages/map/index.pug
var pages_map = __webpack_require__(8016);
;// CONCATENATED MODULE: ./views/pages/map/app.js
// Connect Styles for Webpack to bundle them (for dynamicaly generated content) //




 // rem
// Scripts //

/*
import { initializeSidebars } from "./js/sidebars.js";
import { initializeModals } from "./js/map-modals.js";
import { initializeInteractiveMap } from "./js/interactive-map/map.js";
import { initializeQueryFiltersButton } from './js/left-sidebar/query-filters-button.js';
import { initializeDatasetSelect } from './js/left-sidebar/select-dataset.js';
import { initializeQueryButton } from './js/left-sidebar/query-button';

import { initializeAppearanceDataset } from './js/right-sidebar/select-dataset';

import { initializeNewLayerButton } from './js/right-sidebar/new-layer-button';
import { initializeNewStrategyButton } from './js/right-sidebar/clustering';

import { initializeTimeFilter } from './js/right-sidebar/time-filter.js';
import { initializeTimeline } from './js/timeline.js'

import { initializeRightSidebarUIEvents } from './js/right-sidebar/events';

import { initializeAttributesEvents } from './js/interactive-map/events/attributes';
*/
// Elements //
// Events //


 // Session //




 // Events //

 // Register pug-Mixins //



















/* Link .pug for assets injetion */


$(document).ready(function () {
  /*** Initialize page session functions ***/
  registerSessionFunctions();
  window.sessionStorage.clear();
  /*** #0 -- Register events broadcast routes ***/

  ArcheoEvents.setRoutes(broadcastRoutes_namespaceObject);
  /*** Setup temporary cache entries ***/

  registerCacheFunctions();
  cacheInitialization();
  let isSessionLoaded = ArcheoCache.loadSession(saved);
  /*** #1 -- Register session ***/

  if (isSessionLoaded === false) {
    let defaultSession = lang_defaults[getLang()];
    ArcheoSession.set(defaultSession);
  }

  if (!ArcheoUtilities.exists(document.documentElement.lang)) document.documentElement.lang = 'en';
  /* Global getLang function */

  window.getLang = () => {
    return document.documentElement.lang;
  };
  /*** #2 -- Initialize elements ***/

  /*** Initialize static UI Elements  ***/


  js_elements();
  /*** Initialize static UI Events ***/

  events();
  /*** Initialize dynamically generated content ***/

  /* Initialize session. Load datasets and layers defined in session */

  sessionInitialization();
});

/***/ }),

/***/ 802:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_cache.0a2d445c106ef5902522.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 1087:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_events.f8888f44eceec80e0b26.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 9712:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_legend.7a2c048a1b055ff7b230.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 3838:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_map.c900c5775cb59ad1512b.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 481:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_search.575024050bd3c4a7a3ed.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 3678:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_session.b7e5517589ebabb3e4a3.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 727:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_ui.d5db425fc1ecbc35ab50.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 6603:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Farcheo_utilities.d286652910d0b1fd3485.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8501:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fmap.9d936570a8845eebe99a.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8903:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Fmap.1d76b6ca64bac8d586bc.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 4161:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Fmodules.2b77951e6bc2cada6847.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 4459:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-d181b226.b703b0c86e1b4d945c24.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-679d3c3f.e708fde931eb303dc296.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-00d1b685.2f25c8ffcfb367eb090d.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-e5e28fbc.a8e6edf0ab52f7b34b21.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-bfc7e85c.6f6490eab5d9547f04d0.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-fb0fcf25.0a15654e422edf411a6a.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-a33e9691.6e6ad83c85455a617881.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-e5fb8f5d.df2ec00fd01eb42698d4.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-034d289d.8c61d76578e999f5cc17.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-ec843599.cc91150402a49c60c441.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-89c60e08.d0a8571b2f89e22122a4.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-70675959.7913ee55faf7d81327ae.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-8c35d8b7.363c497743003c97c539.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-88034504.be92e982548aeaba7dc0.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-cbc44e46.6f26265ac397cbe5f3b9.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-2701b9eb.6a03166f7866e6019891.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-5a739dd6.31f2d7d4e8a5d268b0d7.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-9d4a2bdb.09935dd00cdd7466c537.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Fol-efa5f318.6ecc7baf5725a4b2d50f.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 4697:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Frequests.2ea6882bae2edfb6aa0f.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8635:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Cscript defer type=\"text\u002Fjavascript\" src=\"\u002Fjs\u002Ftemplate_basic.ad4b8179f13090d24076.js\"\u003E\u003C\u002Fscript\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7520:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;pug_html = pug_html + "\u003Clink defer rel=\"stylesheet\" href=\"\u002Fcss\u002Ftemplate_basic.0a69542d24ff35536e13.css\"\u003E";;return pug_html;};
module.exports = template;

/***/ }),

/***/ 2975:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var layerBlendingModes = {
	'normal': { 'name': 'Normal', 'selected': true },
	'multiply': { 'name': 'Multiply'},
	'screen': { 'name': 'Screen'},
	'overlay': { 'name': 'Overlay'},
	'darken': { 'name': 'Darken'},
	'lighten': { 'name': 'Lighten'},
	'color-dodge': { 'name': 'Color doge'},
	'color-burn': { 'name': 'Color burn'},
	'hard-light': { 'name': 'Hard light'},
	'soft-light': { 'name': 'Soft light'},
	'difference': { 'name': 'Difference'},
	'exclusion': { 'name': 'Exclusion'},
	'hue': { 'name': 'Hue'},
	'saturation': { 'name': 'Saturation'},
	'color': { 'name': 'Color'},
	'luminosity': { 'name': 'Luminosity'},
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8634:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var clusteringDic = {
    'Distance': {
        'isOptgroup': true,
        'name': 'Cluster by distance',
        'maxData': '1',
        'options': {
            'distance__relative': {
                'name': 'Relative distance (pixels)',
                'title': 'Relative dist.'
            },
            'distance__absolute': {
                'selected': true,
                'name': 'Absolute distance (kilometers)',
                'title': 'Absolute dist.'
            }
        }
    },
    'Regions': {
        'isOptgroup': true,
        'name': 'Cluster by regions',
        'maxData': '1',
        'options': {
            'region__cultures': {
                'name': 'Archaeological cultures',
                'title': 'Cultures',
                'subtext': 'archaeological division'
            },
            'region__world': {
                'name': 'Whole World',
                'title': 'World',
                'subtext': 'geographical division'
            },
            'region__countries': {
                'name': 'Countries',
                'title': 'Countries',
                'subtext': 'political division'
            },
            'region__un_regions': {
                'name': 'United Nations Regions',
                'title': 'UN Regions',
                'subtext': 'political division'
            },
            'region__un_subregions': {
                'name': 'United Nations Subregions',
                'title': 'UN Subregions',
                'subtext': 'political division'
            }
        }
    }
};


;return pug_html;};
module.exports = template;

/***/ }),

/***/ 6342:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var clustersValue = {
    'count': {
        'label': 'features count ( \\(x\\) )'
    },
    'weight': {
        'label': 'features weight ( \\(w\\) )'
    }
};return pug_html;};
module.exports = template;

/***/ }),

/***/ 1128:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var columnsDic = {
    'map': {
        'isOptgroup': true,
        'name': 'Map information',
        'options': {
            'datasetId': {
                'name': 'Dataset ID'
            },
            'layerId': {
                'name': 'Layer ID'
            }
        }
    },
    'sex': {
        'isOptgroup': true,
        'name': 'Genetical sex',
        'options': {
            'name': {
                'name': 'Name'
            }
        }
    },
    'haplogroup_y': {
        'isOptgroup': true,
        'name': 'Haplogroup Y',
        'options': {
            'name': {
                'name': 'Name'
            },
            'treeIndex': {
                'name': 'Tree index'
            }
        }
    },
    'haplogroup_mt': {
        'isOptgroup': true,
        'name': 'Haplogroup Mt',
        'options': {
            'name': {
                'name': 'Name'
            },
            'treeIndex': {
                'name': 'Tree index'
            }
        }
    },
    'dating': {
        'isOptgroup': true,
        'name': 'Dating',
        'options': {
            'yearFrom': {
                'name': 'Year from'
            },
            'yearTo': {
                'name': 'Year to'
            },
            'type': {
                'name': 'Type'
            }
        }
    },
    'use_phase': {
        'isOptgroup': true,
        'name': 'Dating',
        'options': {
            'id': {
                'name': 'ID'
            },
            'yearFrom': {
                'name': 'Year from'
            },
            'yearTo': {
                'name': 'Year to'
            },
            'function': {
                'name': 'Function'
            }
        }
    },
    'regions_political': {
        'isOptgroup': true,
        'name': 'Political regions',
        'options': {
            'country_name': {
                'name': 'Country name'
            },
            'un_region_name': {
                'name': 'United Nations region name'
            },
            'country_name': {
                'name': 'United Nations subregion name'
            }
        }
    },
    'regions_archaeological': {
        'isOptgroup': true,
        'name': 'Archaeological regions',
        'options': {
            'culture_name': {
                'name': 'Culture name'
            }
        }
    },
    'sources': {
        'isOptgroup': true,
        'name': 'Sources',
        'options': {
            'titles': {
                'name': 'Titles'
            },
            'publication_dates': {
                'name': 'Publication years'
            }
        }
    },
    'authors': {
        'isOptgroup': true,
        'name': 'Authors',
        'options': {
            'authors': {
                'name': 'Names'
            }
        }
    }
};
;return pug_html;};
module.exports = template;

/***/ }),

/***/ 1854:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var datasetsDic = {
    'Past': {
        'isOptgroup': true,
        'name': 'Archaeogenomic samples',
        'options': {
            'RemainsAllenDB': {
                'name': 'Allen Ancient DNA Resource v44.3',
                'disabled': false,
                'selected': true,
                'attributes': {
                    'entity': 'Remains',
                    'database': 'AADR v44.3'
                }
            }
        }
    },
    'Present': {
        'isOptgroup': true,
        'name': 'Genomic samples',
        'options': {
            'PersonAllenDB': {
                'name': 'Allen Ancient DNA Resource v44.3',
                'disabled': false,
                'attributes': {
                    'entity': 'Person',
                    'database': 'AADR v44.3'
                }
            },
            'PersonEmpopDB': {
                'name': 'EMPOP mtDNA database v4/R13',
                'disabled': false,
                'attributes': {
                    'entity': 'Person',
                    'database': 'EMPOP v4/R13'
                }
            }
        }
    }
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7440:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var growthFunctions = {
	'linear': { 
		'name': 'Linear', 
		'content': 'Linear: \\( f(w) = awC \\)' 
	},
	'polynomial': { 
		'name': 'Polynomial', 
		'content': 'Polynomial: \\( f(w) = (wC)^{a} \\)'
	},
	'exponential': { 
		'name': 'Exponential', 
		'selected': true, 
		'content': 'Exponential: \\( f(w) = \\frac{a^{wC} - 1}{a - 1} \\)'
	}
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 2927:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var layerTypes = {
	'': { 'selected': true },
	'single': {
		'isOptgroup': true,
		'name': 'Single value presentation',
		'options': {
			'point': {
				'name': 'Points'
			},
			'heatmap': {
				'name': 'Heatmap'
			}
		}
	},
	'multiple': {
		'isOptgroup': true,
		'name': 'Multiple values presentation',
		'options': {
			'piechart': {
				'name': 'Piecharts'
			},
			'tag': {
				'name': 'Tags cloud'
			}
		}
	}
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 5847:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;var standardisationMethods = {
	'none': { 
		'name': 'None', 
		'content': 'None: \\( w = x \\)' 
	},
	'max': { 
		'name': 'Max', 
		'selected': true, 
		'content': 'By max count: \\( w = \\frac{x}{x_{max}} \\)'
	},
	'total': { 
		'name': 'Total', 
		'content': 'By total count: \\( w = \\frac{x}{\\sum_{i=0}^{N}x_{i}} \\)'
	}
};;return pug_html;};
module.exports = template;

/***/ }),

/***/ 8016:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var pug = __webpack_require__(7055);

function template(locals) {var pug_html = "", pug_mixins = {}, pug_interp;;
    var locals_for_with = (locals || {});
    
    (function (JSON, Math, Object, ariaLabel, attributes, classes, clusteringDic, clustersValue, datasetsDic, expanded, fileTypes, growthFunctions, lang, layerBlendingModes, layerTypes, maxYear, metadata, minYear, page, pageName, scenarios, standardisationMethods, targetId) {
      pug_html = pug_html + "\u003C!DOCTYPE html\u003E\u003Chtml" + (pug.attr("lang", lang, true, true)) + "\u003E\u003Chead\u003E\u003Cmeta charset=\"utf-8\"\u003E\u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003E\u003Cmeta http-equiv=\"X-UA-Compatible\" content=\"text\u002Fhtml; charset=utf-8\"\u003E\u003Cmeta name=\"robots\" content=\"noindex\"\u003E\u003Clink rel=\"shortcut icon\" href=\"#\"\u003E\u003Clink href=\"https:\u002F\u002Ffonts.googleapis.com\u002Ficon?family=Material+Icons\" rel=\"stylesheet\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap@4.5.3\u002Fdist\u002Fcss\u002Fbootstrap.min.css\" integrity=\"sha384-TX8t27EcRE3e\u002FihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fmalihu-custom-scrollbar-plugin\u002F3.1.5\u002Fjquery.mCustomScrollbar.min.css\" integrity=\"sha256-JHGEmB629pipTkMag9aMaw32I8zle24p3FpsEeI6oZU=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjqueryui\u002F1.12.1\u002Fjquery-ui.min.css\" integrity=\"sha256-rByPlHULObEjJ6XQxW\u002FflG2r+22R5dKiAoef+aXWfik=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap-select@1.13.17\u002Fdist\u002Fcss\u002Fbootstrap-select.min.css\" integrity=\"sha256-VMPhaMmJn7coDSbzwqB0jflvb+CDnoAlfStC5RogOQo=\" crossorigin=\"anonymous\"\u003E" + (null == (pug_interp = __webpack_require__(7520).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(4161).call(this, locals)) ? "" : pug_interp) + "\u003Cscript\u003Ewindow.metadata = JSON.parse( " + (null == (pug_interp = JSON.stringify(metadata).replace(/<\//g, '<\\/')) ? "" : pug_interp) + " );\nwindow.name = \"" + (null == (pug_interp = pageName) ? "" : pug_interp) + "\";\nwindow.lang = \"" + (null == (pug_interp = lang) ? "" : pug_interp) + "\";\n\u002F\u002F-window.PlotlyConfig = {MathJaxConfig: 'local'};\n\n\n\u003C\u002Fscript\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fbootstrap-slider\u002F10.6.1\u002Fcss\u002Fbootstrap-slider.min.css\" integrity=\"sha256-+xqVrdbLgHjiKF8ULvcwzQ545r7lCVfOqXlNJCB3XOg=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fion-rangeslider\u002F2.3.1\u002Fcss\u002Fion.rangeSlider.min.css\" integrity=\"sha256-g7HgoMySZyonuPwHTORf+uGHEeOm7VRI2kfXWXlJnco=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002FjQuery-QueryBuilder@2.5.2\u002Fdist\u002Fcss\u002Fquery-builder.default.min.css\" integrity=\"sha256-t0OO5vutCzErqiAiLqVcVPbR3krMH9aTnzbtbjmiFUU=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-toggle@3.6.1\u002Fcss\u002Fbootstrap4-toggle.min.css\" integrity=\"sha256-O2vM7yYY3KvcJBl9KlWgcWIDi2Gw+oW39+WceHpZMeA=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-tagsinput@4.1.3\u002Ftagsinput.min.css\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fspectrum\u002F1.8.1\u002Fspectrum.min.css\" integrity=\"sha512-KuSX+43gVS5MEIJD2ewtrFPOHqC1PJnL8o2f5ciggPC0JUZ8XV0QXlfArO1mSzKkVFdRjsBDfrTU96C5SuRfqQ==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fgrapick@0.1.13\u002Fdist\u002Fgrapick.min.css\" integrity=\"sha256-Mmwj4BhpOgPwY2KGqntBnifqo6bpTkrO72LpQzIilWM=\" crossorigin=\"anonymous\"\u003E\u003Clink rel=\"stylesheet\" href=\"\u002Fplugins\u002Fanglepicker-1.0.1.css\"\u003E" + (null == (pug_interp = __webpack_require__(8903).call(this, locals)) ? "" : pug_interp) + "\u003Ctitle\u003EHAGes - Human Archeogenomics\u003C\u002Ftitle\u003E\u003C\u002Fhead\u003E\u003Cbody\u003E";
var classes = ['navbar', 'navbar-expand-md', 'navbar-dark', 'bg-dark', 'fixed-top']
pug_mixins["nav-item"] = pug_interp = function(ref, name){
var block = (this && this.block), attributes = (this && this.attributes) || {};
if (ref === page) {
pug_html = pug_html + "\u003Cli" + (pug.attrs(pug.merge([{"class": "nav-item active"},attributes]), true)) + "\u003E\u003Ca" + (" class=\"nav-link\""+pug.attr("href", "/" + ref, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003Cspan class=\"sr-only\"\u003E(current)\u003C\u002Fspan\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E";
}
else {
pug_html = pug_html + "\u003Cli" + (pug.attrs(pug.merge([{"class": "nav-item"},attributes]), true)) + "\u003E\u003Ca" + (" class=\"nav-link\""+pug.attr("href", "/" + ref, true, true)) + "\u003E" + (pug.escape(null == (pug_interp = name) ? "" : pug_interp)) + "\u003C\u002Fa\u003E\u003C\u002Fli\u003E";
}
};
pug_html = pug_html + "\u003Cnav" + (pug.attr("class", pug.classes([classes], [true]), false, true)) + "\u003E\u003Ca" + (" class=\"navbar-brand\""+pug.attr("href", `/${lang}/home`, true, true)) + "\u003EHAGes - Explore Human Archeogenomics\u003C\u002Fa\u003E\u003Cbutton class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"\u003E\u003Cspan class=\"navbar-toggler-icon\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003Cdiv class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\"\u003E\u003Cul class=\"navbar-nav mr-auto\"\u003E";
pug_mixins["nav-item"].call({
attributes: {"class": "mx-2"}
}, `${lang}/home`, "Main page");
pug_mixins["nav-item"](`${lang}/map`, "Interactive map");
pug_mixins["nav-item"](`${lang}/genomicdata`, "Genomic data");
pug_mixins["nav-item"].call({
attributes: {"class": "mx-2"}
}, `${lang}/contact`, "Contact");
pug_html = pug_html + "\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\u003C\u002Fnav\u003E\u003Cdiv id=\"site-wrapper\"\u003E";
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "icon-checkbox-wrapper"},attributes]), true)) + "\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]), false, true)+pug.attr("id", id, true, true)+" data-toggle=\"button\" aria-pressed=\"true\" autocomplete=\"off\"") + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]), false, true)+pug.attr("id", id, true, true)+" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\"") + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": pug.escape(expanded)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = isCollapsed ? 'top' : 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header-icon"] = pug_interp = function(targetId, title, iconClass, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"accordion-wrapper group\" role=\"group\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: pug.merge([{"class": "m-0 p-0"},attributes])
}, iconClass, iconClass, '', true);
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": pug.escape(expanded)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = isCollapsed ? 'top' : 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header-settings"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": pug.escape(expanded)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = isCollapsed ? 'top' : 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["icon-text-list"] = pug_interp = function(texts, iconName){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cul" + (pug.attrs(pug.merge([{"class": "icon-text-list"},attributes]), true)) + "\u003E";
// iterate texts
;(function(){
  var $$obj = texts;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var text = $$obj[key];
pug_html = pug_html + "\u003Cli\u003E \u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cp\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fp\u003E\u003C\u002Fli\u003E";
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var text = $$obj[key];
pug_html = pug_html + "\u003Cli\u003E \u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003Cp\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fp\u003E\u003C\u002Fli\u003E";
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Ful\u003E";
};
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};























pug_mixins["selectOption"] = pug_interp = function(el, key){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var optionsAttributes = {};
if(el.datatokens) optionsAttributes['data-tokens'] = el.datatokens;
if(el.disabled) optionsAttributes['disabled'] = el.disabled;
if(el.subtext) optionsAttributes['data-subtext'] = el.subtext;
if(el.selected) optionsAttributes['selected'] = el.selected;
if(el.content) optionsAttributes['data-content'] = el.content;
if(el.title) optionsAttributes['title'] = el.title;
if(el.attributes)
	Object.keys(el.attributes).forEach((attribute) => {
		optionsAttributes[attribute] = el.attributes[attribute];
	});

pug_html = pug_html + "\u003Coption" + (pug.attrs(pug.merge([{"value": pug.escape(key)},optionsAttributes]), true)) + "\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Foption\u003E";
};
pug_mixins["dropdown-no-picker"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","data-virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["dropdown"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"class": "selectpicker","data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fbutton\u003E";
};
pug_mixins["years-range-spinner"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "years-range-spinner d-flex"},attributes]), true)) + "\u003E\u003Cspan class=\"input-years-from w-100\"\u003E\u003Cinput class=\"form-control-sm w-100 plain-text-input\" value=\"0\" type=\"text\" autocomplete=\"off\" is_year=\"\"\u003E\u003C\u002Fspan\u003E\u003Chr class=\"range-line w-25\"\u003E\u003Cspan class=\"input-years-to w-100\"\u003E\u003Cinput class=\"form-control-sm w-100 plain-text-input\" value=\"0\" type=\"text\" autocomplete=\"off\" is_year=\"\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E";
};




pug_html = pug_html + (null == (pug_interp = __webpack_require__(1854).call(this, locals)) ? "" : pug_interp);
//- Make it persisted queries
var scenarios = {
	'scenario_piast_rulers': 'Szczątki władców z dynastii Piastów', 
	'scenario_rome_cemetery': 'Cmentarze z rzymskiej epoki żelaza', 
	'scenario_piast_elites': 'Pochówki elit państwa Piastów'
};


pug_html = pug_html + "\u003Cdiv class=\"sidebar-wrapper left\"\u003E\u003Cnav class=\"sidebar\"\u003E\u003Cdiv class=\"section\" id=\"scenarios\"\u003E\u003Cdiv class=\"section-header\"\u003E\u003Ch5 class=\"header-text\"\u003EExamples\u003C\u002Fh5\u003E\u003C\u002Fdiv\u003E";
pug_mixins["icon-text-list"](scenarios, "search");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Chr class=\"section-breaker\"\u003E\u003Cdiv class=\"section\"\u003E";
var targetId = 'query-creator'
pug_html = pug_html + "\u003Cdiv class=\"section-header\"\u003E\u003Ch5 class=\"header-text\"\u003EData search\u003C\u002Fh5\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"pallette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EQuery dataset\u003C\u002Fh6\u003E";
pug_mixins["dropdown"]("select-query-dataset", datasetsDic);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus w-100 justify-content-center mx-auto mb-2","id": "query-filters-button","data-toggle": "modal","data-target": "#query-builder-modal"}
}, "Set filters", "filter_list", 0);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESearch query \u003C\u002Fh6\u003E\u003Ctextarea class=\"form-control\" id=\"query-call-textarea\" rows=\"10\"\u003E\u003C\u002Ftextarea\u003E\u003Cp class=\"error-text\" id=\"query-call-error-text\"\u003E\u003C\u002Fp\u003E\u003Cdiv class=\"p-3\"\u003E\u003Cbutton class=\"btn\" id=\"query\" type=\"button\"\u003EQuery\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\"\u003E\u003Cdiv class=\"section-header\"\u003E\u003Ch5 class=\"header-text\"\u003ELoaded datasets\u003C\u002Fh5\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"pallette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"accordion-header accordion-subsection-header trash-container\" id=\"dataset-trash\"\u003E \u003Cspan\u003EDrop dataset to remove it\u003Ci class=\"material-icons ml-2\"\u003E" + (pug.escape(null == (pug_interp = 'delete') ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header\"\u003E\u003C\u002Fh6\u003E\u003Cdiv class=\"subsection\" id=\"datasets-container\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ENo data has been loaded yet\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fnav\u003E\u003Cdiv class=\"sidebar-trigger\"\u003E";
pug_mixins["toggle-arrow"].call({
attributes: {"class": "sidebar-arrow"}
}, "left");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cmain role=\"main\"\u003E";
pug_mixins["timeline"] = pug_interp = function(sliderClass = "simple"){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"id": "time-controls-wrapper"},attributes]), true)) + "\u003E\u003Cdiv" + (pug.attr("class", pug.classes([sliderClass], [true]), false, true)+" id=\"timeline-wrapper\"") + "\u003E\u003Cinput class=\"js-range-slider\" id=\"timeline\" type=\"text\" name=\"timeline\" value=\"\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"present-switch-wrapper\"\u003E";
var iconHtmlFunc = (iconName) => `<i class="material-icons">${iconName}</i>`;
var timeIconHtml = iconHtmlFunc('hourglass_empty');
pug_html = pug_html + "\u003Cinput" + (" id=\"present-switch\" type=\"checkbox\" checked=\"\" data-toggle=\"toggle\""+pug.attr("data-on", `Showing Present ${ timeIconHtml }`, true, true)+pug.attr("data-off", `Hiding Present ${ timeIconHtml }`, true, true)+" data-onstyle=\"present-time\" data-offstyle=\"present-time\"") + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + "\u003Cdiv class=\"pt-4 overflow-hidden\" id=\"content-wrapper\"\u003E\u003Cdiv class=\"mb-4 position-relative\"\u003E\u003Cdiv id=\"map-wrapper\"\u003E\u003Cdiv class=\"map\" id=\"map\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"viewport-wrapper container-fluid\" id=\"top-controls-wrapper\"\u003E\u003Cdiv class=\"p-1 row\" id=\"top-controls-container\"\u003E\u003Cdiv class=\"map-panel\"\u003E\u003Cdiv class=\"map-control\" id=\"zoom\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-control\" id=\"fullscreen-button\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel\"\u003E\u003Cdiv class=\"map-control\" id=\"zoom-slider\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel col\" id=\"legend-panel\"\u003E\u003Cdiv class=\"map-control\" id=\"legend-wrapper\"\u003E";
var targetId = 'legend';
pug_mixins["accordion-header"].call({
attributes: {"id": "legend-header"}
}, targetId, 'Legend');
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv id=\"legend-content-wrapper\"\u003E\u003Cdiv id=\"legend-content\"\u003E\u003Cdiv id=\"legend-layers\"\u003E\u003Ch6 class=\"section-header\"\u003EData layers\u003C\u002Fh6\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-attributes\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv id=\"legend-color-picker\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"viewport-wrapper\" id=\"bottom-controls-wrapper\"\u003E\u003Cdiv class=\"p-1\"\u003E\u003Cdiv class=\"map-panel map-left\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"map-panel map-right\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
pug_mixins["timeline"]('gradient');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fmain\u003E";
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_html = pug_html + (null == (pug_interp = __webpack_require__(8634).call(this, locals)) ? "" : pug_interp);
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fbutton\u003E";
};
pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};




pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn w-100 h-100 position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute w-100 h-100\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_html = pug_html + "\u003Cdiv class=\"sidebar-wrapper right\"\u003E\u003Cnav class=\"sidebar\"\u003E\u003Cdiv class=\"section\"\u003E";
var targetId = 'clustering-strategy';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header"}
}, targetId, 'Features clustering');
pug_html = pug_html + "\u003Cdiv" + (" class=\"collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"pallette-primary-color-lightest-bg section-content object-content sidebar-setting\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClustering strategy name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('clustering-name-textbox', 'Type in new strategy name...', 'edit', 'clustering-name');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClustering modes\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "clustering-mode-select","multiple": true}
}, 'clustering-mode-select', clusteringDic, 'Choose modes...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'distance-clustering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Distance clustering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClustering range\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider clustering-slider\" id=\"clustering-slider\" type=\"text\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClusters in-between distance\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider distance-slider\" id=\"distance-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'region-clustering';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Region clustering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EClusters placement\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('cluster-at-centroid', 'simple', "at region's centroid", true);
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003EAppearance\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"]('region-label', 'simple', "attach region label to cluster", true);
pug_mixins["icon-checkbox"]('region-time', 'simple', "allow to filter regions by time", true);
pug_mixins["icon-checkbox"]('region-show', 'simple', "always show regions", false);
pug_mixins["icon-checkbox"]('region-unassgned', 'simple', "hide unassigned clusters", true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"section\"\u003E";
var targetId = 'filtering-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header"}
}, targetId, 'Filtering');
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"pallette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"card\"\u003E";
var targetId = 'time-filter';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "accordion-subsection-header"}
}, targetId, 'Time filter', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EVisible time period\u003C\u002Fh6\u003E";
pug_mixins["years-range-spinner"].call({
attributes: {"id": "filter-from-to"}
});
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003EVisible timeline range\u003C\u002Fh6\u003E";
pug_mixins["years-range-spinner"].call({
attributes: {"id": "filter-min-max"}
});
pug_html = pug_html + "\u003Cp class=\"mt-3\"\u003EMinimal year is \u003Cspan class=\"years-text\"\u003E" + (pug.escape(null == (pug_interp = minYear) ? "" : pug_interp)) + ", \u003C\u002Fspan\u003E, maximal is \u003Cspan class=\"years-text\"\u003E" + (pug.escape(null == (pug_interp = maxYear) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E.\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card mt-3\"\u003E";
var targetId = 'attribute-filter';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "accordion-subsection-header"}
}, targetId, 'Attribute filter', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose an attribute to filter\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-filter-attribute"}
}, 'select-filter-attribute', {}, 'Choose an attribute...');
pug_html = pug_html + "\u003Cdiv class=\"mt-3 d-none\"\u003E";
pug_mixins["dropdown"].call({
attributes: {"class": "select-filter-attribute-type"}
}, 'select-filter-attribute-type', {}, 'Choose a type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFilter values\u003C\u002Fh6\u003E\u003Cinput class=\"form-control\" id=\"filter-attribute-search\" placeholder=\"Search attributes\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3"}
}, 'attribute-filter-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cselect class=\"form-control\" id=\"select-filter-attribute-values\" multiple=\"\"\u003E\u003C\u002Fselect\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2\"\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "attribute-filter-unfilter-all","style": "width: 48.5%;"}
}, 'Unfilter all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "attribute-filter-filter-all","style": "width: 48.5%;"}
}, 'Filter all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"input-group mt-2\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "attribute-filter-select-all","style": "width: 48.5%;"}
}, 'Select all');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "attribute-filter-unselect-all","style": "width: 48.5%;"}
}, 'Unselect all');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3\"\u003E";
pug_mixins["button-textbox"].call({
attributes: {"class": "palette-primary no-focus"}
}, 'attribute-change-name', 'Attribute\'s name', 'Reset', '', ariaLabel = '');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"mt-3\"\u003E";
pug_mixins["button-textbox"].call({
attributes: {"class": "palette-primary no-focus"}
}, 'attribute-filter-new-group', 'Add a group of a name', 'Add', 'create_new_folder', ariaLabel = '');
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3"}
}, 'group-creation-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cp class=\"error-text mt-2\" id=\"new-group-error-text\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-4\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFilter groups\u003C\u002Fh6\u003E\u003Cinput class=\"form-control\" id=\"filter-group-search\" placeholder=\"Search groups\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-1 mb-3"}
}, 'group-filter-regex', 'simple', 'use regex', false);
pug_html = pug_html + "\u003Cselect class=\"form-control\" id=\"select-filter-groups\" multiple=\"\"\u003E\u003C\u002Fselect\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection mt-2\"\u003E\u003Cdiv class=\"input-group\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "mb-0 float-left palette-tertiary-light no-focus","id": "group-modify","style": "width: 48.5%;"}
}, 'Modify group');
pug_mixins["custom-button"].call({
attributes: {"class": "ml-2 mb-0 float-right palette-tertiary-light no-focus","id": "group-remove","style": "width: 48.5%;"}
}, 'Remove');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Chr class=\"section-breaker\"\u003E\u003Cdiv class=\"section\"\u003E";
var targetId = 'appearance-options';
pug_mixins["accordion-header"].call({
attributes: {"class": "section-header"}
}, targetId, 'Data layers');
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"pallette-primary-color-lightest-bg section-content\"\u003E\u003Cdiv class=\"subsection\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "palette-primary no-focus w-100 justify-content-center mx-auto mb-3","disabled": true,"id": "new-layer-button"}
}, "Create a new layer", "add");
pug_html = pug_html + "\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"accordion-header accordion-subsection-header trash-container\" id=\"layer-trash\"\u003E \u003Cspan\u003EDrop layer to remove it\u003Ci class=\"material-icons ml-2\"\u003E" + (pug.escape(null == (pug_interp = 'delete') ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fspan\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header\"\u003E\u003C\u002Fh6\u003E\u003Cul class=\"subsection\" id=\"layers-container\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ENo layers are available\u003C\u002Fdiv\u003E\u003C\u002Ful\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fnav\u003E\u003Cdiv class=\"sidebar-trigger\"\u003E";
pug_mixins["toggle-arrow"].call({
attributes: {"class": "sidebar-arrow"}
}, "right");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
pug_mixins["toggle-arrow"] = pug_interp = function(direction, thickness = 0.1, length = 0.75, positionFix = 1.05){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var top = (Math.sqrt(2) * (thickness - length) / 2.0) * positionFix; 
var styleTop = `top: ${top/2}em; width: ${length}em; height: ${thickness}em`;
var styleBottom = `top: ${-top/2}em; width: ${length}em; height: ${thickness}em`;
pug_html = pug_html + "\u003Cspan" + (pug.attrs(pug.merge([{"class": pug.classes(["toggle-arrow",direction], [false,true])},attributes]), true)) + "\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleTop), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003Cspan" + (" class=\"tip\""+pug.attr("style", pug.style(styleBottom), true, true)) + "\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E";
};
pug_mixins["icon-checkbox"] = pug_interp = function(id, checkboxClass, label = '', isToggled = true){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "icon-checkbox-wrapper"},attributes]), true)) + "\u003E";
if (isToggled) {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox","active",checkboxClass], [false,false,false,false,true]), false, true)+pug.attr("id", id, true, true)+" data-toggle=\"button\" aria-pressed=\"true\" autocomplete=\"off\"") + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
else {
pug_html = pug_html + "\u003Cbutton" + (pug.attr("class", pug.classes(["form-check-input","btn","icon-checkbox",checkboxClass], [false,false,false,true]), false, true)+pug.attr("id", id, true, true)+" data-toggle=\"button\" aria-pressed=\"false\" autocomplete=\"off\"") + "\u003E\u003Ci class=\"material-icons\"\u003E\u003C\u002Fi\u003E\u003C\u002Fbutton\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", id, true, true)) + "\u003E" + (null == (pug_interp = label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E";
}
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": pug.escape(expanded)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = isCollapsed ? 'top' : 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.2, 0.75);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header-icon"] = pug_interp = function(targetId, title, iconClass, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"accordion-wrapper group\" role=\"group\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: pug.merge([{"class": "m-0 p-0"},attributes])
}, iconClass, iconClass, '', true);
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": pug.escape(expanded)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = isCollapsed ? 'top' : 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.125, 0.65);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["accordion-header-settings"] = pug_interp = function(targetId, title, isCollapsed = false){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "accordion-header collapsable","role": "button","data-toggle": "collapse","data-target": pug.escape("#"+targetId),"aria-expanded": pug.escape(expanded)},attributes]), true)) + "\u003E\u003Ch4 class=\"header-text\"\u003E" + (pug.escape(null == (pug_interp = title) ? "" : pug_interp)) + "\u003C\u002Fh4\u003E";
var direction = isCollapsed ? 'top' : 'bottom';
pug_mixins["toggle-arrow"].call({
attributes: {"class": "accordion-arrow"}
}, direction, 0.05, 0.5);
pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_mixins["query-builder"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "query-builder","id": "query-builder"},attributes]), true)) + "\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["selectOption"] = pug_interp = function(el, key){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var optionsAttributes = {};
if(el.datatokens) optionsAttributes['data-tokens'] = el.datatokens;
if(el.disabled) optionsAttributes['disabled'] = el.disabled;
if(el.subtext) optionsAttributes['data-subtext'] = el.subtext;
if(el.selected) optionsAttributes['selected'] = el.selected;
if(el.content) optionsAttributes['data-content'] = el.content;
if(el.title) optionsAttributes['title'] = el.title;
if(el.attributes)
	Object.keys(el.attributes).forEach((attribute) => {
		optionsAttributes[attribute] = el.attributes[attribute];
	});

pug_html = pug_html + "\u003Coption" + (pug.attrs(pug.merge([{"value": pug.escape(key)},optionsAttributes]), true)) + "\u003E" + (pug.escape(null == (pug_interp = el.name) ? "" : pug_interp)) + "\u003C\u002Foption\u003E";
};
pug_mixins["dropdown-no-picker"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","data-virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["dropdown"] = pug_interp = function(name, elements = {}, header = null, placeholder = 'Nothing selected...'){
var block = (this && this.block), attributes = (this && this.attributes) || {};
var headerText = header || '';
var placeholderText = header || placeholder;

pug_html = pug_html + "\u003Cselect" + (pug.attrs(pug.merge([{"class": "selectpicker","data-none-selected-text": pug.escape(headerText),"id": pug.escape(name),"name": pug.escape(name),"data-icon-base": "Material Icons","virtual-scroll": 80,"data-dropup-auto": "true","data-header": pug.escape(placeholderText)},attributes]), true)) + "\u003E";
// iterate elements
;(function(){
  var $$obj = elements;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var el = $$obj[key];
if (el.isOptgroup) {
var groupAttributes = {};
if(el.maxData) groupAttributes['data-max-options'] = el.maxData;

pug_html = pug_html + "\u003Coptgroup" + (pug.attrs(pug.merge([{"label": pug.escape(el.name)},groupAttributes]), true)) + "\u003E";
// iterate el.options
;(function(){
  var $$obj = el.options;
  if ('number' == typeof $$obj.length) {
      for (var key2 = 0, $$l = $$obj.length; key2 < $$l; key2++) {
        var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
      }
  } else {
    var $$l = 0;
    for (var key2 in $$obj) {
      $$l++;
      var el2 = $$obj[key2];
pug_mixins["selectOption"](el2, key2);
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Foptgroup\u003E";
}
else {
pug_mixins["selectOption"](el, key);
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fselect\u003E";
};
pug_mixins["simple-radiobuttons"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + (null == (pug_interp = __webpack_require__(1128).call(this, locals)) ? "" : pug_interp);
var featuresSections = [
	{'name': 'Remains', 'id': 'remains-modal-remains-accord'}, 
	{'name': 'Use phases', 'id': 'phase-modal-remains-accord'}, 
	{'name': 'Archaeological sites', 'id': 'site-modal-remains-accord'}
];

var fileTypes = {
	'JSON': {
		'label': 'JSON'
	},
	'CSV': {
		'label': 'CSV'
	}
}

pug_mixins["map-modal"] = pug_interp = function(modalId, sections, title="Cluster details"){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "map-modal","id": pug.escape(modalId),"title": pug.escape(title)},attributes]), true)) + "\u003E\u003Cdiv class=\"section-content\"\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["map-modal"]('features-map-modal', {});
pug_mixins["query-builder-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "query-builder-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "staticBackdropLabel","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered modal-xl\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"staticBackdropLabel\"\u003EQuery builder\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E";
pug_mixins["query-builder"]();
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E\u003Cbutton class=\"btn btn-secondary\" id=\"submit-rules\" type=\"button\"\u003EConfirm changes\u003C\u002Fbutton\u003E\u003Cbutton class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\"\u003EClose\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["query-builder-modal"]();
pug_mixins["download-modal"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "modal fade","id": "download-modal","data-backdrop": "static","data-keyboard": "false","tabindex": "-1","role": "dialog","aria-labelledby": "downloadTitle","aria-hidden": "true"},attributes]), true)) + "\u003E\u003Cdiv class=\"modal-dialog modal-dialog-centered\"\u003E\u003Cdiv class=\"modal-content\"\u003E\u003Cdiv class=\"modal-header\"\u003E\u003Ch5 class=\"modal-title\" id=\"downloadTitle\"\u003EDownload features\u003C\u002Fh5\u003E\u003Cbutton class=\"close\" type=\"button\" data-dismiss=\"modal\" aria-label=\"Close\"\u003E\u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-body\"\u003E\u003Ch6 class=\"subsection-header\"\u003EChoose file type:\u003C\u002Fh6\u003E\u003Chr\u003E";
pug_mixins["simple-radiobuttons"]('download-filetype', fileTypes, 'JSON');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"modal-footer\"\u003E\u003Cbutton class=\"btn btn-secondary\" id=\"download-button\" type=\"button\"\u003EConfirm\u003C\u002Fbutton\u003E\u003Cbutton class=\"btn btn-secondary\" type=\"button\" data-dismiss=\"modal\"\u003ECancel\u003C\u002Fbutton\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["download-modal"]();
pug_html = pug_html + ((null == (pug_interp = __webpack_require__(2975).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(2927).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(7440).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(8634).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(5847).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(6342).call(this, locals)) ? "" : pug_interp));
pug_mixins["custom-button"] = pug_interp = function(text, iconName = null, count = null){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "btn custom-button","type": "button"},attributes]), true)) + "\u003E\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp;";
if (count !== null) {
pug_html = pug_html + "\u003Cspan class=\"items-count\"\u003E" + (pug.escape(null == (pug_interp = count) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E";
}
if (iconName !== null) {
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E";
}
pug_html = pug_html + "\u003C\u002Fbutton\u003E";
};
pug_mixins["icon-textbox"] = pug_interp = function(id, placeholder, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "input-group icon-textbox-wrapper"},attributes]), true)) + "\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E\u003Ci class=\"material-icons\"\u003E" + (pug.escape(null == (pug_interp = iconName) ? "" : pug_interp)) + "\u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["button-textbox"] = pug_interp = function(id, placeholder, buttonText, iconName, ariaLabel = ''){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv class=\"input-group button-textbox-wrapper\"\u003E\u003Cinput" + (" class=\"form-control\""+pug.attr("id", id, true, true)+" type=\"text\""+pug.attr("aria-label", ariaLabel, true, true)+pug.attr("placeholder", placeholder, true, true)) + "\u003E\u003Cdiv class=\"input-group-append\"\u003E";
pug_mixins["custom-button"].call({
attributes: pug.merge([{"class": "palette-primary no-focus","id": pug.escape(id+"-button")},attributes])
}, buttonText, iconName);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E";
};




pug_mixins["spectrum-color-input"] = pug_interp = function(color = "#ff0000", text = ""){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cbutton" + (pug.attrs(pug.merge([{"class": "spectrum-color-input btn w-100 h-100 position-relative checkerboard","type": "button","value": pug.escape(color)},attributes]), true)) + "\u003E\u003Cdiv class=\"text-wrapper position-relative\" style=\"z-index: 2\"\u003E";
if (text !== "") {
pug_html = pug_html + "\u003Cspan class=\"label\"\u003E" + (pug.escape(null == (pug_interp = text) ? "" : pug_interp)) + "\u003C\u002Fspan\u003E&nbsp; &nbsp;";
}
pug_html = pug_html + "\u003Ci class=\"material-icons\"\u003Eedit       \u003C\u002Fi\u003E\u003C\u002Fdiv\u003E\u003Cdiv" + (" class=\"color position-absolute w-100 h-100\""+pug.attr("style", pug.style(`z-index: 1; background-color: ${color}`), true, true)) + "\u003E\u003C\u002Fdiv\u003E\u003C\u002Fbutton\u003E";
};
pug_mixins["gradient-input"] = pug_interp = function(){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "gradient-input"},attributes]), true)) + "\u003E\u003C\u002Fdiv\u003E";
};
pug_mixins["simple-radiobuttons"] = pug_interp = function(groupName, options, checkedKey){
var block = (this && this.block), attributes = (this && this.attributes) || {};
pug_html = pug_html + "\u003Cdiv" + (pug.attrs(pug.merge([{"class": "simple-radiobutton-wrapper","id": pug.escape(groupName)},attributes]), true)) + "\u003E";
// iterate options
;(function(){
  var $$obj = options;
  if ('number' == typeof $$obj.length) {
      for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
        var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
      }
  } else {
    var $$l = 0;
    for (var key in $$obj) {
      $$l++;
      var data = $$obj[key];
if (key == checkedKey) {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+" checked=\"\""+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
else {
pug_html = pug_html + "\u003Cdiv class=\"form-check\"\u003E\u003Cinput" + (" class=\"form-check-input\""+" type=\"radio\""+pug.attr("name", groupName, true, true)+pug.attr("value", key, true, true)) + "\u003E\u003Clabel" + (" class=\"form-check-label\""+pug.attr("for", key, true, true)) + "\u003E" + (null == (pug_interp = data.label) ? "" : pug_interp) + "\u003C\u002Flabel\u003E\u003C\u002Fdiv\u003E";
}
    }
  }
}).call(this);

pug_html = pug_html + "\u003C\u002Fdiv\u003E";
};
pug_html = pug_html + "\u003Cdiv\u003E\u003Cli" + (pug.attrs(pug.merge([{"class": "object-container","id": "layer-template","style": "display: none;","layer-id": "","layer-type": "","database-id": ""},attributes]), true)) + "\u003E";
pug_mixins["accordion-header-icon"].call({
attributes: {"class": "handle accordion-subsection-header layer-header"}
}, 'layer-template-accordion', 'Layer', 'visibility');
pug_html = pug_html + "\u003Cdiv class=\"show collapse\" id=\"layer-template-accordion\"\u003E\u003Cdiv class=\"sidebar-setting object-content pallette-bg-color-light-bg\"\u003E";
pug_mixins["custom-button"].call({
attributes: {"class": "clone-button"}
}, 'Clone layer', 'layers', null);
pug_html = pug_html + "\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer name\u003C\u002Fh6\u003E";
pug_mixins["icon-textbox"]('layer-name-textbox', 'Type in new layer name...', 'edit', 'layer-name');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer source\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-layer-dataset"}
}, 'select-layer-dataset', {}, 'Choose a dataset...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDisplayed attribute\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-attribute"}
}, 'select-attribute', {}, 'Choose an attribute...');
pug_html = pug_html + "\u003Cdiv class=\"mt-3 d-none\"\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-attribute-type"}
}, 'select-attribute-type', {}, 'Choose a type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ELayer type\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-layer-type"}
}, 'select-layer-type', layerTypes, 'Choose a layer type...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'layer-visibility-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Layer visibility', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESet color\u003C\u002Fh6\u003E";
pug_mixins["spectrum-color-input"].call({
attributes: {"class": "setting layer-color-input","id": "layer-color-input"}
}, "#ff0000", "Press to edit");
pug_html = pug_html + "\u003Cdiv class=\"gradient-input-wrapper d-none\"\u003E";
pug_mixins["gradient-input"].call({
attributes: {"class": "setting layer-gradient-input mb-4","id": "layer-gradient-input"}
});
pug_html = pug_html + "\u003Cp\u003E \u003C\u002Fp\u003EClick on handle to edit it's color\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EBlending mode\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-layer-blending-mode"}
}, 'select-layer-blending-mode', layerBlendingModes, 'Choose a mode...');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ESet opacity\u003C\u002Fh6\u003E\u003Cdiv class=\"slider-wrapper\"\u003E\u003Cinput class=\"js-range-slider\" id=\"layer-opacity\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'features-position';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Position', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFeature angle\u003C\u002Fh6\u003E\u003Cdiv class=\"text-center\" id=\"anglepicker\"\u003E\u003C\u002Fdiv\u003E\u003Ch6 class=\"subsection-header\"\u003EFeature offset ratio\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"feature-offset-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'features-size';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Size', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFeature size range\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"features-size-slider\" type=\"text\"\u003E\u003Ch6 class=\"subsection-header\"\u003EFont size ratio\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"font-size-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
var targetId = 'layer-weight';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Data weight', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EDisplayed value type\u003C\u002Fh6\u003E";
pug_mixins["simple-radiobuttons"]('weight-value-display', clustersValue, 'count');
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECount normalization method\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "stand-method"}
}, 'select-stand-method', standardisationMethods, "Choose a method...");
pug_html = pug_html + "\u003Ch6 class=\"subsection-header\"\u003EWeight growth function\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-growth"}
}, 'select-weight-growth', growthFunctions, "Choose a function...");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EWeight scaling factor ( \\(C\\) )\u003C\u002Fh6\u003E\u003Cinput class=\"js-range-slider\" id=\"weight-scaling-factor\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EWeight growth factor ( \\(a\\) )\u003C\u002Fh6\u003E\u003Cinput class=\"js-range-slider\" id=\"weight-growth-factor\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'layer-type-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Layer type settings', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse position-relative\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"point-settings type-settings d-none position-relative\" style=\"z-index: 11\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECardinality representation\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'point-card-value', 'simple', 'by value', true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'point-card-size', 'simple', 'by size', true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'point-card-color', 'simple', 'by color intensity', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"heatmap-settings type-settings d-none position-relative\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EHeatmap blur\u003C\u002Fh6\u003E\u003Cinput class=\"setting js-range-slider\" id=\"heatmap-blur\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"piechart-settings type-settings d-none position-relative\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECardinality representation\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'piechart-card-value', 'simple', 'by value', true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'piechart-card-size', 'simple', 'by size', true);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EGrouping small quantities\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'piechart-others-checkbox', 'simple', 'assign to <i>others</i> if frequency is', true);
pug_html = pug_html + "\u003Cinput class=\"setting js-range-slider\" id=\"piechart-others-slider\" type=\"text\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-2 setting"}
}, 'piechart-others-count-checkbox', 'simple', 'assign to <i>others</i> if count is', false);
pug_html = pug_html + "\u003Cinput class=\"setting js-range-slider\" id=\"piechart-others-count-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"tag-settings type-settings d-none position-relative\"\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003ECardinality representation\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'tag-card-size', 'simple', 'by size', true);
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'tag-card-color', 'simple', 'by color intensity', false);
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003Cdiv class=\"subsection\"\u003E\u003Ch6 class=\"subsection-header\"\u003EGrouping small quantities\u003C\u002Fh6\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "setting"}
}, 'tag-others-checkbox', 'simple', 'assign to <i>others</i> if frequency is', true);
pug_html = pug_html + "\u003Cinput class=\"setting js-range-slider\" id=\"tag-others-slider\" type=\"text\"\u003E";
pug_mixins["icon-checkbox"].call({
attributes: {"class": "mt-2 setting"}
}, 'tag-others-count-checkbox', 'simple', 'assign to <i>others</i> if count is', false);
pug_html = pug_html + "\u003Cinput class=\"setting js-range-slider\" id=\"tag-others-count-slider\" type=\"text\"\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card-body position-absolute default-message\" style=\"top: 0; z-index: 10\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"absence-prompt\"\u003ELayer type must be chosen first\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003Cdiv class=\"card settings\"\u003E";
targetId = 'values-settings';
pug_mixins["accordion-header-settings"].call({
attributes: {"class": "card-header"}
}, targetId, 'Features filtering', true);
pug_html = pug_html + "\u003Cdiv" + (" class=\"show collapse\""+pug.attr("id", targetId, true, true)) + "\u003E\u003Cdiv class=\"card-body\"\u003E\u003Cdiv class=\"subsection\"\u003E\u003Cdiv class=\"attribute-value-wrapper\"\u003E\u003Ch6 class=\"subsection-header\"\u003EValues filter\u003C\u002Fh6\u003E";
pug_mixins["dropdown-no-picker"].call({
attributes: {"class": "select-value","data-live-search": "true","data-width": "auto","multiple": true,"data-actions-box": "true","data-selected-text-format": "count"}
}, 'select-value', {}, "Choose a value...");
pug_html = pug_html + "\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003C\u002Fdiv\u003E\u003Cdiv\u003E\u003Cli" + (pug.attrs(pug.merge([{"class": "dataset object-container","id": "dataset-template","style": "display: none;"},attributes]), true)) + "\u003E";
pug_mixins["accordion-header-icon"].call({
attributes: {"class": "handle accordion-subsection-header collapsed"}
}, 'dataset-template-accordion', 'Dataset', 'file_download');
pug_html = pug_html + "\u003Cdiv class=\"collapse\" id=\"dataset-template-accordion\"\u003E\u003Cdiv class=\"object-content pallette-primary-color-lightest-bg\"\u003E\u003Ch6 class=\"subsection-header\"\u003EObjects dating\u003C\u002Fh6\u003E\u003Cp class=\"meta-dating\"\u003E\u003C\u002Fp\u003E\u003C\u002Fdiv\u003E\u003C\u002Fdiv\u003E\u003C\u002Fli\u003E\u003C\u002Fdiv\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery\u002F3.3.1\u002Fjquery.min.js\" integrity=\"sha256-FgpCb\u002FKJQlLNfOu91ta32o\u002FNMZxltwRo8QtmkMRdAu8=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery-easing\u002F1.4.1\u002Fjquery.easing.min.js\" integrity=\"sha256-H3cjtrm\u002FztDeuhCN9I4yh4iN2Ybx\u002Fy1RM7rMmAesA0k=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjquery-mousewheel\u002F3.1.13\u002Fjquery.mousewheel.min.js\" integrity=\"sha256-jnOjDTXIPqall8M0MyTSt98JetJuZ7Yu+1Jm7hLTF7U=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fmalihu-custom-scrollbar-plugin\u002F3.1.5\u002Fjquery.mCustomScrollbar.min.js\" integrity=\"sha256-AKEjDiK2rz+d8TSPLNVNydvgJvOkG5veMAnc79FkiuE=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fpopper.js\u002F1.14.7\u002Fumd\u002Fpopper.min.js\" integrity=\"sha256-ZvOgfh+ptkpoa2Y4HkRY28ir89u\u002F+VRyDE7sB7hEEcI=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Ftwitter-bootstrap\u002F4.5.0\u002Fjs\u002Fbootstrap.bundle.min.js\" integrity=\"sha256-Xt8pc4G0CdcRvI0nZ2lRpZ4VHng0EoUDMlGcBSQ9HiQ=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fjson5@2.1.3\u002Fdist\u002Findex.min.js\" integrity=\"sha256-b6dyH0K\u002FnE4K1\u002Fd36PNAa96t19du7JXpzpcS9K3o4Sg=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fjqueryui\u002F1.12.1\u002Fjquery-ui.min.js\" integrity=\"sha256-KM512VNnjElC30ehFwehXjx1YCHPiQkOPmqnrWtpccM=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap-select@1.13.17\u002Fdist\u002Fjs\u002Fbootstrap-select.min.js\" integrity=\"sha256-QOE02Glo1C1gHzP96JOaxyIMt4XSFv\u002FexZaYLY4dwO0=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E";
if (lang === 'pl') {
pug_html = pug_html + "\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap-select@1.13.17\u002Fjs\u002Fi18n\u002Fdefaults-pl_PL.js\" integrity=\"sha256-aWaZCaqYgueDr4CzKzw7FlKCuaoJEwOOM9LJ79aSmlk=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E";
}
pug_html = pug_html + (null == (pug_interp = __webpack_require__(4697).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(6603).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(3678).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(802).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(1087).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(8635).call(this, locals)) ? "" : pug_interp) + "\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fmathjax@3.2.0\u002Fes5\u002Ftex-chtml.js\" integrity=\"sha256-z47L98YXVhVIaY0uyDzt675P5Ea+w3RsPh9VD5NuoTY=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fbootstrap-slider\u002F10.6.1\u002Fbootstrap-slider.min.js\" integrity=\"sha256-nviKEC91moGfyFMMzT31WyNxuAvIIgOSkSGi7K6U7EU=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fion-rangeslider\u002F2.3.1\u002Fjs\u002Fion.rangeSlider.min.js\" integrity=\"sha256-Z639rJO57BiZzQDlWsGyF+EJ3Fs3nD4pQPkfimTy3S8=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fbootbox.js\u002F5.4.0\u002Fbootbox.min.js\" integrity=\"sha256-sfG8c9ILUB8EXQ5muswfjZsKICbRIJUG\u002FkBogvvV5sY=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fdot\u002F1.1.3\u002FdoT.min.js\" integrity=\"sha256-0Mj4wysSsxKrjqVsgnOgOeRZbPreFi\u002FT3+zb+cyR7Jw=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fjquery-extendext@1.0.0\u002Fjquery-extendext.min.js\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.polyfill.io\u002Fv2\u002Fpolyfill.min.js?features=fetch,requestAnimationFrame,Element.prototype.classList,URL\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-toggle@3.6.1\u002Fjs\u002Fbootstrap4-toggle.min.js\" integrity=\"sha256-p6I+tuAqpKQhe7ldkP1yo\u002FDu0QRYjm1O3reSKIiS4AM=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap4-tagsinput@4.1.3\u002Ftagsinput.min.js\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fd3\u002F7.0.0\u002Fd3.min.js\" integrity=\"sha512-0x7\u002FVCkKLLt4wnkFqI8Cgv6no+AaS1TDgmHLOoU3hy\u002FWVtYta2J6gnOIHhYYDJlDxPqEqAYLPS4gzVex4mGJLw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fd3-cloud\u002F1.2.5\u002Fd3.layout.cloud.min.js\" integrity=\"sha512-HjKxWye8lJGPu5q1u\u002FZYkHlJrJdm6KGr89E6tOrXeKm1mItb1xusPU8QPcKVhP8F9LjpZT7vsu1Fa+dQywP4eg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fspectrum\u002F1.8.1\u002Fspectrum.min.js\" integrity=\"sha512-1aNp9qKP+hKU\u002FVJwCtYqJP9tdZWbMDN5pEEXXoXT0pTAxZq1HHZhNBR\u002FdtTNSrHO4U1FsFGGILbqG1O9nl8Mdg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E";
if (lang === 'pl') {
pug_html = pug_html + "\u003Cscript defer src=\"https:\u002F\u002Fcdnjs.cloudflare.com\u002Fajax\u002Flibs\u002Fspectrum\u002F1.8.1\u002Fi18n\u002Fjquery.spectrum-pl.min.js\" integrity=\"sha512-0UvyL53U6fv8w7tC67XkRppluiO3L3+CmybHSmBI44qCbq7uAnqh1FABbNuHXfLFAlWgfs225CCWppX7DELwnw==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"\u003E\u003C\u002Fscript\u003E";
}
pug_html = pug_html + "\u003Cscript defer src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fgrapick@0.1.13\u002Fdist\u002Fgrapick.min.js\" integrity=\"sha256-JJRsqxxtOYcINfLqsBhGYa\u002FfQOBx6m\u002Fpk2xDnaPKEOI=\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"\u002Fplugins\u002Fjquery.simulate.js\" type=\"text\u002Fjavascript\"\u003E\u003C\u002Fscript\u003E\u003Cscript defer src=\"\u002Fplugins\u002Fanglepicker-1.0.1.js\" type=\"text\u002Fjavascript\"\u003E\u003C\u002Fscript\u003E" + (null == (pug_interp = __webpack_require__(727).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(481).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(9712).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(4459).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(3838).call(this, locals)) ? "" : pug_interp) + (null == (pug_interp = __webpack_require__(8501).call(this, locals)) ? "" : pug_interp) + "\u003C\u002Fbody\u003E\u003C\u002Fhtml\u003E";
    }.call(this, "JSON" in locals_for_with ?
        locals_for_with.JSON :
        typeof JSON !== 'undefined' ? JSON : undefined, "Math" in locals_for_with ?
        locals_for_with.Math :
        typeof Math !== 'undefined' ? Math : undefined, "Object" in locals_for_with ?
        locals_for_with.Object :
        typeof Object !== 'undefined' ? Object : undefined, "ariaLabel" in locals_for_with ?
        locals_for_with.ariaLabel :
        typeof ariaLabel !== 'undefined' ? ariaLabel : undefined, "attributes" in locals_for_with ?
        locals_for_with.attributes :
        typeof attributes !== 'undefined' ? attributes : undefined, "classes" in locals_for_with ?
        locals_for_with.classes :
        typeof classes !== 'undefined' ? classes : undefined, "clusteringDic" in locals_for_with ?
        locals_for_with.clusteringDic :
        typeof clusteringDic !== 'undefined' ? clusteringDic : undefined, "clustersValue" in locals_for_with ?
        locals_for_with.clustersValue :
        typeof clustersValue !== 'undefined' ? clustersValue : undefined, "datasetsDic" in locals_for_with ?
        locals_for_with.datasetsDic :
        typeof datasetsDic !== 'undefined' ? datasetsDic : undefined, "expanded" in locals_for_with ?
        locals_for_with.expanded :
        typeof expanded !== 'undefined' ? expanded : undefined, "fileTypes" in locals_for_with ?
        locals_for_with.fileTypes :
        typeof fileTypes !== 'undefined' ? fileTypes : undefined, "growthFunctions" in locals_for_with ?
        locals_for_with.growthFunctions :
        typeof growthFunctions !== 'undefined' ? growthFunctions : undefined, "lang" in locals_for_with ?
        locals_for_with.lang :
        typeof lang !== 'undefined' ? lang : undefined, "layerBlendingModes" in locals_for_with ?
        locals_for_with.layerBlendingModes :
        typeof layerBlendingModes !== 'undefined' ? layerBlendingModes : undefined, "layerTypes" in locals_for_with ?
        locals_for_with.layerTypes :
        typeof layerTypes !== 'undefined' ? layerTypes : undefined, "maxYear" in locals_for_with ?
        locals_for_with.maxYear :
        typeof maxYear !== 'undefined' ? maxYear : undefined, "metadata" in locals_for_with ?
        locals_for_with.metadata :
        typeof metadata !== 'undefined' ? metadata : undefined, "minYear" in locals_for_with ?
        locals_for_with.minYear :
        typeof minYear !== 'undefined' ? minYear : undefined, "page" in locals_for_with ?
        locals_for_with.page :
        typeof page !== 'undefined' ? page : undefined, "pageName" in locals_for_with ?
        locals_for_with.pageName :
        typeof pageName !== 'undefined' ? pageName : undefined, "scenarios" in locals_for_with ?
        locals_for_with.scenarios :
        typeof scenarios !== 'undefined' ? scenarios : undefined, "standardisationMethods" in locals_for_with ?
        locals_for_with.standardisationMethods :
        typeof standardisationMethods !== 'undefined' ? standardisationMethods : undefined, "targetId" in locals_for_with ?
        locals_for_with.targetId :
        typeof targetId !== 'undefined' ? targetId : undefined));
    ;;return pug_html;};
module.exports = template;

/***/ }),

/***/ 7055:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


var pug_has_own_property = Object.prototype.hasOwnProperty;

/**
 * Merge two attribute objects giving precedence
 * to values in object `b`. Classes are special-cased
 * allowing for arrays and merging/joining appropriately
 * resulting in a string.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api private
 */

exports.merge = pug_merge;
function pug_merge(a, b) {
  if (arguments.length === 1) {
    var attrs = a[0];
    for (var i = 1; i < a.length; i++) {
      attrs = pug_merge(attrs, a[i]);
    }
    return attrs;
  }

  for (var key in b) {
    if (key === 'class') {
      var valA = a[key] || [];
      a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
    } else if (key === 'style') {
      var valA = pug_style(a[key]);
      valA = valA && valA[valA.length - 1] !== ';' ? valA + ';' : valA;
      var valB = pug_style(b[key]);
      valB = valB && valB[valB.length - 1] !== ';' ? valB + ';' : valB;
      a[key] = valA + valB;
    } else {
      a[key] = b[key];
    }
  }

  return a;
}

/**
 * Process array, object, or string as a string of classes delimited by a space.
 *
 * If `val` is an array, all members of it and its subarrays are counted as
 * classes. If `escaping` is an array, then whether or not the item in `val` is
 * escaped depends on the corresponding item in `escaping`. If `escaping` is
 * not an array, no escaping is done.
 *
 * If `val` is an object, all the keys whose value is truthy are counted as
 * classes. No escaping is done.
 *
 * If `val` is a string, it is counted as a class. No escaping is done.
 *
 * @param {(Array.<string>|Object.<string, boolean>|string)} val
 * @param {?Array.<string>} escaping
 * @return {String}
 */
exports.classes = pug_classes;
function pug_classes_array(val, escaping) {
  var classString = '',
    className,
    padding = '',
    escapeEnabled = Array.isArray(escaping);
  for (var i = 0; i < val.length; i++) {
    className = pug_classes(val[i]);
    if (!className) continue;
    escapeEnabled && escaping[i] && (className = pug_escape(className));
    classString = classString + padding + className;
    padding = ' ';
  }
  return classString;
}
function pug_classes_object(val) {
  var classString = '',
    padding = '';
  for (var key in val) {
    if (key && val[key] && pug_has_own_property.call(val, key)) {
      classString = classString + padding + key;
      padding = ' ';
    }
  }
  return classString;
}
function pug_classes(val, escaping) {
  if (Array.isArray(val)) {
    return pug_classes_array(val, escaping);
  } else if (val && typeof val === 'object') {
    return pug_classes_object(val);
  } else {
    return val || '';
  }
}

/**
 * Convert object or string to a string of CSS styles delimited by a semicolon.
 *
 * @param {(Object.<string, string>|string)} val
 * @return {String}
 */

exports.style = pug_style;
function pug_style(val) {
  if (!val) return '';
  if (typeof val === 'object') {
    var out = '';
    for (var style in val) {
      /* istanbul ignore else */
      if (pug_has_own_property.call(val, style)) {
        out = out + style + ':' + val[style] + ';';
      }
    }
    return out;
  } else {
    return val + '';
  }
}

/**
 * Render the given attribute.
 *
 * @param {String} key
 * @param {String} val
 * @param {Boolean} escaped
 * @param {Boolean} terse
 * @return {String}
 */
exports.attr = pug_attr;
function pug_attr(key, val, escaped, terse) {
  if (
    val === false ||
    val == null ||
    (!val && (key === 'class' || key === 'style'))
  ) {
    return '';
  }
  if (val === true) {
    return ' ' + (terse ? key : key + '="' + key + '"');
  }
  var type = typeof val;
  if (
    (type === 'object' || type === 'function') &&
    typeof val.toJSON === 'function'
  ) {
    val = val.toJSON();
  }
  if (typeof val !== 'string') {
    val = JSON.stringify(val);
    if (!escaped && val.indexOf('"') !== -1) {
      return ' ' + key + "='" + val.replace(/'/g, '&#39;') + "'";
    }
  }
  if (escaped) val = pug_escape(val);
  return ' ' + key + '="' + val + '"';
}

/**
 * Render the given attributes object.
 *
 * @param {Object} obj
 * @param {Object} terse whether to use HTML5 terse boolean attributes
 * @return {String}
 */
exports.attrs = pug_attrs;
function pug_attrs(obj, terse) {
  var attrs = '';

  for (var key in obj) {
    if (pug_has_own_property.call(obj, key)) {
      var val = obj[key];

      if ('class' === key) {
        val = pug_classes(val);
        attrs = pug_attr(key, val, false, terse) + attrs;
        continue;
      }
      if ('style' === key) {
        val = pug_style(val);
      }
      attrs += pug_attr(key, val, false, terse);
    }
  }

  return attrs;
}

/**
 * Escape the given string of `html`.
 *
 * @param {String} html
 * @return {String}
 * @api private
 */

var pug_match_html = /["&<>]/;
exports.escape = pug_escape;
function pug_escape(_html) {
  var html = '' + _html;
  var regexResult = pug_match_html.exec(html);
  if (!regexResult) return _html;

  var result = '';
  var i, lastIndex, escape;
  for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
    switch (html.charCodeAt(i)) {
      case 34:
        escape = '&quot;';
        break;
      case 38:
        escape = '&amp;';
        break;
      case 60:
        escape = '&lt;';
        break;
      case 62:
        escape = '&gt;';
        break;
      default:
        continue;
    }
    if (lastIndex !== i) result += html.substring(lastIndex, i);
    lastIndex = i + 1;
    result += escape;
  }
  if (lastIndex !== i) return result + html.substring(lastIndex, i);
  else return result;
}

/**
 * Re-throw the given `err` in context to the
 * the pug in `filename` at the given `lineno`.
 *
 * @param {Error} err
 * @param {String} filename
 * @param {String} lineno
 * @param {String} str original source
 * @api private
 */

exports.rethrow = pug_rethrow;
function pug_rethrow(err, filename, lineno, str) {
  if (!(err instanceof Error)) throw err;
  if ((typeof window != 'undefined' || !filename) && !str) {
    err.message += ' on line ' + lineno;
    throw err;
  }
  var context, lines, start, end;
  try {
    str = str || __webpack_require__(7835).readFileSync(filename, {encoding: 'utf8'});
    context = 3;
    lines = str.split('\n');
    start = Math.max(lineno - context, 0);
    end = Math.min(lines.length, lineno + context);
  } catch (ex) {
    err.message +=
      ' - could not read from ' + filename + ' (' + ex.message + ')';
    pug_rethrow(err, null, lineno);
    return;
  }

  // Error context
  context = lines
    .slice(start, end)
    .map(function(line, i) {
      var curr = i + start + 1;
      return (curr == lineno ? '  > ' : '    ') + curr + '| ' + line;
    })
    .join('\n');

  // Alter exception message
  err.path = filename;
  try {
    err.message =
      (filename || 'Pug') +
      ':' +
      lineno +
      '\n' +
      context +
      '\n\n' +
      err.message;
  } catch (e) {}
  throw err;
}


/***/ }),

/***/ 7835:
/***/ (() => {

/* (ignored) */

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					result = fn();
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/runtimeId */
/******/ 	(() => {
/******/ 		__webpack_require__.j = 842;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			842: 0,
/******/ 			54: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			__webpack_require__.O();
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = window["webpackChunkpiast"] = window["webpackChunkpiast"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [22,994,687,962,669,399,131,498,810,229,169,419,300,481,566,446,439,203,221,54], () => (__webpack_require__(230)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;